{"meta":{"title":"Blog","subtitle":null,"description":null,"author":"Qian Lina","url":"http://yoursite.com","root":"/"},"pages":[{"title":"tags","date":"2019-10-08T06:02:42.000Z","updated":"2019-10-08T06:46:46.395Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-08T06:02:42.000Z","updated":"2019-10-08T09:23:25.830Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2019-10-08T06:02:42.000Z","updated":"2019-10-08T07:29:48.008Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"养花大爷","slug":"life-flowers","date":"2019-10-13T13:38:59.000Z","updated":"2019-10-17T14:35:24.060Z","comments":true,"path":"2019/10/13/life-flowers/","link":"","permalink":"http://yoursite.com/2019/10/13/life-flowers/","excerpt":"准确的来说，入坑月季的时间是19年。6月的时候在某宝买了三颗月季，品种分别是真宙，心之水滴和诺瓦利斯 三颗来的时候都带着花苞，所以基本上开一轮花应该不是问题，本应该这样，但是实际上第一波花开了的只有真宙和水滴。 真宙和心之水滴很快就开花了，表现良好，但是季节正好是夏，魔都持续高温，再加上是初花，所以花型很散，基本看不出什么型，但是颜色对版，特别是真宙还有股水果香味，还算美丽。原本最期待的蓝色系的诺瓦利斯并没有那么顺利的开花。刚出两个花苞的那边魔都开始进入到午后暴雨定番的时候了，本应在日程上的盛放就被不断推迟，知道最后艰难的开出了两朵粉色的小花，且当天下午所有花瓣就被暴雨冲落了。o(╥﹏╥)o","text":"准确的来说，入坑月季的时间是19年。6月的时候在某宝买了三颗月季，品种分别是真宙，心之水滴和诺瓦利斯 三颗来的时候都带着花苞，所以基本上开一轮花应该不是问题，本应该这样，但是实际上第一波花开了的只有真宙和水滴。 真宙和心之水滴很快就开花了，表现良好，但是季节正好是夏，魔都持续高温，再加上是初花，所以花型很散，基本看不出什么型，但是颜色对版，特别是真宙还有股水果香味，还算美丽。原本最期待的蓝色系的诺瓦利斯并没有那么顺利的开花。刚出两个花苞的那边魔都开始进入到午后暴雨定番的时候了，本应在日程上的盛放就被不断推迟，知道最后艰难的开出了两朵粉色的小花，且当天下午所有花瓣就被暴雨冲落了。o(╥﹏╥)o 这里不得不说夸一下真宙，截止到9月底，真宙开花数超过了10朵且花型肉眼可见的越来越标准，越来越包子，总共开了三波的花，开花机器名不虚传。 尝到甜头之后在8月又入了三个品种：黑巴克，夏洛特夫人，羽毛。 羽毛很不幸的在拆开快递的时候发现一个花苞和一根枝条已经折断了，但是夏洛特夫人和黑巴克状态很棒，不久之后就开花了 黑巴克真的惊艳，夏洛特夫人花型在初花的时候就已经很棒了，羽毛颜色也很不错，这次虽然有遗憾，少了一朵花和枝条，但是初花的花型是真的美。 但是这个三个品种明显开花的频率比不上开花机器，截止到9月底，再打了花苞的只有黑巴克 黑巴克实物真的很黑，从花心向外呈黑色到红色的渐变 蓟马，蚜虫 国庆节前后遭遇了一波病虫害，这种时候就能看出来月季不同品种的抗病性的强弱。很明显黑巴克是已拥有的六个品种中抗病性最弱的。蚍虫林兑水喷洒到叶片上直到能滴水为止，大概三天蓟马和蚜虫都消失了。 蚜虫和蓟马没了之后，大部分月季都开始继续一波发芽和生长，但是黑巴克又招了不知道哪里来的小毛虫，抗病性啊抗病性，蚍虫林继续喷也解决了。 修剪狂魔 每个人养花草都会有自己的风格，我觉得用个词来形容我的风格的话可能是，修剪狂魔。 好在月季比较皮实，不怕我的修剪，尤其是夏洛特夫人，真宙和诺瓦利斯，同样修剪后追肥的操作，这三个品种对这个操作的受用度最高，诺瓦利斯和夏洛特表现是向上不断生长，真宙则是在中间段出芽同时苗也越来越壮了，竖向生长和横向生长的区别。 夏洛特长太高了，于是给它放了个爬藤架，把枝条沿S形固定到架子上，很多博主说这样有利于打破顶端优势，有利于多花。过几个月看情况吧 月季真的是个剁手的玩意儿啊，太上瘾了！！ 10月13号，又入了7颗品种的月季，顺便还入了两颗铁线莲。 月季分别是： 蜻蜓 [紫色系] [蕾丝花瓣边] 永远的那不勒斯 [橙色系] [从外往内红至金色的渐变色，整体复古色系] [耐晒需要勤修剪，不然会长很大] [小苗单头开花，大苗会多头] 金边玫瑰 [红色系] [可食用] 和室 [粉色系] [外瓣为深粉色，内花主要为白色或者非常淡的粉色] [开花机器] [枝条软] [包子] 海洋之歌 [蓝色系] [花型为玫瑰型] 瑞典女王 [杏粉色] [花型优雅] 京 [粉色系] [多头开花] [开花机器] 铁线莲： 乌托邦[单瓣] [粉白色] [极易养护] [叶片很绿] 魔法喷泉 [重瓣] [正紫色系] [花实在是华丽] [叶片有紫色纹路] 9.15 新买的那7颗月季在路上耽搁了3天总算是的到了，到手又是惊呆，原本以为是8朵，店家居然又送了两颗，总共9朵，9朵大部分都带着花来的，有些花都已经盛开了，所以在快递箱里掉了很多的花瓣 既然到手了，那就来记录一下到手的时候9颗的状态和第一印象好了 叶序，脉序，花序，花冠 和室: -首先和室是带着花苞来的，花苞打的很大，但是很可惜的是，花苞整个掉落了。光看花苞也能看到颜色很美 花萼首先是正统月季的光滑五片花萼 奇异盛典 ：- 奇异盛典是店家送的。 叶子：乍一看，叶片有规则的锯齿，嫩叶为红绿色到绿色，带红边，红叶柄，单数羽状复叶，一柄上最多有7片叶子，总体来说和玫瑰较为相似 花苞： 无花苞。 枝条： 绿色，直立性较强，较为粗壮 刺：短且硬直，较为密集，可轻易掰下， 温柔水晶： 也是店家送的。 蜻蜓: 带着花苞来的额，第二天就盛放了，完全不包，散开状，花瓣波浪边，较硬，硬的花瓣真的挺特别的，花瓣也不易掉落，很适合当切花。 有花香味，具体形容的话就是鲜花饼内馅儿的香味，闻得我想吃鲜花饼了。 永远的那不勒斯 金边玫瑰 海洋之歌 瑞典女王 京","categories":[{"name":"hide","slug":"hide","permalink":"http://yoursite.com/categories/hide/"}],"tags":[{"name":"日常","slug":"日常","permalink":"http://yoursite.com/tags/日常/"}]},{"title":"three.js学习笔记","slug":"import-three","date":"2019-10-11T08:42:51.000Z","updated":"2019-10-18T07:48:47.998Z","comments":true,"path":"2019/10/11/import-three/","link":"","permalink":"http://yoursite.com/2019/10/11/import-three/","excerpt":"早些年就听说过D3和three.js，但是学习的难度劝退了我，现在重新捡起来，一是正好项目提前结束有了休息的时间，二是three.js的确能做出很酷炫的效果，着实令人心动¶开始开始学习前首先是很重要的，在项目中，特别是vue项目中引入three.js的方法。 1、首先安装three.js npm install three 2.接下来利用npm安装轨道控件插件： npm install three-orbit-controls 3.接下来安装加载.obj和.mtl文件的插件： npm i --save three-obj-mtl-loader 4.安装渲染器插件： npm i --save three-css2drender 5、安装好以后，在页面中引入three.js并使用，在所调用页面引入的代码为： import * as Three from ‘three’ 原文链接：https://blog.csdn.net/baidu_41601299/article/details/88663673","text":"早些年就听说过D3和three.js，但是学习的难度劝退了我，现在重新捡起来，一是正好项目提前结束有了休息的时间，二是three.js的确能做出很酷炫的效果，着实令人心动¶开始开始学习前首先是很重要的，在项目中，特别是vue项目中引入three.js的方法。 1、首先安装three.js npm install three 2.接下来利用npm安装轨道控件插件： npm install three-orbit-controls 3.接下来安装加载.obj和.mtl文件的插件： npm i --save three-obj-mtl-loader 4.安装渲染器插件： npm i --save three-css2drender 5、安装好以后，在页面中引入three.js并使用，在所调用页面引入的代码为： import * as Three from ‘three’ 原文链接：https://blog.csdn.net/baidu_41601299/article/details/88663673 补充： 如下载three.js辅助库 stats.js ,可以运行这行命令： npm install stats.js 补充二: 如需下载通道后期处理插件PostProcessing npm链接 npm install three postprocessing *切记！*不要去下载npm的打包好的插件，因为时效性比较差，最好的方法是去官方开源项目直接下载然后引入 1234import &#123; Clock, PerspectiveCamera, Scene, WebGLRenderer &#125; from \"three\";import &#123; BloomEffect, EffectComposer, EffectPass, RenderPass &#125; from \"postprocessing\";……const composer = new EffectComposer(new WebGLRenderer()); // 用法举例 这个插件只包含了部分PostProcessing下的插件集合，如果想引入其他的插件，具体看 效果 那一章 ¶First Demo 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;template&gt; &lt;div&gt; &lt;div id=\"container\"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import * as Three from 'three' export default &#123; name: 'ThreeTest', data () &#123; return &#123; camera: null, scene: null, renderer: null, mesh: null &#125; &#125;, methods: &#123; init: function () &#123; let container = document.getElementById('container') this.camera = new Three.PerspectiveCamera(70, container.clientWidth / container.clientHeight, 0.01, 10) this.camera.position.z = 0.6 this.scene = new Three.Scene() let geometry = new Three.BoxGeometry(0.2, 0.2, 0.2) let material = new Three.MeshNormalMaterial() this.mesh = new Three.Mesh(geometry, material) this.scene.add(this.mesh) this.renderer = new Three.WebGLRenderer(&#123;antialias: true&#125;) this.renderer.setSize(container.clientWidth, container.clientHeight) container.appendChild(this.renderer.domElement) &#125;, animate: function () &#123; requestAnimationFrame(this.animate) this.mesh.rotation.x += 0.01 this.mesh.rotation.y += 0.02 this.renderer.render(this.scene, this.camera) &#125; &#125;, mounted () &#123; this.init() this.animate() &#125; &#125;&lt;/script&gt;&lt;style scoped&gt; #container &#123; height: 400px; &#125;&lt;/style&gt; 以上代码运行后，应该能看大一个在旋转着的多色正方体。 ¶三要素 在three.js中想要将物体渲染到浏览器中，必须设置三个要素，分别是场景（scene）、相机（camera）和渲染器（renderer）。 ¶场景(scene) 场景的概念很容易理解，如果将html比作一个空间，我们希望在这个空间内上演一出戏码，那么首先需要给这场戏布置一个场景或者说是舞台，布置的方法也很简单，只需要new一个对象 var scene = new THREE.Scene(); ¶相机(camera) 一场戏的呈现离不开看的人，也就是观众，camera通俗的来说就是视角点。 我们设置了舞台之后我们还需要设置观众席或摄像机的位置。 视角点的设置是决定这场戏呈现出来的最终效果的决定因素之一，有了视角点我们就可以轻易的控制哪些东西出现或不出现在观众和镜头的视线范围内。 相机(camera)和场景不同，可以有很多种，就好比摄影中的各个镜头，一般我们最常用的是透视相机(THREE.PerspectiveCamera) 我们在定义新相机的时候必须先指定一个相机类型。 每个相机类型都是一个构造函数。这里我们只列出了PerspectiveCamera函数的用法。 1PerspectiveCamera(fov, aspect, near, far) Fov(int): 相机的视锥体的垂直视野角 Aspect(init): 相机视锥体的长宽比 Near(int): 相机视锥体的近平面 Far(int): 相机视锥体的远平面 举个栗子： var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000); ¶渲染器（renderer） 几乎所有的在web中渲染图形的工具或框架中（例如echarts）,最后的一步都是渲染。 渲染一般作为最后一个步骤，当我们把所有的静态图形，场景，相机等全部设置完毕后，进行渲染即可在web中看到最终效果。 而我们在进行渲染前，必须先准备一个渲染器。 定义一个渲染器可分以下三步 123var renderer = new THREE.WebGLRenderer(); // 定义一个渲染器renderer.setSize(window.innerWidth, window.innerHeight); // 渲染器设置高宽document.body.appendChild(renderer.domElement); // 将渲染器中的dom加入到指定的容器dom中 ¶准备完毕 当我们准备完了三要素之后，我们就该正式开演了，开演的这个过程我们也叫做渲染。 渲染在这里是动词，和三要素之一的渲染器不同，渲染器是名词，用来指定渲染方式，渲染大小等内容 而最终我们需要用渲染器将准备好的元素渲染到网页上 1renderer.render( scene, camera, renderTarget, forceClear ) scene：必填。定义好的场景 camera：必填。定义好的相机 renderTarget：非必填。渲染的目标，默认是渲染到前面定义的render变量中 forceClear：非必填。每次绘制之前都将画布的内容给清除，即使自动清除标志autoClear为false，也会清除。 ¶重要元素 一场戏要能被称为戏，必不可少的元素还有很多，我们上述的三要素，仅仅是让我们的架子可以呈现出来，然而最关键的内容却为空，那就不能称之为戏。 而这也是开发中最复杂最难的元素之一。 ¶Heroes 首先我们需要演员或者道具出现在舞台上，在three.js中我们称他们为Things，物体。 物体需要出现在舞台上分两步，当然这两步都是在渲染前进行的。 第一步：定义一个物体 第二步：把物体添加到舞台上，就这么简单【X 123……省略参数定义var line = new Three.Line(Geometry, Material );// 定义一条线,参数内容放到下面详述this.scene.add( line ); // 加入到场景中 ¶Object three内置了多重对象，用于定义一个物体的类型，上述例子中，定义的就是一个线的对象作为物体。 要注意的是，在开发过程中，我们往往定义好了材料和模型之后再写对象，但是对象的选择在开发过程中需要作为定义物体时第一个思考的内容，因为对象直接决定了材料和模型二者的可选范围。 比如我想画一个点，那就必须先定义一个点的对象作为物体，然后再选择点对象下可选择的材料和模型。 我们定义了一个对象后，该对象仍然只是一个空壳，我们需要给对象传入对象的材料和模型(部分对象不需要材质或者模型，需根据对象来决定是否传入) 也就是上述代码中构造函数内的两个传参，Material和Geometry ¶Material(材料) 首先介绍的是Material，字面意思是材料，但是在three.js中，Material的构造函数和我们日常生活中的材料的定义有所不同。 材料的种类有很多，在文档中我们可以分别查看到。这里不多赘述 在实际开发过程中最复杂也是最常用的材料之一ShaderMaterial,另开一片叙述。 ¶Geometry(模型) 任何的things构造函数都需要Material和Geometry两项参数。Geometry表示该物体选用的几何模型。 当我们选用一个几何的时候，Geometry该选择哪个的问题很容易得到答案 three.js提供了大量的模型可供选择，例如平面模型PlaneGeometry，平面圆模型CircleBufferGeometry， 在比如盒子模型BoxGeometry，环形扭结模型TorusKnotGeometry等等。 1234var geometry = new Three.PlaneGeometry( 5, 20, 32); // 由于第三步中的对象是Mesh网点对象，PlaneGeometry属于Mesh对象之一，因此可以选此模型。var material = new Three.MeshBasicMaterial( &#123;color: 0xffff00, side: Three.DoubleSide&#125; ); // 由于对象是Mesh,模型是平面模型，可选材料被限制，MeshBasicMaterial为这种情况下可选的材料。var planeDemo = new Three.Mesh( geometry, material );// 选择网点对象Mesh，将模型和材料作为参数传入对象。this.scene.add( planeDemo ); 重要的事情说两遍，需要注意的是，模型也需要根据对象的类型去选择。 小结：文章写到这里，如果理解透了的话，已经可以写出大部分的最基本的静态物体了。可以先试着写一个人脸模型或是一个静态粒子图 ¶Lights 我们需要体现质感和更加丰富立体的物体时，灯光就是个强力的帮手， three.js中同样提供灯光设置。 ------------- 中场休息 ------------- 俗话说一口吃不成胖子，研究和学习也不是一两天就直接能成大神的，研究了两天three.js后目前我能制作出的也只是简单的视角变化粒子动画而已。有很多更加酷炫的效果，更多好玩的动画，还需要更深入的研究。 这一小节说的是灯光的设置，这在塑造立体感中是绝不可缺的设置之一。 基础光的设置非常简单 1Var redLight = new THREE.Light(0xFF0000); // 一个红色光 THREE.Light只是其他所有光源的基类，要让光源除了具有颜色的特性之外，我们需要其他光源。看看，下面的类图，是目前光源的继承结构。 ¶光与材料的关系 光与材料的关系，紧密相连。 这里举个例子，有一种材料，属性值中有颜色，但是无论设置什么颜色，在没有设置光的情况下最终表现都是黑色，这种材料也是种常用材料，MeshLambertMaterial,中文译名为兰伯特网格材质 123456789101112&lt;!-- 省略其他初始化基本元素 --&gt;var geometry = new Three.BoxGeometry( 10,10,10);// 盒子模型var material = new Three.MeshLambertMaterial( &#123; color:0xFFFF00&#125; );// 兰伯特材料设置为黄色var mesh = new Three.Mesh( geometry,material);// 设置光源var light = new Three.DirectionalLight(0xffffff, 0.5);// 这里设置的是平行光light.position.set(0,0,1);scene.add(light);mesh.position.set(0,0,0);scene.add(mesh);this.renderer.render(scene, camera); 以上代码中，如果去掉光源添加，页面中表现是这样的： 我们简单的给他加一个白光的话，为了更清晰的看到效果，我设置了一些辅助的坐标轴和平面的显示，表现是这样： 我们可以看出物体最终表现出来的颜色与光有关，我们设置光源为白色，物体为黄色，最终呈现出的是黄色的物体。 可能有人会以为光的颜色对物体没有影响，其实不然。 还是以上代码。我们把光的颜色设置为红色 1var light = new Three.DirectionalLight(0xe20000, 0.5);/ 效果最终是这样的。 其实物体最终呈现出来的颜色是光线颜色和物体本身颜色的叠加色。如果我们设置光线为正蓝色，物体为正黄色的话，物体最终会表现为黑色。 ¶纹理 ¶基础纹理 纹理对于一个物体有多重要是很容易被发现的一件事情。因为我们的眼睛无时无刻不在观察着周围的一切物体。 常年混迹小破站看多了MMD之后的心得也告诉我，一个物体想要有更强的质感和更多的高级感，纹理就是必须的。 three.js里设置纹理，简单的来说是靠贴图的方式，那么怎么添加贴图呢。 纹理类由three.Texture表示。定义一个新纹理可以这样写： three.Texture构造函数为： THREE.Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) 具体每个参数的意思和支持类型可查询文档，实际使用例子 123456789101112131415&lt;!-- 省略其他基础要素 --&gt;var geometry = new THREE.PlaneGeometry( 500, 300, 1, 1 ) // 画个平面geometry.vertices[0].uv = new THREE.Vector2(0,0);// 纹理坐标由顶点的uv成员来表示,geometry.vertices[1].uv = new THREE.Vector2(1,0);// 坐标点之间的顺序默认是逆时针方向,geometry.vertices[2].uv = new THREE.Vector2(1,1);// 平面有4个顶点，所以我们只需要指定4个纹理坐标就行了，geometry.vertices[3].uv = new THREE.Vector2(0,1);// 4个顶点分别对应了纹理的4个顶点// 当我们想要加载一张图片作为纹理时候，就要用到纹理加载器，写法如下：var texture = THREE.ImageUtils.loadTexture(\"textures/a.jpg\",null,function(t)&#123;&#125;);// 第二个参数为null，表示时候要传入一个纹理坐标参数，来覆盖前面在geometry中的参数。// 第三个表示一个回调函数，表示成功加载纹理后需要执行的函数，参数t是传入的texture。// ----------------------------------------------------------------------var material = new THREE.MeshBasicMaterial(&#123;map:texture&#125;);var mesh = new THREE.Mesh( geometry,material );scene.add( mesh ); 在纹理准备好之后，我们最后一步是映射到物体上，这一步的时候注意，不是所有材料的物体都支持纹理的， 判断该材料接不接受纹理，只需要看参数项中是否有map参数即可，有即可接受纹理映射。 ¶复杂纹理 上面我们学习了简单的图片作为纹理，这在开发中很常用。但是想要更酷炫的效果，我们其实只需要设置复杂纹理即可有一种非常酷炫的效果。 所以这次我们来学习复杂纹理，即将canvas作为纹理映射到物体上的方法。 首先当然我们需要画一个canvas,这个就不详述了。 然后需要将canvas传递给THREE.Texture纹理。 texture = new THREE.Texture( canvas); 注意设置needsUpdate属性。 texture.needsUpdate = true; 接着把纹理映射到物体上 var material = new THREE.MeshBasicMaterial({map:texture}); 最后构造物体 12var mesh = new THREE.Mesh( geometry,material );scene.add( mesh ); 至此，我们就完成了将canvas作为纹理的一个物体。 在新版three.js中增加了CanvasTexture，与Texture唯一的区别就是，CanvasTexture已自带了值为true的needsUpdate属性，就不需要再设置了 ¶辅助工具 至今仍然记得当年海报设计课老师跟大家说的，在打开PS，建好画布之后，第一件事是拉参考线！ 当然参考线在最终呈现给用户之前不能有，但是在开发时，参考线之类的辅助工具可以极好的帮助新手做出动画的效果 和平面设计拉参考线有些不同，我们在three.js中没有固定的必须有的辅助工具，一切根据实际情况选用。 ¶轨道控制(OrbitControls) Orbit controls（轨道控制器）可以使得相机围绕目标进行轨道运动。也就是我们常见的，鼠标拖动即可切换相机位置，十分方便，开发必备。 同样是需要单独引入的效果. 关于插件的引入，有个更为简单粗暴的方法，去github下载three.js开源源码，找到jsm文件夹，把文件夹下方的js拷贝到项目中，然后单独引入就可以了，需要注意插件之间的先后顺序关系 1234567import * as THREE from '../build/three.module.js';import &#123; OrbitControls &#125; from './jsm/controls/OrbitControls.js';import &#123; EffectComposer &#125; from './jsm/postprocessing/EffectComposer.js';import &#123; RenderPass &#125; from './jsm/postprocessing/RenderPass.js';import &#123; ShaderPass &#125; from './jsm/postprocessing/ShaderPass.js';import &#123; UnrealBloomPass &#125; from './jsm/postprocessing/UnrealBloomPass.js'; 引入之后具体用法也很简单。首先是才camera定义好之后，定义一个新的OrbitControls对象。 1this.controls = new OrbitControls( this.camera, container ) 第二是开启OrbitControls后必须有一个update的过程，也就是我们常写的每帧更新requestAnimationFrame() 12345animate: function () &#123; requestAnimationFrame(this.animate) this.controls.update(); this.renderer.render(this.scene, this.camera)&#125;, ¶开发中遇到的实际问题记录 three.js的文档，不得不说真的写的特别的简单，于是没有webGL和canvas基础的猿可能会遇到很多的小问题。这里就用来记录下这些小问题，以及在哪里能够查看到相关内容。 ¶混合模式 three.js的官方文档中只提到了自定义混合模式方程，并没有在文档中提及已封装的混合模式，但是在实例中有做三种示范 针对材料的混合模式演示猛击&gt; materials / blending &gt; 自定义混合模式方程 &lt; three.js封装的混合模式共五种： NoBlending: z-buffer值较大的像素将会遮挡z-buffer值较小的像素，没有纹理融合效果，设置纹理透明度无效。 NormalBlending：默认选项，根据z-buffer正常显示纹理,这是标准混合模式，它单独使用顶层,而不将其颜色与其下面的层混合。 AdditiveBlending：此混合模式只是将一个图层的像素值添加到另一个图层。如果值大于1（在RGB的情况下），则显示白色。线性减淡颜色值。由于它总是产生与输入相同或更浅的颜色，因此它也被称为“加亮”。 SubtractiveBlending：此混合模式将一个图层的像素值减去另一个图层像素值。如果为负值，则显示黑色。 MultiplyBlending：颜色混合，源图像RGB分量与目标图像RGB分量的相乘。 用法举例： 123var material = new Three.PointsMaterial(&#123; blending: Three.AdditiveBlending,&#125;) ¶three.js的辅助库stats.js显示帧数 stats.js是three.js的作者开发的three.js的辅助库。主要用于检测动画运行时的帧数。 ¶挨最毒的打，啃最硬的骨 这部分的学习日记改来改了无数遍，真的是很坎坷，一样是因为目前three.js的发展迅速，网络上的教程大量失效。 最后总结出来的是，只能去研究官方开源的项目中给出的例子里的写法，一条一条分析过去，找到自己不会的，单独去查这种学习方法。 后期效果和后期动画可谓是目前three.js学习过程中最硬的骨头了。 ¶辉光效果(UnrealBlooming) 常用效果没有封装在three.js里，如有业务需求，需另外下载，下载方式见文章头部的补充。 辉光效果是我们常用的一种效果，可能有人会说，发光效果的话，每个模型的贴图带一个外发光不就可以了么。 其实不然，辉光效果和给模型带一个发光效果，最大的不同之处是，辉光效果会影响周围环境光效，而单个模型中带发光效果则不行 这一点上使得辉光效果比普通的自带发光的效果要好上很多倍。 研究到效果时得出的结论是，百度出来的相关文章真的仅供参考，更加准确的用法，可以去看官网examples里的 webgl_postprocessing_unreal_bloom_selective 点击效果演示右下方的按钮即可看到代码 由于three.js的更迭十分得快，因此以官网例子为参考进行研究学习效率更高。 ¶dat.GUI dat.GUI 是一个轻量级的图形用户界面库（GUI 组件），使用这个库可以很容易地创建出能够改变代码变量的界面组件。 dat.GUI的gitHub主页 为什么这里我要单独写一节来说dat.GUI这个库呢，因为我在学习上一节辉光效果时，去参考了官方的案例。 官方案例里，出现了这个目前我没学到过的代码，乍一看我无法彻底理解他的意思，案例里是这样写的： 12345678910111213141516171819202122import &#123; GUI &#125; from './jsm/libs/dat.gui.module.js';………………var params = &#123; exposure: 1, bloomStrength: 1.5, bloomThreshold: 0, bloomRadius: 0&#125;;var gui = new GUI();gui.add( params, 'exposure', 0.1, 2 ).onChange( function ( value ) &#123; renderer.toneMappingExposure = Math.pow( value, 4.0 );&#125; );gui.add( params, 'bloomThreshold', 0.0, 1.0 ).onChange( function ( value ) &#123; bloomPass.threshold = Number( value );&#125; );gui.add( params, 'bloomStrength', 0.0, 3.0 ).onChange( function ( value ) &#123; bloomPass.strength = Number( value );&#125; );gui.add( params, 'bloomRadius', 0.0, 1.0 ).step( 0.01 ).onChange( function ( value ) &#123; bloomPass.radius = Number( value );&#125; );……………… 那么这段代码到底是做什么的呢？答案是我们在例子的右上方经常会看到的参数调节。 所以这是个辅助工具，实际开发中会提升开发效率，因此还是建议使用的，当然时间允许的话 ¶着色器Shader 顶点着色器和片段着色器需要单独准备！ 指定type属性的理由： type属性指定了［x-shader/x-vertex］和［x-shader/x-fragment］，这并不是HTML中定义的正式的写法。但是一般的浏览器如果遇到不识别的标签的话会无视掉的，浏览器不会认为这是javascript代码的。浏览器只会把它当成无意义的字符串，而程序中则可以使用标签里面的内容。 1234567891011121314151617181920212223&lt;script type=\"x-shader/x-vertex\" id=\"vertexshader\"&gt; // 顶点着色器 attribute float size; attribute vec3 customColor; varying vec3 vColor; void main() &#123; vColor = customColor; vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 ); gl_PointSize = size * ( 300.0 / -mvPosition.z ); gl_Position = projectionMatrix * mvPosition; &#125;&lt;/script&gt;&lt;script type=\"x-shader/x-fragment\" id=\"fragmentshader\"&gt; // 片段着色器 uniform vec3 color; uniform sampler2D pointTexture; varying vec3 vColor; void main() &#123; gl_FragColor = vec4( color * vColor, 1.0 ); gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord ); &#125;&lt;/script&gt;","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/categories/学习笔记/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"}]},{"title":"面试问题总结","slug":"interview","date":"2019-10-11T07:29:41.000Z","updated":"2019-10-11T08:12:10.804Z","comments":true,"path":"2019/10/11/interview/","link":"","permalink":"http://yoursite.com/2019/10/11/interview/","excerpt":"Axios的特点有哪些 1、在浏览器中发送 XMLHttpRequests 请求； 2、在 node.js 中发送 http请求； 3、基于 Promise 的 HTTP 请求客户端,支持 Promise API； 4、拦截请求和响应； 5、转换请求和响应数据； 6、自动转换 JSON 数据； 7、客户端支持保护安全免受 XSRF 攻击；","text":"Axios的特点有哪些 1、在浏览器中发送 XMLHttpRequests 请求； 2、在 node.js 中发送 http请求； 3、基于 Promise 的 HTTP 请求客户端,支持 Promise API； 4、拦截请求和响应； 5、转换请求和响应数据； 6、自动转换 JSON 数据； 7、客户端支持保护安全免受 XSRF 攻击； vue-router有哪些导航钩子 第一种：是全局导航钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截。 第二种：组件内的钩子 第三种：单独路由独享组件 在beforeRouteEnter钩子函数里执行console.log(this)，其结果是？ vue生命周期钩子函数之beforeRouteEnter()和beforeRouteLeave() 123456beforeRouteEnter(to, form, next)&#123; console.log(this) // undefined next(vm =&gt;&#123; console.log(vm) // vue实例 &#125;)&#125; vue生命周期各个阶段中this的值变化 vue-router原理 深拷贝和浅拷贝 解决跨域问题 vue解决跨域问题","categories":[],"tags":[{"name":"综合","slug":"综合","permalink":"http://yoursite.com/tags/综合/"}]},{"title":"vue-cli3 settings","slug":"vue-cli3-settings","date":"2019-10-11T05:34:38.000Z","updated":"2019-10-11T05:37:40.811Z","comments":true,"path":"2019/10/11/vue-cli3-settings/","link":"","permalink":"http://yoursite.com/2019/10/11/vue-cli3-settings/","excerpt":"","text":"¶vue-cli 3.0 配置项 vue-cli 3.0在创建项目时，推荐选择第二项自定义确认每一项配置 ¶用jest对vue项目进行单元测试","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"ES6学习笔记","slug":"es6-notes","date":"2019-10-10T07:21:12.000Z","updated":"2019-10-15T07:31:41.179Z","comments":true,"path":"2019/10/10/es6-notes/","link":"","permalink":"http://yoursite.com/2019/10/10/es6-notes/","excerpt":"¶变量的解构赋值 12345678function move(&#123;x = 0, y = 0&#125; = &#123;&#125;) &#123; return [x, y];&#125;move(&#123;x: 3, y: 8&#125;); // [3, 8]move(&#123;x: 3&#125;); // [3, 0]move(&#123;&#125;); // [0, 0]move(); // [0, 0] 12345678function move(&#123;x, y&#125; = &#123; x: 0, y: 0 &#125;) &#123; return [x, y];&#125;move(&#123;x: 3, y: 8&#125;); // [3, 8]move(&#123;x: 3&#125;); // [3, undefined]move(&#123;&#125;); // [undefined, undefined]move(); // [0, 0]","text":"¶变量的解构赋值 12345678function move(&#123;x = 0, y = 0&#125; = &#123;&#125;) &#123; return [x, y];&#125;move(&#123;x: 3, y: 8&#125;); // [3, 8]move(&#123;x: 3&#125;); // [3, 0]move(&#123;&#125;); // [0, 0]move(); // [0, 0] 12345678function move(&#123;x, y&#125; = &#123; x: 0, y: 0 &#125;) &#123; return [x, y];&#125;move(&#123;x: 3, y: 8&#125;); // [3, 8]move(&#123;x: 3&#125;); // [3, undefined]move(&#123;&#125;); // [undefined, undefined]move(); // [0, 0] ¶字符串扩展 123456789101112let text = String.fromCodePoint(0x20BB7);for (let i = 0; i &lt; text.length; i++) &#123; console.log(text[i]);&#125;// \" \"// \" \"for (let i of text) &#123; console.log(i);&#125;// \"𠮷\" ¶字符串(String)实例方法 ¶includes(),startsWith()和endsWith() 传统上，JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。 includes(searchString[, position])：返回布尔值，表示是否找到了参数字符串。 startsWith(searchString[, position])：返回布尔值，表示参数字符串是否在原字符串的头部。 endsWith(searchString[, position])：返回布尔值，表示参数字符串是否在原字符串的尾部。 12let s = 'Hello world!';s.startsWith('world', 6) // true ¶repeat(count) repeat方法返回一个新字符串，表示将原字符串重复n次。 参数如果是小数则会被向下取整 参数是负数或者Infinity，会报错。 12345678910'x'.repeat(3) // \"xxx\"'hello'.repeat(2) // \"hellohello\"'na'.repeat(0) // \"\"'na'.repeat(2.9) // \"nana\"'na'.repeat(Infinity)// RangeError'na'.repeat(-1)// RangeError 如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0 参数NaN等同于 0。 12'na'.repeat(-0.9) // \"\"'na'.repeat(NaN) // \"\" 如果参数是字符串，则会先转换成数字。 ¶padStart()，padEnd() ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。 targetLength位必选参数，padString为可选参数。 两个方法都返回一个在原字符串开头填充指定的填充字符串直到目标长度所形成的新字符串。 padStart(targetLength [, padString]) 。另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的。 padEnd(targetLength [, padString]) 。另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(右侧)应用的。 如果省略第二个参数，默认使用空格补全长度。 12'x'.padStart(4) // ' x''x'.padEnd(4) // 'x ' 两个方法最常用的场景是，为数值补全指定位数 123'1'.padStart(10, '0') // \"0000000001\"'12'.padStart(10, '0') // \"0000000012\"'123456'.padStart(10, '0') // \"0000123456\" 另一使用场景是提示字符串格式。(其实并不常用) 12'12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-MM-12\"'09-12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-09-12\" ¶trimStart()，trimEnd() ES2019 对字符串实例新增了trimStart()和trimEnd()这两个方法，它们的行为与trim()一致，trimStart()消除字符串头部的空格，trimEnd()消除尾部的空格。 它们返回的都是新字符串，不会修改原始字符串。 除了空格键，这两个方法对字符串头部（或尾部）的 tab 键、换行符等不可见的空白符号也有效。 浏览器还部署了额外的两个方法，trimLeft()是trimStart()的别名，trimRight()是trimEnd()的别名。 ¶matchAll() matchAll()方法返回一个正则表达式在当前字符串的所有匹配(暂时不理解，正则相关需另起一章) ¶最后整理的的零碎小东西 Math.max()和Math.min() 这两个方法在ES6中改进了，原先不允许传入数组，ES6之后可支持数组。 早前如果想要用这两个方法得出数组的最大和最小值，需要这样写： 12var values = [12, 15, 0, 20, -1];var max = Math.max.apply(Math, values);// 20 但是在ES6中我们可以这样写： 用于ES6使用了展开运算符“…”,JavaScript引擎读取后会将参数数组分割为各自独立的参数并依次传入： 1234let values = [12, 15, 0, 20, -1];let max1 = Math.max(...values);//20let min1 = Math.min(...values);//-1let max2 = Math.max(...values, 100)//100","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"前端常用commit规范","slug":"commit","date":"2019-10-09T05:37:57.796Z","updated":"2019-10-09T05:50:59.304Z","comments":true,"path":"2019/10/09/commit/","link":"","permalink":"http://yoursite.com/2019/10/09/commit/","excerpt":"","text":"git 可以帮我们很好地管理代码，但是在多人合作的时候，经常会碰到各种随意的 commit message，当你需要会看 commit message 的时候，就会很头疼。","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"前端性能优化总结","slug":"about-performance","date":"2019-10-09T03:06:34.970Z","updated":"2019-10-11T01:59:03.418Z","comments":true,"path":"2019/10/09/about-performance/","link":"","permalink":"http://yoursite.com/2019/10/09/about-performance/","excerpt":"都说功能实现不难，优化才是最难的。想想的确是这样，正因为优化是永无止境的，且实际项目中千变万化的需求有各种相对应的优化点，所以优化是永远的难点 普遍意义上我们认为一个通用的优化点主要是静态资源和网络请求优化，但是这次在项目中遇到了展示的大数据内容的需求，在开发过程中仅因为数据量大这一点没少遇到问题 本文就主要记录本次项目中遇到的问题和解决方案，以及由此归纳出的对大数据产品来说至关重要的几项优化点。","text":"都说功能实现不难，优化才是最难的。想想的确是这样，正因为优化是永无止境的，且实际项目中千变万化的需求有各种相对应的优化点，所以优化是永远的难点 普遍意义上我们认为一个通用的优化点主要是静态资源和网络请求优化，但是这次在项目中遇到了展示的大数据内容的需求，在开发过程中仅因为数据量大这一点没少遇到问题 本文就主要记录本次项目中遇到的问题和解决方案，以及由此归纳出的对大数据产品来说至关重要的几项优化点。 ¶代码写法 在普通项目中，提到前端性能优化，一般认为优化点会着重在构建优化或者静态资源优化，但是在数据量极大的项目中，我们一般首要的需要优化的就是代码写法。 代码写法的优化在实际项目中能够大幅度提升整体性能 ¶内存释放 变量 平时写项目时，一般极少会注意变量的用法，但是在大数据项目中，变量用法对性能的影响巨大。 例如声明一个全局变量来储存数据，因为全局变量的特性，让需要在多处进行不同处理的数据变得更简单便捷,但同时也因为全局变量在调用的方法执行完之后不会销毁的特性，如将全局变量用于储存数据量极大的数据时，就会给浏览器内存造成极大的负担 因此在项目中尽量用局部变量来储存数据量大的数据，方法执行完成后及时回收 ¶常用数据优化的方法 ¶框架内自带优化方法 ¶数据接收 ¶数据渲染","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"HEXO更多配置","slug":"more-settings","date":"2019-10-08T09:02:50.390Z","updated":"2019-10-14T02:38:28.707Z","comments":true,"path":"2019/10/08/more-settings/","link":"","permalink":"http://yoursite.com/2019/10/08/more-settings/","excerpt":"实际使用一个主题时，有很多常用的细节上的配置在主题初始时并不会设置好，需要手动找到配置文件中相对应的项进行设置，以目前我正在使用的NextT主题为例,记录下如何进行细节配置。","text":"实际使用一个主题时，有很多常用的细节上的配置在主题初始时并不会设置好，需要手动找到配置文件中相对应的项进行设置，以目前我正在使用的NextT主题为例,记录下如何进行细节配置。 ¶显示语言设置 ¶首页不显示全文 在文章内需要截断的地方添加上标记 123首页会显示的text1111&lt;!-- more --&gt;在首页会隐藏的text22222 ¶首页出现菜单内容以及菜单内容对应路径文件 ¶文章添加分类和tag 在文章的开头指定配置tag和分类即可，如 1234---tags: 配置 // tagcategories: HEXO // 分类--- ¶文章插入图片 把主页配置文件 _config.yml 里的 post_asset_folder这个选项设置为true 在hexo的目录下执行npm install https://github.com/CodeFalling/hexo-asset-image --save（需要等待一段时间）。 完成安装后用hexo n &quot;nnn&quot;新建文章的时候会发现 _posts 目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面 ¶修改样式和添加自定义样式 打开文件： 根目录\\themes[themeName]\\source\\css_custom\\custom.styl,在该文件中自定义样式 ¶文章字数统计和预计阅读时长 字数统计和预计阅读市场需要在两处进行配置 nextT自带的字数统计工具是hexo-symbols-count-time，首先需要确认已安装 1npm install hexo-symbols-count-time --save // 安装hexo-symbols-count-time 配置项修改 首先在博客的根目录下的配置文件 _config.yml 里配置以下内容 1234567symbols_count_time: #文章内是否显示 symbols: true time: true # 网页底部是否显示 total_symbols: true total_time: true 然后在主题的配置文件中配置以下内容,具体参数意义详见hexo-symbols-count-time 12345678910symbols_count_time: separated_meta: true #文章中的显示是否显示文字（本文字数|阅读时长） item_text_post: true #网页底部的显示是否显示文字（站点总字数|站点阅读时长） item_text_total: false # Average Word Length (chars count in word) awl: 4 # Words Per Minute wpm: 275 ¶评论，打赏，RSS功能 ¶广告位(X ¶配置live2d宠物 ¶文章首页完美隐藏 下载hexo-generator-index2插件后卸载官方的插件hexo-generator-index 12$ npm install hexo-generator-index2 --save$ npm uninstall hexo-generator-index --save 打开根目录的_config.yml，在末尾添加一下内容，注意空格和缩进 12345678# index2 generator是否包含官方的hexo-generator-index，默认true（包含）index2_include_index: trueindex2_generator: per_page: 8 order_by: -date exclude: - tag hide - category hide exclude:表示隐藏哪些内容，以上代码表示隐藏tag为hide和category(分类)为hide的文章 hexo-helper-live2d","categories":[{"name":"HEXO","slug":"HEXO","permalink":"http://yoursite.com/categories/HEXO/"}],"tags":[{"name":"配置","slug":"配置","permalink":"http://yoursite.com/tags/配置/"}]},{"title":"First Blog","slug":"first-blog","date":"2019-10-08T06:05:01.500Z","updated":"2019-10-09T08:43:18.993Z","comments":true,"path":"2019/10/08/first-blog/","link":"","permalink":"http://yoursite.com/2019/10/08/first-blog/","excerpt":"记录博客配置的全过程。","text":"记录博客配置的全过程。 ¶前置准备 node.js和npm git ¶安装HEXO 12$ npm install -g hexo-cli $ npm install hexo-server --save ¶新建项目并运行 1234$ hexo init blog$ cd blog$ npm install$ hexo server 至此博客项目新建完成 ¶更换主题 找到喜欢的主题的github地址 1234cd bloggit clone https://github.com/theme-next/hexo-theme-next themes/NewThemeNamecd themes/NewThemeNamegit pull 主题修改配置 修改blog目录下的 _config.yml ： theme: NewThemeName ¶配置GitHub 申请一个github账号且完成邮箱验证 新建Repository(仓库) 新仓库的名称命名格式[1]： 1用户名.github.io 配置git信息 12git config --global user.name&quot;这里是你申请Github账号时的name&quot;git config --global user.email&quot;这里是你申请Github账号时的邮箱&quot; 部署。进入blog目录下,编辑 _config.yml，把下面的your_username换成你的github用户名，注意冒号后面有一空格。 1234deploy: type: git repo: https://github.com/your_username/your_username.github.io.git branch: master ¶部署代码到Github 12$ hexo clean // 清除缓存文件 (db.json) 和已生成的静态文件 (public)。$ hexo d -g // 生成静态文件并部署 ¶发布新文章 新建文章推荐使用命令行执行hexo n “newFileName”，也可直接编辑器打开项目，在source/_posts目录下新建.md文章 生成静态文件: hexo g 提交到github: hexo d ¶添加版权说明 在themes\\hiker\\layout_partial新建文件copyright.ejs 打开copyright.ejs,添加一下内容。 12345678910111213141516&lt;div&gt; &lt;ul class=\"post-copyright\"&gt; &lt;li class=\"post-copyright-author\"&gt; &lt;strong&gt;&lt;%= __('copyright.author') %&gt; &lt;/strong&gt;&lt;%= config.author%&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=\"post-copyright-link\"&gt; &lt;strong&gt;&lt;%= __('copyright.link') %&gt; &lt;/strong&gt; &lt;a href=\"&lt;%- config.root %&gt;&lt;%- post.path %&gt;\" target=\"_blank\" title=\"&lt;%= post.title %&gt;\"&gt;&lt;%- config.url %&gt;/&lt;%- post.path %&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=\"post-copyright-license\"&gt; &lt;strong&gt;&lt;%= __('copyright.license_title') %&gt; &lt;/strong&gt; &lt;%= __('copyright.left_license_content') %&gt;&lt;a rel=\"license\" href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\" title=\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\"&gt;CC BY-NC-ND 4.0&lt;/a&gt; &lt;%= __('copyright.right_license_content') %&gt; &lt;/li&gt; &lt;/ul&gt; &lt;div&gt; 打开themes\\hiker\\layout_partial\\article.ejs添加一下内容,位置介于donate和comment之间 1234567891011&lt;% if (!index &amp;&amp; theme.donate.enable)&#123; %&gt; &lt;%- partial('donate') %&gt; &lt;% &#125; %&gt; &lt;!-- 要添加的内容 --&gt; &lt;% if (!index &amp;&amp; theme.copyright.enable)&#123; %&gt; &lt;%- partial('copyright') %&gt; &lt;% &#125; %&gt; &lt;!----&gt; &lt;% if (!index &amp;&amp; post.comments &amp;&amp; (theme.gentie_productKey || theme.duoshuo_shortname || theme.disqus_shortname || theme.uyan_uid || theme.wumii || theme.livere_shortname))&#123; %&gt; &lt;%- partial('comment') %&gt; &lt;% &#125; %&gt; 修改themes\\hiker\\source\\css_partial\\article.styl,在末端添加以下内容。 1234567891011.post-copyright &#123; margin: 2em 0 0; padding: 0.5em 1em; border-left: 3px solid #FF1700; background-color: #F9F9F9; list-style: none;&#125;.post-copyright li &#123; line-height: 30px;&#125; 在themes\\hiker\\languages中,找到你应用的语言文件,例如zh-TW,打开并添加以下内容。 123456copyright: author: \"作者: \" link: \"文章连结: \" license_title: \"版权声明: \" left_license_content: \"本网志所有文章除特别声明外,均采用 \" right_license_content: \"许可协议。转载请注明出处!\" 打开themes\\hiker_config.yml,添加以下内容。 123#版权信息copyright: enable: true ¶markdown解析器替换 hexo自带的markdown解析器为GFM风格，与标准的markdown语法有些许不同且支持的语法较少，往往无法满足更专业的需求。 hexo-renderer-markdown-it 是一款用于 Markdown 解析和渲染的插件。 用于替换 Hexo 默认自带的 Markdown 渲染器。 提供了更丰富的 Markdown 解析和渲染。 首先请确保以下操作是在博客项目的根目录进行 12npm un hexo-renderer-marked --save // 卸载 Hexo 默认自带的 Markdown 渲染器npm i hexo-renderer-markdown-it --save // 安装 hexo-renderer-markdown-it 插件 打开根目录下的_config.yml 123456789101112131415161718192021# Markdown-it configmarkdown: render: html: true xhtmlOut: false breaks: true linkify: true typographer: true quotes: '“”‘’' plugins: - markdown-it-abbr - markdown-it-footnote - markdown-it-ins - markdown-it-sub - markdown-it-sup anchors: level: 2 collisionSuffix: 'v' permalink: true permalinkClass: header-anchor permalinkSymbol: ¶ 名称后缀是固定的，不可更改。当配置完成后在github访问域名时，如进去的页面显示404，解决的方法为：①配置个人域名②仓库的名称改为github的用户名 ↩","categories":[{"name":"HEXO","slug":"HEXO","permalink":"http://yoursite.com/categories/HEXO/"}],"tags":[{"name":"配置","slug":"配置","permalink":"http://yoursite.com/tags/配置/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-10-08T03:05:56.589Z","updated":"2019-10-08T09:25:00.498Z","comments":true,"path":"2019/10/08/hello-world/","link":"","permalink":"http://yoursite.com/2019/10/08/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. ¶Quick Start ¶Create a new post 1$ hexo new \"My New Post\"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. ¶Quick Start ¶Create a new post 1$ hexo new \"My New Post\" More info: Writing ¶Run server 1$ hexo server More info: Server ¶Generate static files 1$ hexo generate More info: Generating ¶Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}],"tags":[]}]}