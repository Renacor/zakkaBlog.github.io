{"meta":{"title":"Blog","subtitle":null,"description":null,"author":"Qian Lina","url":"http://yoursite.com","root":"/"},"pages":[{"title":"tags","date":"2019-10-08T06:02:42.000Z","updated":"2019-10-08T06:46:46.395Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2019-10-08T06:02:42.000Z","updated":"2019-10-08T07:29:48.008Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-08T06:02:42.000Z","updated":"2019-10-08T09:23:25.830Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"前端常用commit规范","slug":"commit","date":"2019-10-09T05:37:57.796Z","updated":"2019-10-09T05:50:59.304Z","comments":true,"path":"2019/10/09/commit/","link":"","permalink":"http://yoursite.com/2019/10/09/commit/","excerpt":"","text":"git 可以帮我们很好地管理代码，但是在多人合作的时候，经常会碰到各种随意的 commit message，当你需要会看 commit message 的时候，就会很头疼。","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"前端性能优化总结","slug":"about-performance","date":"2019-10-09T03:06:34.970Z","updated":"2019-10-09T06:39:56.824Z","comments":true,"path":"2019/10/09/about-performance/","link":"","permalink":"http://yoursite.com/2019/10/09/about-performance/","excerpt":"都说功能实现不难，优化才是最难的。想想的确是这样，正因为优化是永无止境的，且实际项目中千变万化的需求有各种相对应的优化点，所以优化是永远的难点 普遍意义上我们认为一个通用的优化点主要是静态资源和网络请求优化，但是这次在项目中遇到了展示的大数据内容的需求，在开发过程中仅因为数据量大这一点没少遇到问题 本文就主要记录本次项目中遇到的问题和解决方案，以及由此归纳出的对大数据产品来说至关重要的几项优化点。","text":"都说功能实现不难，优化才是最难的。想想的确是这样，正因为优化是永无止境的，且实际项目中千变万化的需求有各种相对应的优化点，所以优化是永远的难点 普遍意义上我们认为一个通用的优化点主要是静态资源和网络请求优化，但是这次在项目中遇到了展示的大数据内容的需求，在开发过程中仅因为数据量大这一点没少遇到问题 本文就主要记录本次项目中遇到的问题和解决方案，以及由此归纳出的对大数据产品来说至关重要的几项优化点。 ¶代码写法 在普通项目中，提到前端性能优化，一般认为优化点会着重在构建优化或者静态资源优化，但是在数据量极大的项目中，我们一般首要的需要优化的就是代码写法。 代码写法的优化在实际项目中能够大幅度提升整体性能 ¶内存释放 变量 平时写项目时，一般极少会注意变量的用法，但是在大数据项目中，变量用法对性能的影响巨大。 例如声明一个全局变量来储存数据，因为全局变量的特性，让需要在多处进行不同处理的数据变得更简单便捷,但同时也因为全局变量在调用的方法执行完之后不会销毁的特性，如将全局变量用于储存数据量极大的数据时，就会给浏览器内存造成极大的负担 因此在项目中尽量用局部变量来储存数据量大的数据，方法执行完成后及时回收 ¶常用数据优化的方法 ¶框架内自带优化方法 ¶数据接收 ¶数据渲染","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"HEXO更多配置","slug":"more-settings","date":"2019-10-08T09:02:50.390Z","updated":"2019-10-09T08:34:25.503Z","comments":true,"path":"2019/10/08/more-settings/","link":"","permalink":"http://yoursite.com/2019/10/08/more-settings/","excerpt":"实际使用一个主题时，有很多常用的细节上的配置在主题初始时并不会设置好，需要手动找到配置文件中相对应的项进行设置，以目前我正在使用的NextT主题为例,记录下如何进行细节配置。","text":"实际使用一个主题时，有很多常用的细节上的配置在主题初始时并不会设置好，需要手动找到配置文件中相对应的项进行设置，以目前我正在使用的NextT主题为例,记录下如何进行细节配置。 ¶显示语言设置 ¶首页不显示全文 在文章内需要截断的地方添加上标记 123首页会显示的text1111 &lt;!-- more --&gt;在首页会隐藏的text22222 ¶首页出现菜单内容以及菜单内容对应路径文件 ¶文章添加分类和tag 在文章的开头指定配置tag和分类即可，如 1234---tags: 配置 // tagcategories: HEXO // 分类--- ¶文章插入图片 把主页配置文件*_config.yml里的post_asset_folder*这个选项设置为true 在hexo的目录下执行npm install https://github.com/CodeFalling/hexo-asset-image --save（需要等待一段时间）。 完成安装后用hexo新建文章的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面 ¶修改样式和添加自定义样式 打开文件： 根目录\\themes[themeName]\\source\\css_custom\\custom.styl,在该文件中自定义样式 ¶文章字数统计和预计阅读时长 字数统计和预计阅读市场需要在两处进行配置 nextT自带的字数统计工具是hexo-symbols-count-time，首先需要确认已安装 1npm install hexo-symbols-count-time --save // 安装hexo-symbols-count-time 配置项修改 首先在博客的根目录下的配置文件_config.yml里配置以下内容 1234567symbols_count_time: #文章内是否显示 symbols: true time: true # 网页底部是否显示 total_symbols: true total_time: true 然后在主题的配置文件中配置以下内容,具体参数意义详见hexo-symbols-count-time 12345678910symbols_count_time: separated_meta: true #文章中的显示是否显示文字（本文字数|阅读时长） item_text_post: true #网页底部的显示是否显示文字（站点总字数|站点阅读时长） item_text_total: false # Average Word Length (chars count in word) awl: 4 # Words Per Minute wpm: 275 ¶评论，打赏，RSS功能 ¶广告位(X ¶配置live2d宠物 hexo-helper-live2d","categories":[{"name":"HEXO","slug":"HEXO","permalink":"http://yoursite.com/categories/HEXO/"}],"tags":[{"name":"配置","slug":"配置","permalink":"http://yoursite.com/tags/配置/"}]},{"title":"First Blog","slug":"first-blog","date":"2019-10-08T06:05:01.500Z","updated":"2019-10-09T08:30:55.193Z","comments":true,"path":"2019/10/08/first-blog/","link":"","permalink":"http://yoursite.com/2019/10/08/first-blog/","excerpt":"记录博客配置的全过程。","text":"记录博客配置的全过程。 ¶前置准备 node.js和npm git ¶安装HEXO 12$ npm install -g hexo-cli $ npm install hexo-server --save ¶新建项目并运行 1234$ hexo init blog$ cd blog$ npm install$ hexo server 至此博客项目新建完成 ¶更换主题 找到喜欢的主题的github地址 1234cd bloggit clone https://github.com/theme-next/hexo-theme-next themes/NewThemeNamecd themes/NewThemeNamegit pull 主题修改配置 修改blog目录下的 _config.yml ： theme: NewThemeName ¶配置GitHub 申请一个github账号且完成邮箱验证 新建Repository(仓库) 新仓库的名称命名格式[1]： 1用户名.github.io 配置git信息 12git config --global user.name&quot;这里是你申请Github账号时的name&quot;git config --global user.email&quot;这里是你申请Github账号时的邮箱&quot; 部署。进入blog目录下,编辑 _config.yml，把下面的your_username换成你的github用户名，注意冒号后面有一空格。 1234deploy: type: git repo: https://github.com/your_username/your_username.github.io.git branch: master ¶部署代码到Github 12$ hexo clean // 清除缓存文件 (db.json) 和已生成的静态文件 (public)。$ hexo d -g // 生成静态文件并部署 ¶发布新文章 source/_posts目录下新建.md文章 生成静态文件: hexo g 提交到github: hexo d ¶添加版权说明 在themes\\hiker\\layout_partial新建文件copyright.ejs 打开copyright.ejs,添加一下内容。 12345678910111213141516&lt;div&gt; &lt;ul class=\"post-copyright\"&gt; &lt;li class=\"post-copyright-author\"&gt; &lt;strong&gt;&lt;%= __('copyright.author') %&gt; &lt;/strong&gt;&lt;%= config.author%&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=\"post-copyright-link\"&gt; &lt;strong&gt;&lt;%= __('copyright.link') %&gt; &lt;/strong&gt; &lt;a href=\"&lt;%- config.root %&gt;&lt;%- post.path %&gt;\" target=\"_blank\" title=\"&lt;%= post.title %&gt;\"&gt;&lt;%- config.url %&gt;/&lt;%- post.path %&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=\"post-copyright-license\"&gt; &lt;strong&gt;&lt;%= __('copyright.license_title') %&gt; &lt;/strong&gt; &lt;%= __('copyright.left_license_content') %&gt;&lt;a rel=\"license\" href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\" title=\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\"&gt;CC BY-NC-ND 4.0&lt;/a&gt; &lt;%= __('copyright.right_license_content') %&gt; &lt;/li&gt; &lt;/ul&gt; &lt;div&gt; 打开themes\\hiker\\layout_partial\\article.ejs添加一下内容,位置介于donate和comment之间 1234567891011&lt;% if (!index &amp;&amp; theme.donate.enable)&#123; %&gt; &lt;%- partial('donate') %&gt; &lt;% &#125; %&gt; &lt;!-- 要添加的内容 --&gt; &lt;% if (!index &amp;&amp; theme.copyright.enable)&#123; %&gt; &lt;%- partial('copyright') %&gt; &lt;% &#125; %&gt; &lt;!----&gt; &lt;% if (!index &amp;&amp; post.comments &amp;&amp; (theme.gentie_productKey || theme.duoshuo_shortname || theme.disqus_shortname || theme.uyan_uid || theme.wumii || theme.livere_shortname))&#123; %&gt; &lt;%- partial('comment') %&gt; &lt;% &#125; %&gt; 修改themes\\hiker\\source\\css_partial\\article.styl,在末端添加以下内容。 1234567891011.post-copyright &#123; margin: 2em 0 0; padding: 0.5em 1em; border-left: 3px solid #FF1700; background-color: #F9F9F9; list-style: none;&#125;.post-copyright li &#123; line-height: 30px;&#125; 在themes\\hiker\\languages中,找到你应用的语言文件,例如zh-TW,打开并添加以下内容。 123456copyright: author: \"作者: \" link: \"文章连结: \" license_title: \"版权声明: \" left_license_content: \"本网志所有文章除特别声明外,均采用 \" right_license_content: \"许可协议。转载请注明出处!\" 打开themes\\hiker_config.yml,添加以下内容。 123#版权信息copyright: enable: true ¶markdown解析器替换 hexo自带的markdown解析器为GFM风格，与标准的markdown语法有些许不同且支持的语法较少，往往无法满足更专业的需求。 hexo-renderer-markdown-it 是一款用于 Markdown 解析和渲染的插件。 用于替换 Hexo 默认自带的 Markdown 渲染器。 提供了更丰富的 Markdown 解析和渲染。 首先请确保以下操作是在博客项目的根目录进行 12npm un hexo-renderer-marked --save // 卸载 Hexo 默认自带的 Markdown 渲染器npm i hexo-renderer-markdown-it --save // 安装 hexo-renderer-markdown-it 插件 打开根目录下的_config.yml 123456789101112131415161718192021# Markdown-it configmarkdown: render: html: true xhtmlOut: false breaks: true linkify: true typographer: true quotes: '“”‘’' plugins: - markdown-it-abbr - markdown-it-footnote - markdown-it-ins - markdown-it-sub - markdown-it-sup anchors: level: 2 collisionSuffix: 'v' permalink: true permalinkClass: header-anchor permalinkSymbol: ¶ 名称后缀是固定的，不可更改。当配置完成后在github访问域名时，如进去的页面显示404，解决的方法为：①配置个人域名②仓库的名称改为github的用户名 ↩","categories":[{"name":"HEXO","slug":"HEXO","permalink":"http://yoursite.com/categories/HEXO/"}],"tags":[{"name":"配置","slug":"配置","permalink":"http://yoursite.com/tags/配置/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-10-08T03:05:56.589Z","updated":"2019-10-08T09:25:00.498Z","comments":true,"path":"2019/10/08/hello-world/","link":"","permalink":"http://yoursite.com/2019/10/08/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. ¶Quick Start ¶Create a new post 1$ hexo new \"My New Post\"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. ¶Quick Start ¶Create a new post 1$ hexo new \"My New Post\" More info: Writing ¶Run server 1$ hexo server More info: Server ¶Generate static files 1$ hexo generate More info: Generating ¶Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}],"tags":[]}]}