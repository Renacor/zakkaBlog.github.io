{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/NextT/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/NextT/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/NextT/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/NextT/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/NextT/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/NextT/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/NextT/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/NextT/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/NextT/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/NextT/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/NextT/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/NextT/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/NextT/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/NextT/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/NextT/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/NextT/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/NextT/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/NextT/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/NextT/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/NextT/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/NextT/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/NextT/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/NextT/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/NextT/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/NextT/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/NextT/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/NextT/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/NextT/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/NextT/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/NextT/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/NextT/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/NextT/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/NextT/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/NextT/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/NextT/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/NextT/.all-contributorsrc","hash":"1eba597197a2044d93bff26e1c470723c73f06ad","modified":1570515772398},{"_id":"themes/NextT/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1570515772398},{"_id":"themes/NextT/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1570515772398},{"_id":"themes/NextT/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1570515772398},{"_id":"themes/NextT/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1570515772405},{"_id":"themes/NextT/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1570515772406},{"_id":"themes/NextT/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1570515772408},{"_id":"themes/NextT/README.md","hash":"6db93f4bc1a2bedd2f2497370e92fd2ced760086","modified":1570515772409},{"_id":"themes/NextT/.travis.yml","hash":"3a69594e562f42c04b137093c61c9f2f10adf714","modified":1570515772407},{"_id":"themes/NextT/_config.yml","hash":"8f74eb48d12b6110cb775b6f7d90b267959631a9","modified":1570802119175},{"_id":"source/_posts/about-performance.md","hash":"81e7b2cad4b45bbd26c88940fd90bbe868e234a8","modified":1570759143418},{"_id":"source/_posts/commit.md","hash":"abc602e46ee358f63840168ca557b1b847a31a98","modified":1570600259304},{"_id":"source/_posts/es6-notes.md","hash":"e2adfb092838369e4742f8191452dbde06443ea3","modified":1571124701179},{"_id":"source/_posts/first-blog.md","hash":"54b5fd7e00384287f0f4ff2955ac6f3a94fa5e16","modified":1570610598993},{"_id":"source/_posts/hello-world.md","hash":"563fed725227755010c5d19c55a9bffdcadf3106","modified":1570526700498},{"_id":"source/_posts/import-three.md","hash":"9befa44a6042e2cefa594c57901845ec24ced700","modified":1571384927998},{"_id":"source/_posts/interview.md","hash":"e10ef66910b902a0d4e3fda62102d038aa96c9a3","modified":1570781530804},{"_id":"source/_posts/life-flowers.md","hash":"556a5ef8d878cb66ac33341657af4f21668302ef","modified":1571322924060},{"_id":"source/_posts/more-settings.md","hash":"93aaa54ca749708b3c217310a0d12990be11c591","modified":1571020708707},{"_id":"source/_posts/vue-cli3-settings.md","hash":"27fc86a5b06c1fc7d9184154d627a45a011c6c2e","modified":1570772260811},{"_id":"source/tags/index.md","hash":"93b3bb099fe7ea1e981d22aa7403c3a04fcc6a17","modified":1570517206395},{"_id":"themes/NextT/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1570515772391},{"_id":"themes/NextT/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1570515772393},{"_id":"themes/NextT/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1570515762406},{"_id":"themes/NextT/.git/index","hash":"d3a3a48370b5420eeb3172d33711f23a80075d73","modified":1570515772512},{"_id":"themes/NextT/.git/packed-refs","hash":"3bc7050aedd08785fc5431fc7348eef315052bd1","modified":1570515772390},{"_id":"themes/NextT/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1570515772398},{"_id":"themes/NextT/.github/CONTRIBUTING.md","hash":"8f4e5cdeb53c30a659fb2b7017e748ed07800c5c","modified":1570515772399},{"_id":"themes/NextT/.github/PULL_REQUEST_TEMPLATE.md","hash":"2a4ff75ccb91d9001032c08e22489096b850bf4f","modified":1570515772400},{"_id":"themes/NextT/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1570515772401},{"_id":"themes/NextT/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1570515772401},{"_id":"themes/NextT/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1570515772401},{"_id":"themes/NextT/.github/issue_label_bot.yaml","hash":"b09c85aa449f46bc025317ed196ec33a877f7c23","modified":1570515772402},{"_id":"themes/NextT/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1570515772402},{"_id":"themes/NextT/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1570515772402},{"_id":"themes/NextT/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1570515772403},{"_id":"themes/NextT/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1570515772403},{"_id":"themes/NextT/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1570515772404},{"_id":"source/categories/index.md","hash":"4cde700354250c3b0f939491be5b6686d6f01ab7","modified":1570526605830},{"_id":"themes/NextT/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1570515772411},{"_id":"themes/NextT/docs/ALGOLIA-SEARCH.md","hash":"20f8a3d7db6e797a5a3ed8c84837315cb8e09e5b","modified":1570515772413},{"_id":"themes/NextT/docs/AUTHORS.md","hash":"87d5bf72b7be09e9e7cf8d0036b2c81fbfbe7069","modified":1570515772413},{"_id":"themes/NextT/docs/DATA-FILES.md","hash":"a85ae0f3a9655eea9acd3f6209b72eb002f2058d","modified":1570515772414},{"_id":"themes/NextT/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1570515772414},{"_id":"themes/NextT/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"1fb2c852fad03b73882069f1ec0659db2e1f2da0","modified":1570515772414},{"_id":"themes/NextT/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1570515772415},{"_id":"themes/NextT/docs/MATH.md","hash":"aa90364b1ac069b4f8cfdb48b4879311856224e6","modified":1570515772415},{"_id":"themes/NextT/gulpfile.js","hash":"94e80ca87826b90744618b00d08bc7e5eefbaef4","modified":1570515772422},{"_id":"themes/NextT/package.json","hash":"04cdcb7cb13a4d21739b49babd93e01ad5da24c3","modified":1570515772452},{"_id":"themes/NextT/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1570515772410},{"_id":"themes/NextT/layout/page.swig","hash":"623c5873eccf1e842ec4fa1eaac0614f235bb50f","modified":1570515772452},{"_id":"themes/NextT/layout/post.swig","hash":"5c14c9ece50c423c761f73b2001f28c4f21f665b","modified":1570515772452},{"_id":"themes/NextT/layout/index.swig","hash":"5bad87bfe875a403a76ea0b56139f5e7d1841fd0","modified":1570515772451},{"_id":"themes/NextT/layout/tag.swig","hash":"60d92af61fa0087cbdd4decf590b9f7c111d1abe","modified":1570515772452},{"_id":"themes/NextT/layout/archive.swig","hash":"238583e6b5c5c03624d859f0f22294059937defe","modified":1570515772451},{"_id":"themes/NextT/docs/UPDATE-FROM-5.1.X.md","hash":"199e9ef3cb5928af0fe801d03d2d1aeea704cea4","modified":1570515772416},{"_id":"themes/NextT/layout/category.swig","hash":"fe34f1a67b429fd40909c2e01689a83e7fe7e7cc","modified":1570515772451},{"_id":"themes/NextT/layout/_layout.swig","hash":"f4d6213baee3b9d137c8757657a514166c3adf30","modified":1570515772430},{"_id":"source/about/index.md","hash":"4ed134c1b1e7c8978058fa5b00399650524cc23c","modified":1570519788008},{"_id":"themes/NextT/languages/default.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1570515772422},{"_id":"themes/NextT/languages/en.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1570515772422},{"_id":"themes/NextT/languages/es.yml","hash":"7dc1d7d5ea1078ee3b9bc8e0e8d0f15f52a7a4aa","modified":1570515772423},{"_id":"themes/NextT/languages/de.yml","hash":"3d8920676d89494d7d1c74d4238680151ea6d9df","modified":1570515772422},{"_id":"themes/NextT/languages/fa.yml","hash":"269b5cb70774485d7dbbcf98eec72c9e84e135b2","modified":1570515772423},{"_id":"themes/NextT/languages/fr.yml","hash":"dfdcfa536c40d06125dff373d042c50e08fcafd8","modified":1570515772424},{"_id":"themes/NextT/languages/hu.yml","hash":"e4a5f43fb45acd992def3de3b600aa4df4c95ed7","modified":1570515772424},{"_id":"themes/NextT/languages/id.yml","hash":"5665dece8435964a27b5061d7283f339f84721f0","modified":1570515772425},{"_id":"themes/NextT/languages/it.yml","hash":"311597c620059dbb99474f19b2110a4485ecf70b","modified":1570515772425},{"_id":"themes/NextT/languages/ja.yml","hash":"4f929842b3d6aaed709ea99da679d3910ee184e5","modified":1570515772425},{"_id":"themes/NextT/languages/pt-BR.yml","hash":"13b579911e44a8b213e1860f9a50c341be1bf95e","modified":1570515772426},{"_id":"themes/NextT/languages/ru.yml","hash":"b485c57dd7b447406dafd0dcfdfc9356266708c9","modified":1570515772427},{"_id":"themes/NextT/languages/tr.yml","hash":"39caf8a3677fd6dfbd523e73f8482a509e87b603","modified":1570515772427},{"_id":"themes/NextT/languages/uk.yml","hash":"4cbdbb0ed09487c9b435be21ac35f62182f53283","modified":1570515772428},{"_id":"themes/NextT/languages/vi.yml","hash":"3c6bb816ee7278afcddac06998c9ebe47ee19aef","modified":1570515772428},{"_id":"themes/NextT/languages/zh-CN.yml","hash":"59e2c3aadeca2e2376381763289fd9eee80aaf37","modified":1570527016844},{"_id":"themes/NextT/languages/zh-HK.yml","hash":"93d10d6e448c519004b09b11fba980b5036c93af","modified":1570515772429},{"_id":"themes/NextT/languages/zh-TW.yml","hash":"ae2aa1c6ec1a5a01a3a3bde17bcc3a82f9a35fa7","modified":1570515772429},{"_id":"themes/NextT/languages/nl.yml","hash":"561c77ca68e9d51a5ce8c89d3361fdb033c96bba","modified":1570515772426},{"_id":"themes/NextT/languages/ko.yml","hash":"5f5194dd0f5a3c8484e7668bce6fbe23340e531a","modified":1570515772426},{"_id":"themes/NextT/languages/pt.yml","hash":"af9d9b581dca45ab9789ca41d3492883a911e383","modified":1570515772426},{"_id":"source/_posts/import-three/2.jpg","hash":"f568d71875b8d5181e4988183820512a4833eac6","modified":1571363375569},{"_id":"source/_posts/import-three/3.jpg","hash":"7de03ce2fb0db599928b83a5ac9ce52ca50bb003","modified":1571366755055},{"_id":"source/_posts/life-flowers/2.jpg","hash":"43bdad206ba9f1f70266c3d80e4c99492d2d35df","modified":1570977472357},{"_id":"source/_posts/life-flowers/4.jpg","hash":"2e175a4060d6156e467812e057df7b83f820cf73","modified":1570977566391},{"_id":"source/_posts/life-flowers/6.jpg","hash":"9343d572e2df41fca6567f8b78be698da593fd9c","modified":1571150568508},{"_id":"source/_posts/life-flowers_files/6.jpg","hash":"9343d572e2df41fca6567f8b78be698da593fd9c","modified":1571150553829},{"_id":"themes/NextT/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1570515762410},{"_id":"themes/NextT/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1570515762411},{"_id":"themes/NextT/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1570515762408},{"_id":"themes/NextT/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1570515762412},{"_id":"themes/NextT/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1570515762408},{"_id":"themes/NextT/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1570515762410},{"_id":"themes/NextT/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1570515762410},{"_id":"themes/NextT/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1570515762412},{"_id":"themes/NextT/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1570515762406},{"_id":"themes/NextT/.git/logs/HEAD","hash":"8041ccfa40fd0e9c5c1fde66dbe5498182af8b45","modified":1570515772392},{"_id":"themes/NextT/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c0b9e8a851016da44d9479539dd0b1270fe75571","modified":1570515772399},{"_id":"themes/NextT/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"b28c02cd246f3fe0352b75729c52c5931c8ac84f","modified":1570515772400},{"_id":"themes/NextT/.github/ISSUE_TEMPLATE/feature-request.md","hash":"3b27149a4f9ed002ca84483f95ed558470a32b31","modified":1570515772400},{"_id":"themes/NextT/docs/ru/DATA-FILES.md","hash":"67d04e3e29a2675d1a9f87d1ae6ea0769e963ff1","modified":1570515772417},{"_id":"themes/NextT/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1570515772417},{"_id":"themes/NextT/docs/ru/README.md","hash":"9ddae0eb4a4588888bc50b2224e01b7a99ba945a","modified":1570515772417},{"_id":"themes/NextT/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1570515772418},{"_id":"themes/NextT/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"5ad2c2d0a11443a03b3fd912925bc0dcfbcda88c","modified":1570515772418},{"_id":"themes/NextT/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"ebacdc94f6f9724a7c6ef7c3cdde41ff7c37931a","modified":1570515772419},{"_id":"themes/NextT/docs/zh-CN/CONTRIBUTING.md","hash":"edf3e56082f62fabbbaac61c82c7f0513f6e685a","modified":1570515772419},{"_id":"themes/NextT/docs/zh-CN/DATA-FILES.md","hash":"c46f3f7496fc422207cc5954e10a2bc972b650aa","modified":1570515772420},{"_id":"themes/NextT/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1570515772420},{"_id":"themes/NextT/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8ceaad956a1afedf179b2e0b98a67adee9afec08","modified":1570515772420},{"_id":"themes/NextT/docs/zh-CN/MATH.md","hash":"a658a72589738e11aefaa3a714b188ffd5aac822","modified":1570515772421},{"_id":"themes/NextT/docs/zh-CN/README.md","hash":"790fa9a6a951ca7592162c2edded04a48099b37d","modified":1570515772421},{"_id":"themes/NextT/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"8109a531d3a7f5a306e36d4304c11f0c7c180c87","modified":1570515772421},{"_id":"themes/NextT/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1570515762407},{"_id":"themes/NextT/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1570515762409},{"_id":"themes/NextT/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1570515762410},{"_id":"themes/NextT/layout/_macro/post.swig","hash":"325a6008de86f993405fa234f1344c19d7aa3cd5","modified":1570515772430},{"_id":"themes/NextT/layout/_macro/sidebar.swig","hash":"99e808c3d132badd6a932943c862dd8e330615bc","modified":1570515772431},{"_id":"themes/NextT/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1570515772443},{"_id":"themes/NextT/layout/_scripts/noscript.swig","hash":"e08feac6f8904d7f2006e350514a2f07eb9fff44","modified":1570515772443},{"_id":"themes/NextT/layout/_scripts/pjax.swig","hash":"105004ddcc7fe9f4fd7ad1007b628ba8c08c1e27","modified":1570515772444},{"_id":"themes/NextT/layout/_scripts/three.swig","hash":"10cb2740877086b673a0e03a16bbdeee951caa56","modified":1570515772445},{"_id":"themes/NextT/layout/_scripts/vendors.swig","hash":"9499cb319f76246e4627c534e486ff8bd70e159f","modified":1570515772445},{"_id":"themes/NextT/layout/_macro/post-collapse.swig","hash":"43572a13a654aed5b5123c6adda4d5c3f2883cb8","modified":1570515772430},{"_id":"themes/NextT/layout/_third-party/quicklink.swig","hash":"65f94b115c42d33e6a90b1f8e62075c6d4ac60c1","modified":1570515772449},{"_id":"themes/NextT/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1570515772449},{"_id":"themes/NextT/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1570515772446},{"_id":"themes/NextT/layout/_third-party/facebook-sdk.swig","hash":"3cf1a1a83ceddef4033a2964150f81b979ced6ff","modified":1570515772448},{"_id":"themes/NextT/layout/_third-party/vkontakte-api.swig","hash":"e0d012bdbae5545d90143030116114c34219bd37","modified":1570515772451},{"_id":"themes/NextT/layout/_third-party/index.swig","hash":"32e4fe8dd8b3c40a17314569d1a14bde55251074","modified":1570515772448},{"_id":"themes/NextT/scripts/events/index.js","hash":"a25690d8b03779f7e318108c8eace9baf6d4283a","modified":1570515772453},{"_id":"themes/NextT/scripts/filters/default-injects.js","hash":"834599d2b83f06e90f8cf618cddc106fe900ba5c","modified":1570515772457},{"_id":"themes/NextT/scripts/filters/excerpt.js","hash":"827c3733fa14b018dd1f07e41686c207880e823a","modified":1570515772457},{"_id":"themes/NextT/scripts/filters/exturl.js","hash":"9c32675f64121ffbe454189b8e418b408f79d9c2","modified":1570515772458},{"_id":"themes/NextT/scripts/filters/lazyload.js","hash":"51672320fff6b39f56fe6a2881c611afe4e79b8e","modified":1570515772458},{"_id":"themes/NextT/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1570515772458},{"_id":"themes/NextT/scripts/helpers/engine.js","hash":"896a581feb9432e58a325ad04d66d6310a12374e","modified":1570515772458},{"_id":"themes/NextT/scripts/helpers/next-inject.js","hash":"33eb6f38de575b973fed237032c34d878594fdc1","modified":1570515772459},{"_id":"themes/NextT/scripts/helpers/font.js","hash":"53169e2d04f0c21e68beb07c212be0a6c2a9aaea","modified":1570515772459},{"_id":"themes/NextT/scripts/helpers/next-js.js","hash":"b28a8ed6d033946acbb5b91f6d8b884857410dd9","modified":1570515772459},{"_id":"themes/NextT/scripts/helpers/next-url.js","hash":"18f879fb8227c6dc58b919c437fe61db61969caa","modified":1570515772459},{"_id":"themes/NextT/scripts/helpers/next-vendors.js","hash":"d512f44195f68b0ff93f3c82afff9161cdf1b7d6","modified":1570515772459},{"_id":"themes/NextT/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1570515772460},{"_id":"themes/NextT/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1570515772460},{"_id":"themes/NextT/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1570515772460},{"_id":"themes/NextT/scripts/tags/include-raw.js","hash":"60f880c1e11a7df1aee4f2e01d65451fecc0372c","modified":1570515772460},{"_id":"themes/NextT/scripts/tags/group-pictures.js","hash":"8fc05f22b88553bc1d96e0c925799cd97920fc6a","modified":1570515772460},{"_id":"themes/NextT/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1570515772461},{"_id":"themes/NextT/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1570515772461},{"_id":"themes/NextT/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1570515772461},{"_id":"themes/NextT/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1570515772461},{"_id":"themes/NextT/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1570515772461},{"_id":"themes/NextT/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1570515772461},{"_id":"themes/NextT/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1570515772492},{"_id":"themes/NextT/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1570515772494},{"_id":"themes/NextT/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1570515772494},{"_id":"themes/NextT/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1570515772495},{"_id":"themes/NextT/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1570515772495},{"_id":"themes/NextT/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1570515772496},{"_id":"themes/NextT/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1570515772496},{"_id":"themes/NextT/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1570515772497},{"_id":"themes/NextT/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1570515772497},{"_id":"themes/NextT/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1570515772498},{"_id":"themes/NextT/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1570515772498},{"_id":"themes/NextT/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1570515772498},{"_id":"themes/NextT/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1570515772498},{"_id":"themes/NextT/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1570515772499},{"_id":"themes/NextT/source/js/bookmark.js","hash":"60cab6771a57c268da331920edd6d7fcd2713d42","modified":1570515772499},{"_id":"themes/NextT/source/js/local-search.js","hash":"0579159bf994e3726b3ba063e5905f79465fdfb1","modified":1570515772500},{"_id":"themes/NextT/source/js/motion.js","hash":"71e5caff1d87b1b7256f61e6b318bedf495f9e75","modified":1570515772500},{"_id":"themes/NextT/source/js/next-boot.js","hash":"a6a82905c6abb8e0ec418ef6b0509b946b955807","modified":1570515772500},{"_id":"themes/NextT/source/js/utils.js","hash":"33a76cda8ecad2bea9db13e1f77c6e22fd6452fe","modified":1570515772502},{"_id":"themes/NextT/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1570515772503},{"_id":"source/_posts/import-three/1.jpg","hash":"a70b0bcde46242560ae23295db8d822e509752c2","modified":1571280537187},{"_id":"source/_posts/import-three/4.jpg","hash":"89a0d01a6066d6e272f25eaac37259ecc7416c84","modified":1571367009040},{"_id":"source/_posts/import-three/5.jpg","hash":"69235b3dc0c2345d4aa3e7b0d5f4bb22235b3d51","modified":1571367186203},{"_id":"source/_posts/life-flowers/1.jpg","hash":"f9e74770598e416d7e1c54da57ec2fab6b758a6a","modified":1570977293409},{"_id":"source/_posts/life-flowers/3.jpg","hash":"7c2621851184cfdcdcb087e4743d9b14a78ccdc3","modified":1570977530253},{"_id":"source/_posts/life-flowers/5.jpg","hash":"4cc6336a5cc4009c110ed7506c8cc628b7154244","modified":1571150128516},{"_id":"source/_posts/life-flowers/7.jpg","hash":"db3506fbd2af7d634f8654d38940d66dcf952f13","modified":1571151525984},{"_id":"themes/NextT/layout/_partials/comments.swig","hash":"e0f59221b6010bd3e05d34fac915556f51b8a458","modified":1570515772434},{"_id":"themes/NextT/layout/_partials/widgets.swig","hash":"58f12810a730ba8e3129c9b0d1a7cce42ac6f2d2","modified":1570515772443},{"_id":"themes/NextT/layout/_partials/footer.swig","hash":"9d9a5d6a2f0d4f65fe57c3737c91ecaf276c1f5c","modified":1570515772434},{"_id":"themes/NextT/layout/_partials/pagination.swig","hash":"b9d3f6534efb9e637ac46318fa07c2e5607bf830","modified":1570515772439},{"_id":"themes/NextT/layout/_partials/post-edit.swig","hash":"4b0c972c44bfa7ab07604280563deb9cc3974657","modified":1570515772439},{"_id":"themes/NextT/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1570515772493},{"_id":"themes/NextT/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1570515772493},{"_id":"themes/NextT/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1570515772494},{"_id":"themes/NextT/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1570515772482},{"_id":"themes/NextT/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1570515772482},{"_id":"themes/NextT/.git/refs/heads/master","hash":"7d3440c758306a4f1ffead81b93393a82d67e3b4","modified":1570515772392},{"_id":"themes/NextT/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1570515772444},{"_id":"themes/NextT/layout/_scripts/pages/schedule.swig","hash":"9e44c795565837ba318fd739e42713de365673fd","modified":1570515772444},{"_id":"themes/NextT/layout/_third-party/analytics/application-insights.swig","hash":"7fd0459d2f1cfe1254f2c2b8087dc094c8cb0e84","modified":1570515772445},{"_id":"themes/NextT/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1570515772445},{"_id":"themes/NextT/layout/_third-party/analytics/google-analytics.swig","hash":"9f73476ebcf5cd3b7f55525b3f35dc7e9f01e154","modified":1570515772445},{"_id":"themes/NextT/layout/_third-party/analytics/growingio.swig","hash":"42aa3022f7739a552c7a55de316d8c0994b2fdc1","modified":1570515772446},{"_id":"themes/NextT/layout/_third-party/analytics/index.swig","hash":"20fcbed44aede1b908bd17d7a0279b03639068b1","modified":1570515772446},{"_id":"themes/NextT/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1570515772446},{"_id":"themes/NextT/layout/_third-party/chat/index.swig","hash":"5ab4a8b4306c837d2f8c211a9d7fdaed76fa254d","modified":1570515772446},{"_id":"themes/NextT/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1570515772446},{"_id":"themes/NextT/layout/_third-party/comments/changyan.swig","hash":"1130b8bd60f3b84397974486e6586d7f0afaf836","modified":1570515772447},{"_id":"themes/NextT/layout/_third-party/comments/disqus.swig","hash":"86092b31761948486ecb379eb7445f66a158769d","modified":1570515772447},{"_id":"themes/NextT/layout/_third-party/comments/disqusjs.swig","hash":"df8413cba22deffca94cf4edd6d9f8d35d2bb58f","modified":1570515772447},{"_id":"themes/NextT/layout/_third-party/comments/gitalk.swig","hash":"261c4f1ab42f692279a310943b807ed34516df7c","modified":1570515772447},{"_id":"themes/NextT/layout/_third-party/comments/livere.swig","hash":"6f95bc4d7ffaddc3c0df0ef3eeeaac58ff83f560","modified":1570515772447},{"_id":"themes/NextT/layout/_third-party/comments/valine.swig","hash":"6fbf4cca91ad4ca150b1ea38d562f4bd7ba4c340","modified":1570515772448},{"_id":"themes/NextT/layout/_third-party/math/index.swig","hash":"bc23c9eb9c06b0b377695f44373c14c5cde1d0e3","modified":1570515772449},{"_id":"themes/NextT/layout/_third-party/math/katex.swig","hash":"b9d7a99534e9c2608765b958eae3b5c50f5e4889","modified":1570515772449},{"_id":"themes/NextT/layout/_third-party/math/mathjax.swig","hash":"dff6835d0b03ecc2db6919ca27cfb7b63949e6a8","modified":1570515772449},{"_id":"themes/NextT/layout/_third-party/tags/index.swig","hash":"83d0a8f71878c6b96a04ba08567b9064de6cce83","modified":1570515772450},{"_id":"themes/NextT/layout/_third-party/tags/mermaid.swig","hash":"a54308f934c33b12f6bf28e4ce90e517f38cab57","modified":1570515772450},{"_id":"themes/NextT/layout/_third-party/tags/pdf.swig","hash":"7597800b6ce2f545baea797d95d1b8c7cf624299","modified":1570515772450},{"_id":"themes/NextT/layout/_third-party/search/algolia-search.swig","hash":"ad7a22ee0f183481c7843ecd881b9f9e8e037e31","modified":1570515772449},{"_id":"themes/NextT/layout/_third-party/search/index.swig","hash":"b2fd17688f0433571b37704bc8df798e175e7811","modified":1570515772450},{"_id":"themes/NextT/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1570515772450},{"_id":"themes/NextT/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1570515772450},{"_id":"themes/NextT/scripts/events/lib/config.js","hash":"b710d896fccd34657a70244645470e476a4e069f","modified":1570515772453},{"_id":"themes/NextT/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1570515772454},{"_id":"themes/NextT/scripts/events/lib/injects.js","hash":"2a5f7c7e507bb354ec05a881bc9a1f4f2f28197c","modified":1570515772454},{"_id":"themes/NextT/scripts/filters/comment/changyan.js","hash":"3ac62f5510f22e9d970089bb01f96ba2134ae161","modified":1570515772454},{"_id":"themes/NextT/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1570515772454},{"_id":"themes/NextT/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1570515772455},{"_id":"themes/NextT/scripts/filters/comment/disqus.js","hash":"ccfac51bde0063ab7ef88182f8cbc98c210e78c9","modified":1570515772455},{"_id":"themes/NextT/scripts/filters/comment/disqusjs.js","hash":"178c4618b29a1e06221285146071e72e24c40499","modified":1570515772455},{"_id":"themes/NextT/scripts/filters/comment/facebook-comments-plugin.js","hash":"e3c74b24f3818f2504fd0c7a954adaa6681bb969","modified":1570515772455},{"_id":"themes/NextT/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1570515772455},{"_id":"themes/NextT/scripts/filters/comment/livere.js","hash":"3c4bdc2a682f9889a532e1cb856bc5caeb4208e1","modified":1570515772456},{"_id":"themes/NextT/scripts/filters/comment/vkontakte.js","hash":"031337c2e2157628a15a5f4d96fa6e3fcf2733fe","modified":1570515772457},{"_id":"themes/NextT/scripts/filters/comment/valine.js","hash":"e34d38aee93558b2c68a7fa6203c2e4806405d62","modified":1570515772457},{"_id":"themes/NextT/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1570515772482},{"_id":"themes/NextT/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1570515772483},{"_id":"themes/NextT/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1570515772483},{"_id":"themes/NextT/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1570515772491},{"_id":"themes/NextT/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1570515772490},{"_id":"themes/NextT/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1570515772491},{"_id":"themes/NextT/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1570515772491},{"_id":"themes/NextT/source/css/_variables/base.styl","hash":"20628fc6fec4fad5856236029faa7dcd42a6da4c","modified":1570603006866},{"_id":"themes/NextT/source/js/schemes/muse.js","hash":"db026a71427f85a1d9055c4c09db123f9eb2f242","modified":1570515772501},{"_id":"themes/NextT/source/js/schemes/pisces.js","hash":"1e47ffdda23f7f645a2a883a90e2e9d9ddbf9a46","modified":1570515772501},{"_id":"themes/NextT/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1570515772503},{"_id":"themes/NextT/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1570515772504},{"_id":"themes/NextT/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1570515772504},{"_id":"themes/NextT/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1570515772504},{"_id":"themes/NextT/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1570515772505},{"_id":"themes/NextT/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1570515772510},{"_id":"themes/NextT/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1570515772511},{"_id":"themes/NextT/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1570515772444},{"_id":"themes/NextT/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1570515772444},{"_id":"themes/NextT/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1570515772444},{"_id":"themes/NextT/layout/_partials/analytics/index.swig","hash":"ac6a3995c1330d2d73300b2427006509d0f8dba5","modified":1570515772433},{"_id":"themes/NextT/layout/_partials/analytics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1570515772431},{"_id":"themes/NextT/layout/_partials/analytics/tencent-analytics.swig","hash":"493a1ef6c8f475d4dd3156a6ab37690dc75695ea","modified":1570515772433},{"_id":"themes/NextT/layout/_partials/analytics/tencent-mta.swig","hash":"198813a3f382bda4278fe3759bf0f18a5769bb33","modified":1570515772434},{"_id":"themes/NextT/layout/_partials/head/head-unique.swig","hash":"0edd29b972aceecccb65b3e63d79c01f6639d0c5","modified":1570515772435},{"_id":"themes/NextT/layout/_partials/head/head.swig","hash":"6236a874b93ac1be56fc21df8534a7ae8acffcfc","modified":1570515772436},{"_id":"themes/NextT/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1570515772436},{"_id":"themes/NextT/layout/_partials/header/index.swig","hash":"e0767e09a632264f189570e95ccf70fb1dad9110","modified":1570515772436},{"_id":"themes/NextT/layout/_partials/header/menu-item.swig","hash":"6da15fe72f7b6ebe2c510f5c773f30ea0133fb0a","modified":1570515772437},{"_id":"themes/NextT/layout/_partials/header/menu.swig","hash":"bfd55f4ef59dc5e88a7c45eb709021528fcf2b51","modified":1570515772437},{"_id":"themes/NextT/layout/_partials/header/sub-menu.swig","hash":"02a4706ce7ed6f6d2f660948a74e9e8cd6dfa1fd","modified":1570515772437},{"_id":"themes/NextT/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1570515772438},{"_id":"themes/NextT/layout/_partials/page/page-header.swig","hash":"d3c25d70f0fd76121e4cacb9f8af4ccbe2a3c74d","modified":1570515772438},{"_id":"themes/NextT/layout/_partials/post/post-copyright.swig","hash":"b68ccb90e2ee42bd98c93fc030a29d38689dd55c","modified":1570515772440},{"_id":"themes/NextT/layout/_partials/post/post-footer.swig","hash":"b654d63d2ed221a8b642223e220392e5172d8f4d","modified":1570515772441},{"_id":"themes/NextT/layout/_partials/post/post-related.swig","hash":"f05225f7d0ada3853c425899b515056b96ca49bf","modified":1570515772441},{"_id":"themes/NextT/layout/_partials/post/post-reward.swig","hash":"90a0869c6cc351d92fc97bf42fdc6e1bfa6bc513","modified":1570515772441},{"_id":"themes/NextT/layout/_partials/post/wechat-subscriber.swig","hash":"2edfaf1579ea58e15cb5583fb7962dfee9af2257","modified":1570515772442},{"_id":"themes/NextT/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1570515772442},{"_id":"themes/NextT/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1570515772442},{"_id":"themes/NextT/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1570515772442},{"_id":"themes/NextT/layout/_partials/sidebar/site-overview.swig","hash":"381f6a88d117293d6e0fe53c43ee30fc71caf817","modified":1570515772443},{"_id":"themes/NextT/layout/_partials/analytics/firestore.swig","hash":"67e63c25d509f02a6057ee9724f1b6efd647f72f","modified":1570515772432},{"_id":"themes/NextT/layout/_partials/analytics/lean-analytics.swig","hash":"fb7729b69ef443db1f3f2755506ee998cfe4b973","modified":1570515772433},{"_id":"themes/NextT/layout/_partials/analytics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1570515772432},{"_id":"themes/NextT/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1570515772391},{"_id":"themes/NextT/.git/logs/refs/heads/master","hash":"8041ccfa40fd0e9c5c1fde66dbe5498182af8b45","modified":1570515772392},{"_id":"themes/NextT/source/css/_common/components/back-to-top-sidebar.styl","hash":"cda066b495a4b6b10c7bc88b2a9b82722156b66b","modified":1570515772462},{"_id":"themes/NextT/source/css/_common/components/components.styl","hash":"65a38b8a443c7da0f9492d10b3d9c9bf1e82c649","modified":1570515772462},{"_id":"themes/NextT/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1570515772462},{"_id":"themes/NextT/source/css/_common/components/scrollbar.styl","hash":"202ee1f1f8e64d8292df16f40ee176ff4e5d7e71","modified":1570515772467},{"_id":"themes/NextT/source/css/_common/components/rainbow.styl","hash":"f71964142a76c67b41f2e7a6b75b4c36e51c68c9","modified":1570515772467},{"_id":"themes/NextT/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1570515772467},{"_id":"themes/NextT/source/css/_common/scaffolding/base.styl","hash":"3464a488b4488b039c240f114dacfe235a4b60a9","modified":1570603036080},{"_id":"themes/NextT/source/css/_common/scaffolding/normalize.styl","hash":"4f7140cc0db08b47a25c4c7aad71047d433051a1","modified":1570515772478},{"_id":"themes/NextT/source/css/_common/scaffolding/pagination.styl","hash":"48df8ba940038b5f6c8496f27a091f90d61f1263","modified":1570515772478},{"_id":"themes/NextT/source/css/_common/scaffolding/tables.styl","hash":"4ddbc8b2dba6fad900c5eca793a31f18ba850f5a","modified":1570515772479},{"_id":"themes/NextT/source/css/_common/scaffolding/toggles.styl","hash":"03b95661d365252721b0c673b736a7a3e5e0c894","modified":1570515772482},{"_id":"themes/NextT/source/css/_schemes/Gemini/index.styl","hash":"b952565fb7d646dc34d2d4198d6a6e01c3cecc1c","modified":1570515772484},{"_id":"themes/NextT/source/css/_schemes/Mist/_base.styl","hash":"71d75fa309cf5b96d876da536f57c047e57afcff","modified":1570515772484},{"_id":"themes/NextT/source/css/_schemes/Mist/_header.styl","hash":"d01ea38467cccc8c657601c15c94986f83914fa5","modified":1570515772484},{"_id":"themes/NextT/source/css/_schemes/Mist/_menu.styl","hash":"5b91373e5c22b6e214d59a64bbf2c0e347d337fe","modified":1570515772485},{"_id":"themes/NextT/source/css/_schemes/Mist/_posts-expand.styl","hash":"aaa7aeb01e2f6db2e5ac404ac06d71725ff83fa3","modified":1570515772485},{"_id":"themes/NextT/source/css/_schemes/Mist/index.styl","hash":"92b79294b5f6409c646cf2d3fa2587f0cf54d988","modified":1570515772485},{"_id":"themes/NextT/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1570515772486},{"_id":"themes/NextT/source/css/_schemes/Muse/_layout.styl","hash":"aab4583b237f7d2e7a49f702793ad32b80e833b5","modified":1570515772486},{"_id":"themes/NextT/source/css/_schemes/Muse/_menu.styl","hash":"f6508ddc38926e5aea84c9a7097ace7bedbc6a01","modified":1570515772487},{"_id":"themes/NextT/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1570515772487},{"_id":"themes/NextT/source/css/_schemes/Muse/index.styl","hash":"f743ebee02741ca1206b64ea18b96b21f2f6d2fc","modified":1570515772487},{"_id":"themes/NextT/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1570515772488},{"_id":"themes/NextT/source/css/_schemes/Pisces/_layout.styl","hash":"7ea9f7970cb779920b184ac35c364c5c7456cda0","modified":1570515772489},{"_id":"themes/NextT/source/css/_schemes/Pisces/_menu.styl","hash":"96971f941992ba478900099d8ceebeccd0c09418","modified":1570515772489},{"_id":"themes/NextT/source/css/_schemes/Pisces/_sidebar.styl","hash":"fcc6c42d7976a531f054c05b2d3d4ccf861a8107","modified":1570515772489},{"_id":"themes/NextT/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e2d8d1f393dbf0ae0960ce9944ad89fba804ce74","modified":1570515772489},{"_id":"themes/NextT/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1570515772490},{"_id":"themes/NextT/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1570515772472},{"_id":"themes/NextT/source/css/_common/outline/outline.styl","hash":"253be42759a997fa7e63e79d43f6fe432055d1f4","modified":1570515772473},{"_id":"themes/NextT/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1570515772506},{"_id":"themes/NextT/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1570515772506},{"_id":"themes/NextT/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1570515772507},{"_id":"themes/NextT/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1570515772479},{"_id":"themes/NextT/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1570515772477},{"_id":"themes/NextT/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1570515772476},{"_id":"themes/NextT/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1570515772510},{"_id":"themes/NextT/.git/logs/refs/remotes/origin/HEAD","hash":"8041ccfa40fd0e9c5c1fde66dbe5498182af8b45","modified":1570515772391},{"_id":"themes/NextT/source/css/_common/components/pages/schedule.styl","hash":"bd24ba69935effe204795ed6fad7ab54e140ee4a","modified":1570515772463},{"_id":"themes/NextT/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1570515772463},{"_id":"themes/NextT/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1570515772463},{"_id":"themes/NextT/source/css/_common/components/post/post-copyright.styl","hash":"ac2105c5a7f581b1c0f2b59f2c0c3e87a7c28383","modified":1570515772464},{"_id":"themes/NextT/source/css/_common/components/post/post-eof.styl","hash":"4735c5a76d12713f35d06e2f4d539919ca2196db","modified":1570515772465},{"_id":"themes/NextT/source/css/_common/components/post/post-expand.styl","hash":"602a3c3d2785965b23412b5c219dfe74b5fb0844","modified":1570515772465},{"_id":"themes/NextT/source/css/_common/components/post/post-nav.styl","hash":"2e2a09dddd2a394a635bcefb6207b6cddcb784c7","modified":1570515772465},{"_id":"themes/NextT/source/css/_common/components/post/post-header.styl","hash":"736e75abff9e07608fb6205bb985345f7423696e","modified":1570515772465},{"_id":"themes/NextT/source/css/_common/components/post/post-reward.styl","hash":"541d6257023915a7caca7540f12cdf283ce025f3","modified":1570515772465},{"_id":"themes/NextT/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1570515772466},{"_id":"themes/NextT/source/css/_common/components/post/post-gallery.styl","hash":"caa9a78993d549117cdc8fa7a76c473a5e7f0f67","modified":1570515772465},{"_id":"themes/NextT/source/css/_common/components/post/post-tags.styl","hash":"469d5e4e188f484abff24eddd5640fa4d4d77ed1","modified":1570515772466},{"_id":"themes/NextT/source/css/_common/components/post/post.styl","hash":"5248880398c1318624bdab95109c1c9fdb8eec02","modified":1570515772466},{"_id":"themes/NextT/source/css/_common/components/post/post-widgets.styl","hash":"8b6481a0ac60007cf3defa3c9d85a6e412c91d6e","modified":1570515772466},{"_id":"themes/NextT/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1570515772468},{"_id":"themes/NextT/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1570515772468},{"_id":"themes/NextT/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1570515772468},{"_id":"themes/NextT/source/css/_common/components/third-party/search.styl","hash":"e411fbe58701ef72c8aaa3457f0f50290171e977","modified":1570515772469},{"_id":"themes/NextT/source/css/_common/components/third-party/third-party.styl","hash":"4525465f40f82bd66e5f34e986440c75a9e2d2b2","modified":1570515772469},{"_id":"themes/NextT/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"2124abd41b69ff152f4bb39e78d8fbce96a45c65","modified":1570515772477},{"_id":"themes/NextT/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1570515772477},{"_id":"themes/NextT/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1570515772478},{"_id":"themes/NextT/source/css/_common/scaffolding/highlight/highlight.styl","hash":"0b309d18e60efd1468d802e4fbebf7b11e62173b","modified":1570601225955},{"_id":"themes/NextT/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"0527bc64708a9446dc7bbb2c7e39ab3a61251c26","modified":1570515772479},{"_id":"themes/NextT/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"879f9cec9c88d65b2e31af4346b2bc0f6941f05d","modified":1570515772479},{"_id":"themes/NextT/source/css/_common/scaffolding/tags/label.styl","hash":"78d309e22206a4addda3c393282518dae02250ed","modified":1570515772480},{"_id":"themes/NextT/source/css/_common/scaffolding/tags/note.styl","hash":"a1eed8fe7f97885a9234502a197abf2e90ba22b6","modified":1570515772481},{"_id":"themes/NextT/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1570515772481},{"_id":"themes/NextT/source/css/_common/scaffolding/tags/tabs.styl","hash":"2f39b2f07c2bbca34e2f1e4805ea374566b79dbf","modified":1570515772481},{"_id":"themes/NextT/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1570515772482},{"_id":"themes/NextT/source/css/_common/outline/footer/footer.styl","hash":"d7a4cc66dde4789bf208f8a0dec0e4a19945f3a6","modified":1570515772469},{"_id":"themes/NextT/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1570515772470},{"_id":"themes/NextT/source/css/_common/outline/header/github-banner.styl","hash":"a475ca66b201b21a7c4022006743b3a79098829d","modified":1570515772470},{"_id":"themes/NextT/source/css/_common/outline/header/header.styl","hash":"b98ba750be29c09784ff337f9e2a6e7a062aa3c0","modified":1570515772470},{"_id":"themes/NextT/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1570515772470},{"_id":"themes/NextT/source/css/_common/outline/header/menu.styl","hash":"ec4acfafef2054173e173959cf5da6d0448c7c12","modified":1570515772471},{"_id":"themes/NextT/source/css/_common/outline/header/site-nav.styl","hash":"b5ba1b3d5535ccf1e5df6f4cd8ee0147d7278be9","modified":1570515772471},{"_id":"themes/NextT/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2ef546b4cfa5038ebb050c592c5135bbeb51af41","modified":1570515772473},{"_id":"themes/NextT/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1570515772473},{"_id":"themes/NextT/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1570515772474},{"_id":"themes/NextT/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"41ccae779f918e6f9f5f625789a7360f1362454c","modified":1570515772474},{"_id":"themes/NextT/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1570515772474},{"_id":"themes/NextT/source/css/_common/outline/header/site-meta.styl","hash":"a35cce63504df289a0847a6d827e5a0885e7fe4a","modified":1570515772471},{"_id":"themes/NextT/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f3108a247549fbdf11071d023add3f1b34ad2b23","modified":1570515772474},{"_id":"themes/NextT/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1570515772475},{"_id":"themes/NextT/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1570515772475},{"_id":"themes/NextT/source/css/_common/outline/sidebar/sidebar.styl","hash":"eaa62b5de4ddb18378c1a4049a172d4fa4b655d8","modified":1570515772475},{"_id":"themes/NextT/source/css/_common/outline/sidebar/site-state.styl","hash":"02e5a998748a67fa885fb06fae242bcf3f2786fb","modified":1570515772476},{"_id":"themes/NextT/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1570515772509},{"_id":"themes/NextT/.git/objects/pack/pack-3b8263291c3c1afe8bebd5bbbaf823c27df8d71a.idx","hash":"5dab51ee8235b795b2b8c3db61af1b7be099e8a2","modified":1570515772379},{"_id":"themes/NextT/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1570515772463},{"_id":"themes/NextT/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1570515772463},{"_id":"themes/NextT/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1570515772464},{"_id":"themes/NextT/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1570515772509},{"_id":"themes/NextT/.git/objects/pack/pack-3b8263291c3c1afe8bebd5bbbaf823c27df8d71a.pack","hash":"4e13a99325edbaef7f45d0849bdddcb3ad5c17f1","modified":1570515772372}],"Category":[{"name":"JavaScript","_id":"ck9tewmv400042c7kt209w6vm"},{"name":"HEXO","_id":"ck9tewmva000a2c7k16p0o6p6"},{"name":"其他","_id":"ck9tewmvg000h2c7kuhiouue3"},{"name":"hide","_id":"ck9tewmvj000n2c7kdynas0of"},{"name":"学习笔记","_id":"ck9tewmyu00122c7k8dmed6l1"}],"Data":[],"Page":[{"title":"tags","date":"2019-10-08T06:02:42.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-10-08 14:02:42\ntype: \"tags\"\n---\n","updated":"2019-10-08T06:46:46.395Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck9tewmv200012c7kcwh51wmf","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"categories","date":"2019-10-08T06:02:42.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-10-08 14:02:42\ntype: \"categories\"\n---","updated":"2019-10-08T09:23:25.830Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck9tewmv400032c7kyyzfyqvn","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"About","date":"2019-10-08T06:02:42.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: About\ndate: 2019-10-08 14:02:42\ntype: \"about\"\n---\n","updated":"2019-10-08T07:29:48.008Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck9tewmxg00102c7kvopbiold","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"前端性能优化总结","_content":"都说功能实现不难，优化才是最难的。想想的确是这样，正因为优化是永无止境的，且实际项目中千变万化的需求有各种相对应的优化点，所以优化是永远的难点\n\n普遍意义上我们认为一个通用的优化点主要是静态资源和网络请求优化，但是这次在项目中遇到了展示的大数据内容的需求，在开发过程中仅因为数据量大这一点没少遇到问题\n\n本文就主要记录本次项目中遇到的问题和解决方案，以及由此归纳出的对大数据产品来说至关重要的几项优化点。\n <!-- more -->\n#### 代码写法\n在普通项目中，提到前端性能优化，一般认为优化点会着重在构建优化或者静态资源优化，但是在数据量极大的项目中，我们一般首要的需要优化的就是代码写法。\n代码写法的优化在实际项目中能够大幅度提升整体性能\n##### 内存释放\n- 变量\n\n平时写项目时，一般极少会注意变量的用法，但是在大数据项目中，变量用法对性能的影响巨大。\n\n例如声明一个全局变量来储存数据，因为全局变量的特性，让需要在多处进行不同处理的数据变得更简单便捷,但同时也因为全局变量在调用的方法执行完之后不会销毁的特性，如将全局变量用于储存数据量极大的数据时，就会给浏览器内存造成极大的负担\n\n因此在项目中尽量用局部变量来储存数据量大的数据，方法执行完成后及时回收\n\n##### 常用数据优化的方法\n\n##### 框架内自带优化方法\n#### 数据接收\n#### 数据渲染","source":"_posts/about-performance.md","raw":"---\ntitle: 前端性能优化总结\ntags: JavaScript\ncategories: JavaScript\n---\n都说功能实现不难，优化才是最难的。想想的确是这样，正因为优化是永无止境的，且实际项目中千变万化的需求有各种相对应的优化点，所以优化是永远的难点\n\n普遍意义上我们认为一个通用的优化点主要是静态资源和网络请求优化，但是这次在项目中遇到了展示的大数据内容的需求，在开发过程中仅因为数据量大这一点没少遇到问题\n\n本文就主要记录本次项目中遇到的问题和解决方案，以及由此归纳出的对大数据产品来说至关重要的几项优化点。\n <!-- more -->\n#### 代码写法\n在普通项目中，提到前端性能优化，一般认为优化点会着重在构建优化或者静态资源优化，但是在数据量极大的项目中，我们一般首要的需要优化的就是代码写法。\n代码写法的优化在实际项目中能够大幅度提升整体性能\n##### 内存释放\n- 变量\n\n平时写项目时，一般极少会注意变量的用法，但是在大数据项目中，变量用法对性能的影响巨大。\n\n例如声明一个全局变量来储存数据，因为全局变量的特性，让需要在多处进行不同处理的数据变得更简单便捷,但同时也因为全局变量在调用的方法执行完之后不会销毁的特性，如将全局变量用于储存数据量极大的数据时，就会给浏览器内存造成极大的负担\n\n因此在项目中尽量用局部变量来储存数据量大的数据，方法执行完成后及时回收\n\n##### 常用数据优化的方法\n\n##### 框架内自带优化方法\n#### 数据接收\n#### 数据渲染","slug":"about-performance","published":1,"date":"2019-10-09T03:06:34.970Z","updated":"2019-10-11T01:59:03.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tewmux00002c7ki8kwheur","content":"<p>都说功能实现不难，优化才是最难的。想想的确是这样，正因为优化是永无止境的，且实际项目中千变万化的需求有各种相对应的优化点，所以优化是永远的难点</p>\n<p>普遍意义上我们认为一个通用的优化点主要是静态资源和网络请求优化，但是这次在项目中遇到了展示的大数据内容的需求，在开发过程中仅因为数据量大这一点没少遇到问题</p>\n<p>本文就主要记录本次项目中遇到的问题和解决方案，以及由此归纳出的对大数据产品来说至关重要的几项优化点。</p>\n <a id=\"more\"></a>\n<h4 id=\"代码写法\"><a class=\"header-anchor\" href=\"#代码写法\">¶</a>代码写法</h4>\n<p>在普通项目中，提到前端性能优化，一般认为优化点会着重在构建优化或者静态资源优化，但是在数据量极大的项目中，我们一般首要的需要优化的就是代码写法。<br>\n代码写法的优化在实际项目中能够大幅度提升整体性能</p>\n<h5 id=\"内存释放\"><a class=\"header-anchor\" href=\"#内存释放\">¶</a>内存释放</h5>\n<ul>\n<li>变量</li>\n</ul>\n<p>平时写项目时，一般极少会注意变量的用法，但是在大数据项目中，变量用法对性能的影响巨大。</p>\n<p>例如声明一个全局变量来储存数据，因为全局变量的特性，让需要在多处进行不同处理的数据变得更简单便捷,但同时也因为全局变量在调用的方法执行完之后不会销毁的特性，如将全局变量用于储存数据量极大的数据时，就会给浏览器内存造成极大的负担</p>\n<p>因此在项目中尽量用局部变量来储存数据量大的数据，方法执行完成后及时回收</p>\n<h5 id=\"常用数据优化的方法\"><a class=\"header-anchor\" href=\"#常用数据优化的方法\">¶</a>常用数据优化的方法</h5>\n<h5 id=\"框架内自带优化方法\"><a class=\"header-anchor\" href=\"#框架内自带优化方法\">¶</a>框架内自带优化方法</h5>\n<h4 id=\"数据接收\"><a class=\"header-anchor\" href=\"#数据接收\">¶</a>数据接收</h4>\n<h4 id=\"数据渲染\"><a class=\"header-anchor\" href=\"#数据渲染\">¶</a>数据渲染</h4>\n","site":{"data":{}},"length":528,"excerpt":"<p>都说功能实现不难，优化才是最难的。想想的确是这样，正因为优化是永无止境的，且实际项目中千变万化的需求有各种相对应的优化点，所以优化是永远的难点</p>\n<p>普遍意义上我们认为一个通用的优化点主要是静态资源和网络请求优化，但是这次在项目中遇到了展示的大数据内容的需求，在开发过程中仅因为数据量大这一点没少遇到问题</p>\n<p>本文就主要记录本次项目中遇到的问题和解决方案，以及由此归纳出的对大数据产品来说至关重要的几项优化点。</p>","more":"<h4 id=\"代码写法\"><a class=\"header-anchor\" href=\"#代码写法\">¶</a>代码写法</h4>\n<p>在普通项目中，提到前端性能优化，一般认为优化点会着重在构建优化或者静态资源优化，但是在数据量极大的项目中，我们一般首要的需要优化的就是代码写法。<br>\n代码写法的优化在实际项目中能够大幅度提升整体性能</p>\n<h5 id=\"内存释放\"><a class=\"header-anchor\" href=\"#内存释放\">¶</a>内存释放</h5>\n<ul>\n<li>变量</li>\n</ul>\n<p>平时写项目时，一般极少会注意变量的用法，但是在大数据项目中，变量用法对性能的影响巨大。</p>\n<p>例如声明一个全局变量来储存数据，因为全局变量的特性，让需要在多处进行不同处理的数据变得更简单便捷,但同时也因为全局变量在调用的方法执行完之后不会销毁的特性，如将全局变量用于储存数据量极大的数据时，就会给浏览器内存造成极大的负担</p>\n<p>因此在项目中尽量用局部变量来储存数据量大的数据，方法执行完成后及时回收</p>\n<h5 id=\"常用数据优化的方法\"><a class=\"header-anchor\" href=\"#常用数据优化的方法\">¶</a>常用数据优化的方法</h5>\n<h5 id=\"框架内自带优化方法\"><a class=\"header-anchor\" href=\"#框架内自带优化方法\">¶</a>框架内自带优化方法</h5>\n<h4 id=\"数据接收\"><a class=\"header-anchor\" href=\"#数据接收\">¶</a>数据接收</h4>\n<h4 id=\"数据渲染\"><a class=\"header-anchor\" href=\"#数据渲染\">¶</a>数据渲染</h4>"},{"title":"前端常用commit规范","_content":"git 可以帮我们很好地管理代码，但是在多人合作的时候，经常会碰到各种随意的 commit message，当你需要会看 commit message 的时候，就会很头疼。\n","source":"_posts/commit.md","raw":"---\ntitle: 前端常用commit规范\ntags: git \n---\ngit 可以帮我们很好地管理代码，但是在多人合作的时候，经常会碰到各种随意的 commit message，当你需要会看 commit message 的时候，就会很头疼。\n","slug":"commit","published":1,"date":"2019-10-09T05:37:57.796Z","updated":"2019-10-09T05:50:59.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tewmv200022c7kyt9z8zz2","content":"<p>git 可以帮我们很好地管理代码，但是在多人合作的时候，经常会碰到各种随意的 commit message，当你需要会看 commit message 的时候，就会很头疼。</p>\n","site":{"data":{}},"length":86,"excerpt":"","more":"<p>git 可以帮我们很好地管理代码，但是在多人合作的时候，经常会碰到各种随意的 commit message，当你需要会看 commit message 的时候，就会很头疼。</p>\n"},{"title":"ES6学习笔记","date":"2019-10-10T07:21:12.000Z","_content":"\n#### 变量的解构赋值\n```javascript\nfunction move({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, 0]\nmove({}); // [0, 0]\nmove(); // [0, 0]\n```\n```javascript\nfunction move({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, undefined]\nmove({}); // [undefined, undefined]\nmove(); // [0, 0]\n```\n\n<!-- more -->\n\n#### 字符串扩展\n```javascript\nlet text = String.fromCodePoint(0x20BB7);\n\nfor (let i = 0; i < text.length; i++) {\n  console.log(text[i]);\n}\n// \" \"\n// \" \"\n\nfor (let i of text) {\n  console.log(i);\n}\n// \"𠮷\"\n```\n\n#### 字符串(String)实例方法\n##### includes(),startsWith()和endsWith()\n传统上，JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。\n\n- `includes(searchString[, position])`：返回*布尔值*，表示是否找到了参数字符串。\n- `startsWith(searchString[, position])`：返回*布尔值*，表示参数字符串是否在原字符串的头部。\n- `endsWith(searchString[, position])`：返回*布尔值*，表示参数字符串是否在原字符串的尾部。\n\n```javascript\nlet s = 'Hello world!';\ns.startsWith('world', 6) // true\n```\n\n##### repeat(count)\n`repeat`方法返回一个*新字符串*，表示将原字符串重复n次。\n参数如果是小数则会被向下取整\n参数是负数或者Infinity，会报错。\n```javascript\n'x'.repeat(3) // \"xxx\"\n'hello'.repeat(2) // \"hellohello\"\n'na'.repeat(0) // \"\"\n\n'na'.repeat(2.9) // \"nana\"\n\n'na'.repeat(Infinity)\n// RangeError\n'na'.repeat(-1)\n// RangeError\n```\n\n如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0\n参数NaN等同于 0。\n\n```javascript\n'na'.repeat(-0.9) // \"\"\n'na'.repeat(NaN) // \"\"\n```\n如果参数是字符串，则会先转换成数字。\n\n##### padStart()，padEnd()\nES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。\n`targetLength`位必选参数，`padString`为可选参数。\n两个方法都返回一个在原字符串开头填充指定的填充字符串直到目标长度所形成的*新字符串*。\n - `padStart(targetLength [, padString])` 。另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的。\n - `padEnd(targetLength [, padString])` 。另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(右侧)应用的。\n \n 如果省略第二个参数，默认使用空格补全长度。\n ```javascript\n 'x'.padStart(4) // '   x'\n 'x'.padEnd(4) // 'x   '\n ```\n 两个方法最常用的场景是，为数值补全指定位数\n ```javascript\n '1'.padStart(10, '0') // \"0000000001\"\n '12'.padStart(10, '0') // \"0000000012\"\n '123456'.padStart(10, '0') // \"0000123456\"\n ```\n 另一使用场景是提示字符串格式。(其实并不常用)\n ```javascript\n '12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-MM-12\"\n '09-12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-09-12\"\n ```\n ##### trimStart()，trimEnd()\n ES2019 对字符串实例新增了`trimStart()`和`trimEnd()`这两个方法，它们的行为与`trim()`一致，`trimStart()`消除字符串头部的空格，`trimEnd()`消除尾部的空格。\n 它们返回的都是新字符串，*不会修改原始字符串*。\n \n 除了空格键，这两个方法对字符串头部（或尾部）的 tab 键、换行符等不可见的空白符号也有效。\n \n 浏览器还部署了额外的两个方法，`trimLeft()`是`trimStart()`的别名，`trimRight()`是`trimEnd()`的别名。\n ##### matchAll()\n matchAll()方法返回一个正则表达式在当前字符串的所有匹配(暂时不理解，正则相关需另起一章)\n \n \n ##### 最后整理的的零碎小东西\n 1. `Math.max()和Math.min()`\n这两个方法在ES6中改进了，原先不允许传入数组，ES6之后可支持数组。\n早前如果想要用这两个方法得出数组的最大和最小值，需要这样写：\n```\nvar values = [12, 15, 0, 20, -1];\nvar max = Math.max.apply(Math, values);// 20\n```\n但是在ES6中我们可以这样写：\n用于ES6使用了展开运算符“...”,JavaScript引擎读取后会将参数数组分割为各自独立的参数并依次传入：\n```\nlet values = [12, 15, 0, 20, -1];\nlet max1 = Math.max(...values);//20\nlet min1 = Math.min(...values);//-1\nlet max2 = Math.max(...values, 100)//100\n\n```\n","source":"_posts/es6-notes.md","raw":"---\ntitle: ES6学习笔记\ndate: 2019-10-10 15:21:12\ntags: JavaScript\n---\n\n#### 变量的解构赋值\n```javascript\nfunction move({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, 0]\nmove({}); // [0, 0]\nmove(); // [0, 0]\n```\n```javascript\nfunction move({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, undefined]\nmove({}); // [undefined, undefined]\nmove(); // [0, 0]\n```\n\n<!-- more -->\n\n#### 字符串扩展\n```javascript\nlet text = String.fromCodePoint(0x20BB7);\n\nfor (let i = 0; i < text.length; i++) {\n  console.log(text[i]);\n}\n// \" \"\n// \" \"\n\nfor (let i of text) {\n  console.log(i);\n}\n// \"𠮷\"\n```\n\n#### 字符串(String)实例方法\n##### includes(),startsWith()和endsWith()\n传统上，JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。\n\n- `includes(searchString[, position])`：返回*布尔值*，表示是否找到了参数字符串。\n- `startsWith(searchString[, position])`：返回*布尔值*，表示参数字符串是否在原字符串的头部。\n- `endsWith(searchString[, position])`：返回*布尔值*，表示参数字符串是否在原字符串的尾部。\n\n```javascript\nlet s = 'Hello world!';\ns.startsWith('world', 6) // true\n```\n\n##### repeat(count)\n`repeat`方法返回一个*新字符串*，表示将原字符串重复n次。\n参数如果是小数则会被向下取整\n参数是负数或者Infinity，会报错。\n```javascript\n'x'.repeat(3) // \"xxx\"\n'hello'.repeat(2) // \"hellohello\"\n'na'.repeat(0) // \"\"\n\n'na'.repeat(2.9) // \"nana\"\n\n'na'.repeat(Infinity)\n// RangeError\n'na'.repeat(-1)\n// RangeError\n```\n\n如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0\n参数NaN等同于 0。\n\n```javascript\n'na'.repeat(-0.9) // \"\"\n'na'.repeat(NaN) // \"\"\n```\n如果参数是字符串，则会先转换成数字。\n\n##### padStart()，padEnd()\nES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。\n`targetLength`位必选参数，`padString`为可选参数。\n两个方法都返回一个在原字符串开头填充指定的填充字符串直到目标长度所形成的*新字符串*。\n - `padStart(targetLength [, padString])` 。另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的。\n - `padEnd(targetLength [, padString])` 。另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(右侧)应用的。\n \n 如果省略第二个参数，默认使用空格补全长度。\n ```javascript\n 'x'.padStart(4) // '   x'\n 'x'.padEnd(4) // 'x   '\n ```\n 两个方法最常用的场景是，为数值补全指定位数\n ```javascript\n '1'.padStart(10, '0') // \"0000000001\"\n '12'.padStart(10, '0') // \"0000000012\"\n '123456'.padStart(10, '0') // \"0000123456\"\n ```\n 另一使用场景是提示字符串格式。(其实并不常用)\n ```javascript\n '12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-MM-12\"\n '09-12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-09-12\"\n ```\n ##### trimStart()，trimEnd()\n ES2019 对字符串实例新增了`trimStart()`和`trimEnd()`这两个方法，它们的行为与`trim()`一致，`trimStart()`消除字符串头部的空格，`trimEnd()`消除尾部的空格。\n 它们返回的都是新字符串，*不会修改原始字符串*。\n \n 除了空格键，这两个方法对字符串头部（或尾部）的 tab 键、换行符等不可见的空白符号也有效。\n \n 浏览器还部署了额外的两个方法，`trimLeft()`是`trimStart()`的别名，`trimRight()`是`trimEnd()`的别名。\n ##### matchAll()\n matchAll()方法返回一个正则表达式在当前字符串的所有匹配(暂时不理解，正则相关需另起一章)\n \n \n ##### 最后整理的的零碎小东西\n 1. `Math.max()和Math.min()`\n这两个方法在ES6中改进了，原先不允许传入数组，ES6之后可支持数组。\n早前如果想要用这两个方法得出数组的最大和最小值，需要这样写：\n```\nvar values = [12, 15, 0, 20, -1];\nvar max = Math.max.apply(Math, values);// 20\n```\n但是在ES6中我们可以这样写：\n用于ES6使用了展开运算符“...”,JavaScript引擎读取后会将参数数组分割为各自独立的参数并依次传入：\n```\nlet values = [12, 15, 0, 20, -1];\nlet max1 = Math.max(...values);//20\nlet min1 = Math.min(...values);//-1\nlet max2 = Math.max(...values, 100)//100\n\n```\n","slug":"es6-notes","published":1,"updated":"2019-10-15T07:31:41.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tewmv600062c7ktsilauy3","content":"<h4 id=\"变量的解构赋值\"><a class=\"header-anchor\" href=\"#变量的解构赋值\">¶</a>变量的解构赋值</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x, y&#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, undefined]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [undefined, undefined]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"字符串扩展\"><a class=\"header-anchor\" href=\"#字符串扩展\">¶</a>字符串扩展</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"built_in\">String</span>.fromCodePoint(<span class=\"number\">0x20BB7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; text.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(text[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \" \"</span></span><br><span class=\"line\"><span class=\"comment\">// \" \"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> text) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"𠮷\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串-string-实例方法\"><a class=\"header-anchor\" href=\"#字符串-string-实例方法\">¶</a>字符串(String)实例方法</h4>\n<h5 id=\"includes-startswith-和endswith\"><a class=\"header-anchor\" href=\"#includes-startswith-和endswith\">¶</a>includes(),startsWith()和endsWith()</h5>\n<p>传统上，JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。</p>\n<ul>\n<li><code>includes(searchString[, position])</code>：返回<em>布尔值</em>，表示是否找到了参数字符串。</li>\n<li><code>startsWith(searchString[, position])</code>：返回<em>布尔值</em>，表示参数字符串是否在原字符串的头部。</li>\n<li><code>endsWith(searchString[, position])</code>：返回<em>布尔值</em>，表示参数字符串是否在原字符串的尾部。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\">s.startsWith(<span class=\"string\">'world'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"repeat-count\"><a class=\"header-anchor\" href=\"#repeat-count\">¶</a>repeat(count)</h5>\n<p><code>repeat</code>方法返回一个<em>新字符串</em>，表示将原字符串重复n次。<br>\n参数如果是小数则会被向下取整<br>\n参数是负数或者Infinity，会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.repeat(<span class=\"number\">3</span>) <span class=\"comment\">// \"xxx\"</span></span><br><span class=\"line\"><span class=\"string\">'hello'</span>.repeat(<span class=\"number\">2</span>) <span class=\"comment\">// \"hellohello\"</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">0</span>) <span class=\"comment\">// \"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">2.9</span>) <span class=\"comment\">// \"nana\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"literal\">Infinity</span>)</span><br><span class=\"line\"><span class=\"comment\">// RangeError</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"comment\">// RangeError</span></span><br></pre></td></tr></table></figure>\n<p>如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0<br>\n参数NaN等同于 0。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">-0.9</span>) <span class=\"comment\">// \"\"</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"literal\">NaN</span>) <span class=\"comment\">// \"\"</span></span><br></pre></td></tr></table></figure>\n<p>如果参数是字符串，则会先转换成数字。</p>\n<h5 id=\"padstart-padend\"><a class=\"header-anchor\" href=\"#padstart-padend\">¶</a>padStart()，padEnd()</h5>\n<p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。<br>\n<code>targetLength</code>位必选参数，<code>padString</code>为可选参数。<br>\n两个方法都返回一个在原字符串开头填充指定的填充字符串直到目标长度所形成的<em>新字符串</em>。</p>\n<ul>\n<li><code>padStart(targetLength [, padString])</code> 。另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的。</li>\n<li><code>padEnd(targetLength [, padString])</code> 。另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(右侧)应用的。</li>\n</ul>\n<p>如果省略第二个参数，默认使用空格补全长度。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">4</span>) <span class=\"comment\">// '   x'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">4</span>) <span class=\"comment\">// 'x   '</span></span><br></pre></td></tr></table></figure>\n<p>两个方法最常用的场景是，为数值补全指定位数</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'1'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000001\"</span></span><br><span class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000012\"</span></span><br><span class=\"line\"><span class=\"string\">'123456'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000123456\"</span></span><br></pre></td></tr></table></figure>\n<p>另一使用场景是提示字符串格式。(其实并不常用)</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-MM-12\"</span></span><br><span class=\"line\"><span class=\"string\">'09-12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-09-12\"</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"trimstart-trimend\"><a class=\"header-anchor\" href=\"#trimstart-trimend\">¶</a>trimStart()，trimEnd()</h5>\n<p>ES2019 对字符串实例新增了<code>trimStart()</code>和<code>trimEnd()</code>这两个方法，它们的行为与<code>trim()</code>一致，<code>trimStart()</code>消除字符串头部的空格，<code>trimEnd()</code>消除尾部的空格。<br>\n它们返回的都是新字符串，<em>不会修改原始字符串</em>。</p>\n<p>除了空格键，这两个方法对字符串头部（或尾部）的 tab 键、换行符等不可见的空白符号也有效。</p>\n<p>浏览器还部署了额外的两个方法，<code>trimLeft()</code>是<code>trimStart()</code>的别名，<code>trimRight()</code>是<code>trimEnd()</code>的别名。</p>\n<h5 id=\"matchall\"><a class=\"header-anchor\" href=\"#matchall\">¶</a>matchAll()</h5>\n<p>matchAll()方法返回一个正则表达式在当前字符串的所有匹配(暂时不理解，正则相关需另起一章)</p>\n<h5 id=\"最后整理的的零碎小东西\"><a class=\"header-anchor\" href=\"#最后整理的的零碎小东西\">¶</a>最后整理的的零碎小东西</h5>\n<ol>\n<li><code>Math.max()和Math.min()</code><br>\n这两个方法在ES6中改进了，原先不允许传入数组，ES6之后可支持数组。<br>\n早前如果想要用这两个方法得出数组的最大和最小值，需要这样写：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var values = [12, 15, 0, 20, -1];</span><br><span class=\"line\">var max = Math.max.apply(Math, values);// 20</span><br></pre></td></tr></table></figure>\n<p>但是在ES6中我们可以这样写：<br>\n用于ES6使用了展开运算符“…”,JavaScript引擎读取后会将参数数组分割为各自独立的参数并依次传入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let values = [12, 15, 0, 20, -1];</span><br><span class=\"line\">let max1 = Math.max(...values);//20</span><br><span class=\"line\">let min1 = Math.min(...values);//-1</span><br><span class=\"line\">let max2 = Math.max(...values, 100)//100</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":2780,"excerpt":"<h4 id=\"变量的解构赋值\"><a class=\"header-anchor\" href=\"#变量的解构赋值\">¶</a>变量的解构赋值</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x, y&#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, undefined]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [undefined, undefined]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>","more":"<h4 id=\"字符串扩展\"><a class=\"header-anchor\" href=\"#字符串扩展\">¶</a>字符串扩展</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"built_in\">String</span>.fromCodePoint(<span class=\"number\">0x20BB7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; text.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(text[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \" \"</span></span><br><span class=\"line\"><span class=\"comment\">// \" \"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> text) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"𠮷\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串-string-实例方法\"><a class=\"header-anchor\" href=\"#字符串-string-实例方法\">¶</a>字符串(String)实例方法</h4>\n<h5 id=\"includes-startswith-和endswith\"><a class=\"header-anchor\" href=\"#includes-startswith-和endswith\">¶</a>includes(),startsWith()和endsWith()</h5>\n<p>传统上，JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。</p>\n<ul>\n<li><code>includes(searchString[, position])</code>：返回<em>布尔值</em>，表示是否找到了参数字符串。</li>\n<li><code>startsWith(searchString[, position])</code>：返回<em>布尔值</em>，表示参数字符串是否在原字符串的头部。</li>\n<li><code>endsWith(searchString[, position])</code>：返回<em>布尔值</em>，表示参数字符串是否在原字符串的尾部。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\">s.startsWith(<span class=\"string\">'world'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"repeat-count\"><a class=\"header-anchor\" href=\"#repeat-count\">¶</a>repeat(count)</h5>\n<p><code>repeat</code>方法返回一个<em>新字符串</em>，表示将原字符串重复n次。<br>\n参数如果是小数则会被向下取整<br>\n参数是负数或者Infinity，会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.repeat(<span class=\"number\">3</span>) <span class=\"comment\">// \"xxx\"</span></span><br><span class=\"line\"><span class=\"string\">'hello'</span>.repeat(<span class=\"number\">2</span>) <span class=\"comment\">// \"hellohello\"</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">0</span>) <span class=\"comment\">// \"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">2.9</span>) <span class=\"comment\">// \"nana\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"literal\">Infinity</span>)</span><br><span class=\"line\"><span class=\"comment\">// RangeError</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"comment\">// RangeError</span></span><br></pre></td></tr></table></figure>\n<p>如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0<br>\n参数NaN等同于 0。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">-0.9</span>) <span class=\"comment\">// \"\"</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"literal\">NaN</span>) <span class=\"comment\">// \"\"</span></span><br></pre></td></tr></table></figure>\n<p>如果参数是字符串，则会先转换成数字。</p>\n<h5 id=\"padstart-padend\"><a class=\"header-anchor\" href=\"#padstart-padend\">¶</a>padStart()，padEnd()</h5>\n<p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。<br>\n<code>targetLength</code>位必选参数，<code>padString</code>为可选参数。<br>\n两个方法都返回一个在原字符串开头填充指定的填充字符串直到目标长度所形成的<em>新字符串</em>。</p>\n<ul>\n<li><code>padStart(targetLength [, padString])</code> 。另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的。</li>\n<li><code>padEnd(targetLength [, padString])</code> 。另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(右侧)应用的。</li>\n</ul>\n<p>如果省略第二个参数，默认使用空格补全长度。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">4</span>) <span class=\"comment\">// '   x'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">4</span>) <span class=\"comment\">// 'x   '</span></span><br></pre></td></tr></table></figure>\n<p>两个方法最常用的场景是，为数值补全指定位数</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'1'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000001\"</span></span><br><span class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000012\"</span></span><br><span class=\"line\"><span class=\"string\">'123456'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000123456\"</span></span><br></pre></td></tr></table></figure>\n<p>另一使用场景是提示字符串格式。(其实并不常用)</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-MM-12\"</span></span><br><span class=\"line\"><span class=\"string\">'09-12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-09-12\"</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"trimstart-trimend\"><a class=\"header-anchor\" href=\"#trimstart-trimend\">¶</a>trimStart()，trimEnd()</h5>\n<p>ES2019 对字符串实例新增了<code>trimStart()</code>和<code>trimEnd()</code>这两个方法，它们的行为与<code>trim()</code>一致，<code>trimStart()</code>消除字符串头部的空格，<code>trimEnd()</code>消除尾部的空格。<br>\n它们返回的都是新字符串，<em>不会修改原始字符串</em>。</p>\n<p>除了空格键，这两个方法对字符串头部（或尾部）的 tab 键、换行符等不可见的空白符号也有效。</p>\n<p>浏览器还部署了额外的两个方法，<code>trimLeft()</code>是<code>trimStart()</code>的别名，<code>trimRight()</code>是<code>trimEnd()</code>的别名。</p>\n<h5 id=\"matchall\"><a class=\"header-anchor\" href=\"#matchall\">¶</a>matchAll()</h5>\n<p>matchAll()方法返回一个正则表达式在当前字符串的所有匹配(暂时不理解，正则相关需另起一章)</p>\n<h5 id=\"最后整理的的零碎小东西\"><a class=\"header-anchor\" href=\"#最后整理的的零碎小东西\">¶</a>最后整理的的零碎小东西</h5>\n<ol>\n<li><code>Math.max()和Math.min()</code><br>\n这两个方法在ES6中改进了，原先不允许传入数组，ES6之后可支持数组。<br>\n早前如果想要用这两个方法得出数组的最大和最小值，需要这样写：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var values = [12, 15, 0, 20, -1];</span><br><span class=\"line\">var max = Math.max.apply(Math, values);// 20</span><br></pre></td></tr></table></figure>\n<p>但是在ES6中我们可以这样写：<br>\n用于ES6使用了展开运算符“…”,JavaScript引擎读取后会将参数数组分割为各自独立的参数并依次传入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let values = [12, 15, 0, 20, -1];</span><br><span class=\"line\">let max1 = Math.max(...values);//20</span><br><span class=\"line\">let min1 = Math.min(...values);//-1</span><br><span class=\"line\">let max2 = Math.max(...values, 100)//100</span><br></pre></td></tr></table></figure>"},{"title":"First Blog","_content":"记录博客配置的全过程。\n <!-- more -->\n#### 前置准备\n1. node.js和npm\n2. git\n\n#### 安装HEXO\n```\n$ npm install -g hexo-cli  \n$ npm install hexo-server --save\n```\n#### 新建项目并运行\n\n```\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo server\n```\n至此博客项目新建完成\n\n#### 更换主题\n1. 找到喜欢的主题的github地址\n```\n\tcd blog\n\tgit clone https://github.com/theme-next/hexo-theme-next themes/NewThemeName\n\tcd themes/NewThemeName\n\tgit pull \n```\n\t\n2. 主题修改配置\n修改blog目录下的 _config.yml ： theme: NewThemeName\n\n\n#### 配置GitHub\n1. 申请一个github账号且完成邮箱验证\n2. 新建Repository(仓库)\n3. 新仓库的名称命名格式[^1]：\n```\n用户名.github.io\n```\n[^1]: 名称后缀是固定的，不可更改。当配置完成后在github访问域名时，如进去的页面显示404，解决的方法为：①配置个人域名②仓库的名称改为github的用户名\n4. 配置git信息\n```\ngit config --global user.name\"这里是你申请Github账号时的name\"\ngit config --global user.email\"这里是你申请Github账号时的邮箱\"\n```\n5. 部署。进入blog目录下,编辑 _config.yml，把下面的your_username换成你的github用户名，注意冒号后面有一空格。\n```\ndeploy:\n    type: git\n    repo: https://github.com/your_username/your_username.github.io.git\n    branch: master\n```\n#### 部署代码到Github\n```\n$ hexo clean // 清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n$ hexo d -g // 生成静态文件并部署\n```\n#### 发布新文章\n新建文章推荐使用命令行执行<code>hexo n \"newFileName\"</code>，也可直接编辑器打开项目，在*source/_posts*目录下新建.md文章\n\n生成静态文件: <code>hexo g</code>\n提交到github: <code>hexo d</code>\n\n####  添加版权说明\n在*themes\\hiker\\layout\\_partial新建文件copyright.ejs*\n打开*copyright.ejs*,添加一下内容。\n```html\n<div>\n        <ul class=\"post-copyright\">\n          <li class=\"post-copyright-author\">\n          <strong><%= __('copyright.author') %> </strong><%= config.author%></a>\n          </li>\n          <li class=\"post-copyright-link\">\n          <strong><%= __('copyright.link') %> </strong>\n          <a href=\"<%- config.root %><%- post.path %>\" target=\"_blank\" title=\"<%= post.title %>\"><%- config.url %>/<%- post.path %></a>\n          </li>\n          <li class=\"post-copyright-license\">\n            <strong><%= __('copyright.license_title') %>  </strong>\n            <%= __('copyright.left_license_content') %><a rel=\"license\" href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\" title=\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\">CC BY-NC-ND 4.0</a>\n            <%= __('copyright.right_license_content') %>\n          </li>\n        </ul>\n      <div>\n```\n\t\n打开*themes\\hiker\\layout\\_partial\\article.ejs*添加一下内容,位置介于*donate*和c*omment*之间\n\t\n```html\n\t<% if (!index && theme.donate.enable){ %>\n\t        <%- partial('donate') %>\n\t      <% } %>\n\t       <!-- 要添加的内容 -->\n\t      <% if (!index && theme.copyright.enable){ %>\n\t      <%- partial('copyright') %>\n\t      <% } %>\n\t      <!---->\n\t      <% if (!index && post.comments && (theme.gentie_productKey || theme.duoshuo_shortname || theme.disqus_shortname || theme.uyan_uid || theme.wumii || theme.livere_shortname)){ %>\n\t        <%- partial('comment') %>\n\t      <% } %>\n```\n\t\n修改*themes\\hiker\\source\\css\\_partial\\article.styl*,在末端添加以下内容。\n\t\n```css\n\t.post-copyright {\n\t    margin: 2em 0 0;\n\t    padding: 0.5em 1em;\n\t    border-left: 3px solid #FF1700;\n\t    background-color: #F9F9F9;\n\t    list-style: none;\n\t}\n\t\n\t.post-copyright li {\n\t    line-height: 30px;\n\t}\n```\n在*themes\\hiker\\languages*中,找到你应用的语言文件,例如zh-TW,打开并添加以下内容。\n```yml\ncopyright:\n    author: \"作者: \"\n    link: \"文章连结: \"\n    license_title: \"版权声明: \"\n    left_license_content: \"本网志所有文章除特别声明外,均采用 \"\n    right_license_content: \"许可协议。转载请注明出处!\"\n```\n打开*themes\\hiker\\_config.yml*,添加以下内容。\n```yml\n#版权信息\ncopyright:\n    enable: true\n```\n\n\n#### markdown解析器替换\nhexo自带的markdown解析器为GFM风格，与标准的markdown语法有些许不同且支持的语法较少，往往无法满足更专业的需求。\nhexo-renderer-markdown-it 是一款用于 Markdown 解析和渲染的插件。\n- 用于替换 Hexo 默认自带的 Markdown 渲染器。\n- 提供了更丰富的 Markdown 解析和渲染。\n\n**首先请确保以下操作是在博客项目的根目录进行**\n```\nnpm un hexo-renderer-marked --save // 卸载 Hexo 默认自带的 Markdown 渲染器\nnpm i hexo-renderer-markdown-it --save // 安装 hexo-renderer-markdown-it 插件\n```\n打开根目录下的_config.yml\n```yml\n# Markdown-it config\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n  plugins:\n    - markdown-it-abbr\n    - markdown-it-footnote\n    - markdown-it-ins\n    - markdown-it-sub\n    - markdown-it-sup\n  anchors:\n    level: 2\n    collisionSuffix: 'v'\n    permalink: true\n    permalinkClass: header-anchor\n    permalinkSymbol: ¶\n```","source":"_posts/first-blog.md","raw":"---\ntitle: First Blog\ntags: 配置\ncategories: HEXO\n---\n记录博客配置的全过程。\n <!-- more -->\n#### 前置准备\n1. node.js和npm\n2. git\n\n#### 安装HEXO\n```\n$ npm install -g hexo-cli  \n$ npm install hexo-server --save\n```\n#### 新建项目并运行\n\n```\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo server\n```\n至此博客项目新建完成\n\n#### 更换主题\n1. 找到喜欢的主题的github地址\n```\n\tcd blog\n\tgit clone https://github.com/theme-next/hexo-theme-next themes/NewThemeName\n\tcd themes/NewThemeName\n\tgit pull \n```\n\t\n2. 主题修改配置\n修改blog目录下的 _config.yml ： theme: NewThemeName\n\n\n#### 配置GitHub\n1. 申请一个github账号且完成邮箱验证\n2. 新建Repository(仓库)\n3. 新仓库的名称命名格式[^1]：\n```\n用户名.github.io\n```\n[^1]: 名称后缀是固定的，不可更改。当配置完成后在github访问域名时，如进去的页面显示404，解决的方法为：①配置个人域名②仓库的名称改为github的用户名\n4. 配置git信息\n```\ngit config --global user.name\"这里是你申请Github账号时的name\"\ngit config --global user.email\"这里是你申请Github账号时的邮箱\"\n```\n5. 部署。进入blog目录下,编辑 _config.yml，把下面的your_username换成你的github用户名，注意冒号后面有一空格。\n```\ndeploy:\n    type: git\n    repo: https://github.com/your_username/your_username.github.io.git\n    branch: master\n```\n#### 部署代码到Github\n```\n$ hexo clean // 清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n$ hexo d -g // 生成静态文件并部署\n```\n#### 发布新文章\n新建文章推荐使用命令行执行<code>hexo n \"newFileName\"</code>，也可直接编辑器打开项目，在*source/_posts*目录下新建.md文章\n\n生成静态文件: <code>hexo g</code>\n提交到github: <code>hexo d</code>\n\n####  添加版权说明\n在*themes\\hiker\\layout\\_partial新建文件copyright.ejs*\n打开*copyright.ejs*,添加一下内容。\n```html\n<div>\n        <ul class=\"post-copyright\">\n          <li class=\"post-copyright-author\">\n          <strong><%= __('copyright.author') %> </strong><%= config.author%></a>\n          </li>\n          <li class=\"post-copyright-link\">\n          <strong><%= __('copyright.link') %> </strong>\n          <a href=\"<%- config.root %><%- post.path %>\" target=\"_blank\" title=\"<%= post.title %>\"><%- config.url %>/<%- post.path %></a>\n          </li>\n          <li class=\"post-copyright-license\">\n            <strong><%= __('copyright.license_title') %>  </strong>\n            <%= __('copyright.left_license_content') %><a rel=\"license\" href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\" title=\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\">CC BY-NC-ND 4.0</a>\n            <%= __('copyright.right_license_content') %>\n          </li>\n        </ul>\n      <div>\n```\n\t\n打开*themes\\hiker\\layout\\_partial\\article.ejs*添加一下内容,位置介于*donate*和c*omment*之间\n\t\n```html\n\t<% if (!index && theme.donate.enable){ %>\n\t        <%- partial('donate') %>\n\t      <% } %>\n\t       <!-- 要添加的内容 -->\n\t      <% if (!index && theme.copyright.enable){ %>\n\t      <%- partial('copyright') %>\n\t      <% } %>\n\t      <!---->\n\t      <% if (!index && post.comments && (theme.gentie_productKey || theme.duoshuo_shortname || theme.disqus_shortname || theme.uyan_uid || theme.wumii || theme.livere_shortname)){ %>\n\t        <%- partial('comment') %>\n\t      <% } %>\n```\n\t\n修改*themes\\hiker\\source\\css\\_partial\\article.styl*,在末端添加以下内容。\n\t\n```css\n\t.post-copyright {\n\t    margin: 2em 0 0;\n\t    padding: 0.5em 1em;\n\t    border-left: 3px solid #FF1700;\n\t    background-color: #F9F9F9;\n\t    list-style: none;\n\t}\n\t\n\t.post-copyright li {\n\t    line-height: 30px;\n\t}\n```\n在*themes\\hiker\\languages*中,找到你应用的语言文件,例如zh-TW,打开并添加以下内容。\n```yml\ncopyright:\n    author: \"作者: \"\n    link: \"文章连结: \"\n    license_title: \"版权声明: \"\n    left_license_content: \"本网志所有文章除特别声明外,均采用 \"\n    right_license_content: \"许可协议。转载请注明出处!\"\n```\n打开*themes\\hiker\\_config.yml*,添加以下内容。\n```yml\n#版权信息\ncopyright:\n    enable: true\n```\n\n\n#### markdown解析器替换\nhexo自带的markdown解析器为GFM风格，与标准的markdown语法有些许不同且支持的语法较少，往往无法满足更专业的需求。\nhexo-renderer-markdown-it 是一款用于 Markdown 解析和渲染的插件。\n- 用于替换 Hexo 默认自带的 Markdown 渲染器。\n- 提供了更丰富的 Markdown 解析和渲染。\n\n**首先请确保以下操作是在博客项目的根目录进行**\n```\nnpm un hexo-renderer-marked --save // 卸载 Hexo 默认自带的 Markdown 渲染器\nnpm i hexo-renderer-markdown-it --save // 安装 hexo-renderer-markdown-it 插件\n```\n打开根目录下的_config.yml\n```yml\n# Markdown-it config\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n  plugins:\n    - markdown-it-abbr\n    - markdown-it-footnote\n    - markdown-it-ins\n    - markdown-it-sub\n    - markdown-it-sup\n  anchors:\n    level: 2\n    collisionSuffix: 'v'\n    permalink: true\n    permalinkClass: header-anchor\n    permalinkSymbol: ¶\n```","slug":"first-blog","published":1,"date":"2019-10-08T06:05:01.500Z","updated":"2019-10-09T08:43:18.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tewmv800072c7ks01y86qs","content":"<p>记录博客配置的全过程。</p>\n <a id=\"more\"></a>\n<h4 id=\"前置准备\"><a class=\"header-anchor\" href=\"#前置准备\">¶</a>前置准备</h4>\n<ol>\n<li>node.js和npm</li>\n<li>git</li>\n</ol>\n<h4 id=\"安装hexo\"><a class=\"header-anchor\" href=\"#安装hexo\">¶</a>安装HEXO</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli  </span><br><span class=\"line\">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n<h4 id=\"新建项目并运行\"><a class=\"header-anchor\" href=\"#新建项目并运行\">¶</a>新建项目并运行</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ cd blog</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>至此博客项目新建完成</p>\n<h4 id=\"更换主题\"><a class=\"header-anchor\" href=\"#更换主题\">¶</a>更换主题</h4>\n<ol>\n<li>找到喜欢的主题的github地址</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">git clone https://github.com/theme-next/hexo-theme-next themes/NewThemeName</span><br><span class=\"line\">cd themes/NewThemeName</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>主题修改配置<br>\n修改blog目录下的 _config.yml ： theme: NewThemeName</li>\n</ol>\n<h4 id=\"配置github\"><a class=\"header-anchor\" href=\"#配置github\">¶</a>配置GitHub</h4>\n<ol>\n<li>申请一个github账号且完成邮箱验证</li>\n<li>新建Repository(仓库)</li>\n<li>新仓库的名称命名格式<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户名.github.io</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>配置git信息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name&quot;这里是你申请Github账号时的name&quot;</span><br><span class=\"line\">git config --global user.email&quot;这里是你申请Github账号时的邮箱&quot;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>部署。进入blog目录下,编辑 _config.yml，把下面的your_username换成你的github用户名，注意冒号后面有一空格。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: https://github.com/your_username/your_username.github.io.git</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure>\n<h4 id=\"部署代码到github\"><a class=\"header-anchor\" href=\"#部署代码到github\">¶</a>部署代码到Github</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean // 清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br><span class=\"line\">$ hexo d -g // 生成静态文件并部署</span><br></pre></td></tr></table></figure>\n<h4 id=\"发布新文章\"><a class=\"header-anchor\" href=\"#发布新文章\">¶</a>发布新文章</h4>\n<p>新建文章推荐使用命令行执行<code>hexo n “newFileName”</code>，也可直接编辑器打开项目，在<em>source/_posts</em>目录下新建.md文章</p>\n<p>生成静态文件: <code>hexo g</code><br>\n提交到github: <code>hexo d</code></p>\n<h4 id=\"添加版权说明\"><a class=\"header-anchor\" href=\"#添加版权说明\">¶</a>添加版权说明</h4>\n<p>在<em>themes\\hiker\\layout_partial新建文件copyright.ejs</em><br>\n打开<em>copyright.ejs</em>,添加一下内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post-copyright\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post-copyright-author\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">__</span>('<span class=\"attr\">copyright.author</span>') %&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">config.author</span>%&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post-copyright-link\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">__</span>('<span class=\"attr\">copyright.link</span>') %&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%- config.root %&gt;&lt;%- post.path %&gt;\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&lt;%= post.title %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">config.url</span> %&gt;</span>/<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">post.path</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post-copyright-license\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">__</span>('<span class=\"attr\">copyright.license_title</span>') %&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">__</span>('<span class=\"attr\">copyright.left_license_content</span>') %&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"license\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://creativecommons.org/licenses/by-nc-nd/4.0/\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\"</span>&gt;</span>CC BY-NC-ND 4.0<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">__</span>('<span class=\"attr\">copyright.right_license_content</span>') %&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>打开<em>themes\\hiker\\layout_partial\\article.ejs</em>添加一下内容,位置介于<em>donate</em>和c<em>omment</em>之间</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (!<span class=\"attr\">index</span> &amp;&amp; <span class=\"attr\">theme.donate.enable</span>)&#123; %&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">donate</span>') %&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!-- 要添加的内容 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (!<span class=\"attr\">index</span> &amp;&amp; <span class=\"attr\">theme.copyright.enable</span>)&#123; %&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">copyright</span>') %&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!----&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (!<span class=\"attr\">index</span> &amp;&amp; <span class=\"attr\">post.comments</span> &amp;&amp; (<span class=\"attr\">theme.gentie_productKey</span> || <span class=\"attr\">theme.duoshuo_shortname</span> || <span class=\"attr\">theme.disqus_shortname</span> || <span class=\"attr\">theme.uyan_uid</span> || <span class=\"attr\">theme.wumii</span> || <span class=\"attr\">theme.livere_shortname</span>))&#123; %&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">comment</span>') %&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改<em>themes\\hiker\\source\\css_partial\\article.styl</em>,在末端添加以下内容。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.post-copyright</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">2em</span> <span class=\"number\">0</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.5em</span> <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#FF1700</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#F9F9F9</span>;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.post-copyright</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<em>themes\\hiker\\languages</em>中,找到你应用的语言文件,例如zh-TW,打开并添加以下内容。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">copyright:</span></span><br><span class=\"line\"><span class=\"attr\">    author:</span> <span class=\"string\">\"作者: \"</span></span><br><span class=\"line\"><span class=\"attr\">    link:</span> <span class=\"string\">\"文章连结: \"</span></span><br><span class=\"line\"><span class=\"attr\">    license_title:</span> <span class=\"string\">\"版权声明: \"</span></span><br><span class=\"line\"><span class=\"attr\">    left_license_content:</span> <span class=\"string\">\"本网志所有文章除特别声明外,均采用 \"</span></span><br><span class=\"line\"><span class=\"attr\">    right_license_content:</span> <span class=\"string\">\"许可协议。转载请注明出处!\"</span></span><br></pre></td></tr></table></figure>\n<p>打开<em>themes\\hiker_config.yml</em>,添加以下内容。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#版权信息</span></span><br><span class=\"line\"><span class=\"attr\">copyright:</span></span><br><span class=\"line\"><span class=\"attr\">    enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"markdown解析器替换\"><a class=\"header-anchor\" href=\"#markdown解析器替换\">¶</a>markdown解析器替换</h4>\n<p>hexo自带的markdown解析器为GFM风格，与标准的markdown语法有些许不同且支持的语法较少，往往无法满足更专业的需求。<br>\nhexo-renderer-markdown-it 是一款用于 Markdown 解析和渲染的插件。</p>\n<ul>\n<li>用于替换 Hexo 默认自带的 Markdown 渲染器。</li>\n<li>提供了更丰富的 Markdown 解析和渲染。</li>\n</ul>\n<p><strong>首先请确保以下操作是在博客项目的根目录进行</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm un hexo-renderer-marked --save // 卸载 Hexo 默认自带的 Markdown 渲染器</span><br><span class=\"line\">npm i hexo-renderer-markdown-it --save // 安装 hexo-renderer-markdown-it 插件</span><br></pre></td></tr></table></figure>\n<p>打开根目录下的_config.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span></span><br><span class=\"line\"><span class=\"attr\">  plugins:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">markdown-it-abbr</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">markdown-it-footnote</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">markdown-it-ins</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">markdown-it-sub</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">markdown-it-sup</span></span><br><span class=\"line\"><span class=\"attr\">  anchors:</span></span><br><span class=\"line\"><span class=\"attr\">    level:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">    collisionSuffix:</span> <span class=\"string\">'v'</span></span><br><span class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    permalinkClass:</span> <span class=\"string\">header-anchor</span></span><br><span class=\"line\"><span class=\"attr\">    permalinkSymbol:</span> <span class=\"string\">¶</span></span><br></pre></td></tr></table></figure><hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>名称后缀是固定的，不可更改。当配置完成后在github访问域名时，如进去的页面显示404，解决的方法为：①配置个人域名②仓库的名称改为github的用户名 <a href=\"#fnref1\" class=\"footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>\n","site":{"data":{}},"length":4190,"excerpt":"<p>记录博客配置的全过程。</p>","more":"<h4 id=\"前置准备\"><a class=\"header-anchor\" href=\"#前置准备\">¶</a>前置准备</h4>\n<ol>\n<li>node.js和npm</li>\n<li>git</li>\n</ol>\n<h4 id=\"安装hexo\"><a class=\"header-anchor\" href=\"#安装hexo\">¶</a>安装HEXO</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli  </span><br><span class=\"line\">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n<h4 id=\"新建项目并运行\"><a class=\"header-anchor\" href=\"#新建项目并运行\">¶</a>新建项目并运行</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ cd blog</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>至此博客项目新建完成</p>\n<h4 id=\"更换主题\"><a class=\"header-anchor\" href=\"#更换主题\">¶</a>更换主题</h4>\n<ol>\n<li>找到喜欢的主题的github地址</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">git clone https://github.com/theme-next/hexo-theme-next themes/NewThemeName</span><br><span class=\"line\">cd themes/NewThemeName</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>主题修改配置<br>\n修改blog目录下的 _config.yml ： theme: NewThemeName</li>\n</ol>\n<h4 id=\"配置github\"><a class=\"header-anchor\" href=\"#配置github\">¶</a>配置GitHub</h4>\n<ol>\n<li>申请一个github账号且完成邮箱验证</li>\n<li>新建Repository(仓库)</li>\n<li>新仓库的名称命名格式<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户名.github.io</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>配置git信息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name&quot;这里是你申请Github账号时的name&quot;</span><br><span class=\"line\">git config --global user.email&quot;这里是你申请Github账号时的邮箱&quot;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>部署。进入blog目录下,编辑 _config.yml，把下面的your_username换成你的github用户名，注意冒号后面有一空格。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: https://github.com/your_username/your_username.github.io.git</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure>\n<h4 id=\"部署代码到github\"><a class=\"header-anchor\" href=\"#部署代码到github\">¶</a>部署代码到Github</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean // 清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br><span class=\"line\">$ hexo d -g // 生成静态文件并部署</span><br></pre></td></tr></table></figure>\n<h4 id=\"发布新文章\"><a class=\"header-anchor\" href=\"#发布新文章\">¶</a>发布新文章</h4>\n<p>新建文章推荐使用命令行执行<code>hexo n “newFileName”</code>，也可直接编辑器打开项目，在<em>source/_posts</em>目录下新建.md文章</p>\n<p>生成静态文件: <code>hexo g</code><br>\n提交到github: <code>hexo d</code></p>\n<h4 id=\"添加版权说明\"><a class=\"header-anchor\" href=\"#添加版权说明\">¶</a>添加版权说明</h4>\n<p>在<em>themes\\hiker\\layout_partial新建文件copyright.ejs</em><br>\n打开<em>copyright.ejs</em>,添加一下内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post-copyright\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post-copyright-author\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">__</span>('<span class=\"attr\">copyright.author</span>') %&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">config.author</span>%&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post-copyright-link\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">__</span>('<span class=\"attr\">copyright.link</span>') %&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%- config.root %&gt;&lt;%- post.path %&gt;\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&lt;%= post.title %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">config.url</span> %&gt;</span>/<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">post.path</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post-copyright-license\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">__</span>('<span class=\"attr\">copyright.license_title</span>') %&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">__</span>('<span class=\"attr\">copyright.left_license_content</span>') %&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"license\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://creativecommons.org/licenses/by-nc-nd/4.0/\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\"</span>&gt;</span>CC BY-NC-ND 4.0<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">__</span>('<span class=\"attr\">copyright.right_license_content</span>') %&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>打开<em>themes\\hiker\\layout_partial\\article.ejs</em>添加一下内容,位置介于<em>donate</em>和c<em>omment</em>之间</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (!<span class=\"attr\">index</span> &amp;&amp; <span class=\"attr\">theme.donate.enable</span>)&#123; %&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">donate</span>') %&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!-- 要添加的内容 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (!<span class=\"attr\">index</span> &amp;&amp; <span class=\"attr\">theme.copyright.enable</span>)&#123; %&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">copyright</span>') %&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!----&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (!<span class=\"attr\">index</span> &amp;&amp; <span class=\"attr\">post.comments</span> &amp;&amp; (<span class=\"attr\">theme.gentie_productKey</span> || <span class=\"attr\">theme.duoshuo_shortname</span> || <span class=\"attr\">theme.disqus_shortname</span> || <span class=\"attr\">theme.uyan_uid</span> || <span class=\"attr\">theme.wumii</span> || <span class=\"attr\">theme.livere_shortname</span>))&#123; %&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">comment</span>') %&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改<em>themes\\hiker\\source\\css_partial\\article.styl</em>,在末端添加以下内容。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.post-copyright</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">2em</span> <span class=\"number\">0</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.5em</span> <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#FF1700</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#F9F9F9</span>;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.post-copyright</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<em>themes\\hiker\\languages</em>中,找到你应用的语言文件,例如zh-TW,打开并添加以下内容。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">copyright:</span></span><br><span class=\"line\"><span class=\"attr\">    author:</span> <span class=\"string\">\"作者: \"</span></span><br><span class=\"line\"><span class=\"attr\">    link:</span> <span class=\"string\">\"文章连结: \"</span></span><br><span class=\"line\"><span class=\"attr\">    license_title:</span> <span class=\"string\">\"版权声明: \"</span></span><br><span class=\"line\"><span class=\"attr\">    left_license_content:</span> <span class=\"string\">\"本网志所有文章除特别声明外,均采用 \"</span></span><br><span class=\"line\"><span class=\"attr\">    right_license_content:</span> <span class=\"string\">\"许可协议。转载请注明出处!\"</span></span><br></pre></td></tr></table></figure>\n<p>打开<em>themes\\hiker_config.yml</em>,添加以下内容。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#版权信息</span></span><br><span class=\"line\"><span class=\"attr\">copyright:</span></span><br><span class=\"line\"><span class=\"attr\">    enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"markdown解析器替换\"><a class=\"header-anchor\" href=\"#markdown解析器替换\">¶</a>markdown解析器替换</h4>\n<p>hexo自带的markdown解析器为GFM风格，与标准的markdown语法有些许不同且支持的语法较少，往往无法满足更专业的需求。<br>\nhexo-renderer-markdown-it 是一款用于 Markdown 解析和渲染的插件。</p>\n<ul>\n<li>用于替换 Hexo 默认自带的 Markdown 渲染器。</li>\n<li>提供了更丰富的 Markdown 解析和渲染。</li>\n</ul>\n<p><strong>首先请确保以下操作是在博客项目的根目录进行</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm un hexo-renderer-marked --save // 卸载 Hexo 默认自带的 Markdown 渲染器</span><br><span class=\"line\">npm i hexo-renderer-markdown-it --save // 安装 hexo-renderer-markdown-it 插件</span><br></pre></td></tr></table></figure>\n<p>打开根目录下的_config.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span></span><br><span class=\"line\"><span class=\"attr\">  plugins:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">markdown-it-abbr</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">markdown-it-footnote</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">markdown-it-ins</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">markdown-it-sub</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">markdown-it-sup</span></span><br><span class=\"line\"><span class=\"attr\">  anchors:</span></span><br><span class=\"line\"><span class=\"attr\">    level:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">    collisionSuffix:</span> <span class=\"string\">'v'</span></span><br><span class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    permalinkClass:</span> <span class=\"string\">header-anchor</span></span><br><span class=\"line\"><span class=\"attr\">    permalinkSymbol:</span> <span class=\"string\">¶</span></span><br></pre></td></tr></table></figure><hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>名称后缀是固定的，不可更改。当配置完成后在github访问域名时，如进去的页面显示404，解决的方法为：①配置个人域名②仓库的名称改为github的用户名 <a href=\"#fnref1\" class=\"footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!-- more -->\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories: 其他\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!-- more -->\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-10-08T03:05:56.589Z","updated":"2019-10-08T09:25:00.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tewmv900082c7kv2dt6tvv","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"header-anchor\" href=\"#quick-start\">¶</a>Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"header-anchor\" href=\"#create-a-new-post\">¶</a>Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"header-anchor\" href=\"#run-server\">¶</a>Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"header-anchor\" href=\"#generate-static-files\">¶</a>Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"header-anchor\" href=\"#deploy-to-remote-sites\">¶</a>Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"length":426,"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"header-anchor\" href=\"#quick-start\">¶</a>Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"header-anchor\" href=\"#create-a-new-post\">¶</a>Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>","more":"<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"header-anchor\" href=\"#run-server\">¶</a>Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"header-anchor\" href=\"#generate-static-files\">¶</a>Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"header-anchor\" href=\"#deploy-to-remote-sites\">¶</a>Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"面试问题总结","date":"2019-10-11T07:29:41.000Z","_content":"\n- Axios的特点有哪些\n1、在浏览器中发送 XMLHttpRequests 请求；\n2、在 node.js 中发送 http请求；\n3、基于 Promise 的 HTTP 请求客户端,支持 Promise API；\n4、拦截请求和响应；\n5、转换请求和响应数据；\n6、自动转换 JSON 数据；\n7、客户端支持保护安全免受 XSRF 攻击；\n<!-- more -->\n- vue-router有哪些导航钩子\n第一种：是全局导航钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截。\n第二种：组件内的钩子\n第三种：单独路由独享组件\n- 在beforeRouteEnter钩子函数里执行`console.log(this)`，其结果是？\n- vue生命周期钩子函数之beforeRouteEnter()和beforeRouteLeave()\n```javascript\nbeforeRouteEnter(to, form, next){\n\tconsole.log(this) // undefined\n\tnext(vm =>{\n\t\tconsole.log(vm) // vue实例\n\t})\n}\n```\n\n- vue生命周期各个阶段中this的值变化\n- vue-router原理\n- 深拷贝和浅拷贝\n- 解决跨域问题\n[vue解决跨域问题](https://segmentfault.com/a/1190000014396546?utm_source=tag-newest)\n\n","source":"_posts/interview.md","raw":"---\ntitle: 面试问题总结\ndate: 2019-10-11 15:29:41\ntags: 综合\n---\n\n- Axios的特点有哪些\n1、在浏览器中发送 XMLHttpRequests 请求；\n2、在 node.js 中发送 http请求；\n3、基于 Promise 的 HTTP 请求客户端,支持 Promise API；\n4、拦截请求和响应；\n5、转换请求和响应数据；\n6、自动转换 JSON 数据；\n7、客户端支持保护安全免受 XSRF 攻击；\n<!-- more -->\n- vue-router有哪些导航钩子\n第一种：是全局导航钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截。\n第二种：组件内的钩子\n第三种：单独路由独享组件\n- 在beforeRouteEnter钩子函数里执行`console.log(this)`，其结果是？\n- vue生命周期钩子函数之beforeRouteEnter()和beforeRouteLeave()\n```javascript\nbeforeRouteEnter(to, form, next){\n\tconsole.log(this) // undefined\n\tnext(vm =>{\n\t\tconsole.log(vm) // vue实例\n\t})\n}\n```\n\n- vue生命周期各个阶段中this的值变化\n- vue-router原理\n- 深拷贝和浅拷贝\n- 解决跨域问题\n[vue解决跨域问题](https://segmentfault.com/a/1190000014396546?utm_source=tag-newest)\n\n","slug":"interview","published":1,"updated":"2019-10-11T08:12:10.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tewmvb000c2c7kfa9nbn76","content":"<ul>\n<li>Axios的特点有哪些<br>\n1、在浏览器中发送 XMLHttpRequests 请求；<br>\n2、在 node.js 中发送 http请求；<br>\n3、基于 Promise 的 HTTP 请求客户端,支持 Promise API；<br>\n4、拦截请求和响应；<br>\n5、转换请求和响应数据；<br>\n6、自动转换 JSON 数据；<br>\n7、客户端支持保护安全免受 XSRF 攻击；</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>vue-router有哪些导航钩子<br>\n第一种：是全局导航钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截。<br>\n第二种：组件内的钩子<br>\n第三种：单独路由独享组件</li>\n<li>在beforeRouteEnter钩子函数里执行<code>console.log(this)</code>，其结果是？</li>\n<li>vue生命周期钩子函数之beforeRouteEnter()和beforeRouteLeave()</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouteEnter(to, form, next)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>) <span class=\"comment\">// undefined</span></span><br><span class=\"line\">\tnext(<span class=\"function\"><span class=\"params\">vm</span> =&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(vm) <span class=\"comment\">// vue实例</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>vue生命周期各个阶段中this的值变化</li>\n<li>vue-router原理</li>\n<li>深拷贝和浅拷贝</li>\n<li>解决跨域问题<br>\n<a href=\"https://segmentfault.com/a/1190000014396546?utm_source=tag-newest\" target=\"_blank\" rel=\"noopener\">vue解决跨域问题</a></li>\n</ul>\n","site":{"data":{}},"length":544,"excerpt":"<ul>\n<li>Axios的特点有哪些<br>\n1、在浏览器中发送 XMLHttpRequests 请求；<br>\n2、在 node.js 中发送 http请求；<br>\n3、基于 Promise 的 HTTP 请求客户端,支持 Promise API；<br>\n4、拦截请求和响应；<br>\n5、转换请求和响应数据；<br>\n6、自动转换 JSON 数据；<br>\n7、客户端支持保护安全免受 XSRF 攻击；</li>\n</ul>","more":"<ul>\n<li>vue-router有哪些导航钩子<br>\n第一种：是全局导航钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截。<br>\n第二种：组件内的钩子<br>\n第三种：单独路由独享组件</li>\n<li>在beforeRouteEnter钩子函数里执行<code>console.log(this)</code>，其结果是？</li>\n<li>vue生命周期钩子函数之beforeRouteEnter()和beforeRouteLeave()</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouteEnter(to, form, next)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>) <span class=\"comment\">// undefined</span></span><br><span class=\"line\">\tnext(<span class=\"function\"><span class=\"params\">vm</span> =&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(vm) <span class=\"comment\">// vue实例</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>vue生命周期各个阶段中this的值变化</li>\n<li>vue-router原理</li>\n<li>深拷贝和浅拷贝</li>\n<li>解决跨域问题<br>\n<a href=\"https://segmentfault.com/a/1190000014396546?utm_source=tag-newest\" target=\"_blank\" rel=\"noopener\">vue解决跨域问题</a></li>\n</ul>"},{"title":"HEXO更多配置","_content":"实际使用一个主题时，有很多常用的细节上的配置在主题初始时并不会设置好，需要手动找到配置文件中相对应的项进行设置，以目前我正在使用的NextT主题为例,记录下如何进行细节配置。\n<!-- more -->\n#### 显示语言设置\n#### 首页不显示全文\n在文章内需要截断的地方添加上标记\n```html\n首页会显示的text1111\n<!-- more -->\n在首页会隐藏的text22222\n```\n#### 首页出现菜单内容以及菜单内容对应路径文件\n\n#### 文章添加分类和tag\n在文章的开头指定配置tag和分类即可，如\n```yml\n---\ntags: 配置 // tag\ncategories: HEXO // 分类\n---\n```\n#### 文章插入图片\n把主页配置文件 *_config.yml* 里的 *post_asset_folder*这个选项设置为true\n在hexo的目录下执行<code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code>（需要等待一段时间）。\n完成安装后用<code>hexo n \"nnn\"</code>新建文章的时候会发现 *_posts* 目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面\n#### 修改样式和添加自定义样式\n打开文件： *根目录\\themes\\[themeName]\\source\\css\\_custom\\custom.styl*,在该文件中自定义样式\n#### 文章字数统计和预计阅读时长\n字数统计和预计阅读市场需要在两处进行配置\nnextT自带的字数统计工具是*hexo-symbols-count-time*，首先需要确认已安装\n```\nnpm install hexo-symbols-count-time --save // 安装hexo-symbols-count-time\n```\n**配置项修改**\n首先在博客的根目录下的配置文件 *_config.yml* 里配置以下内容\n```yml\nsymbols_count_time:\n #文章内是否显示\n  symbols: true\n  time: true\n # 网页底部是否显示\n  total_symbols: true\n  total_time: true\n```\n然后在主题的配置文件中配置以下内容,具体参数意义详见[hexo-symbols-count-time](https://github.com/theme-next/hexo-symbols-count-time)\n```yml\nsymbols_count_time:\n  separated_meta: true\n  #文章中的显示是否显示文字（本文字数|阅读时长） \n  item_text_post: true\n  #网页底部的显示是否显示文字（站点总字数|站点阅读时长） \n  item_text_total: false\n  # Average Word Length (chars count in word)\n  awl: 4\n  # Words Per Minute\n  wpm: 275\n```\n#### 评论，打赏，RSS功能\n#### 广告位(X\n#### 配置live2d宠物\n#### 文章首页完美隐藏\n下载hexo-generator-index2插件后卸载官方的插件hexo-generator-index\n```\n$ npm install hexo-generator-index2 --save\n$ npm uninstall hexo-generator-index --save\n```\n\n打开根目录的`_config.yml`，在末尾添加一下内容，注意空格和缩进\n```yml\n# index2 generator是否包含官方的hexo-generator-index，默认true（包含）\nindex2_include_index: true\nindex2_generator:\n\tper_page: 8\n\torder_by: -date\n\texclude:\n\t\t- tag hide\n\t\t- category hide\n```\n`exclude`:表示隐藏哪些内容，以上代码表示隐藏tag为hide和category(分类)为hide的文章\n\n[hexo-helper-live2d](https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md)","source":"_posts/more-settings.md","raw":"---\ntitle: HEXO更多配置\ntags: 配置\ncategories: HEXO\n---\n实际使用一个主题时，有很多常用的细节上的配置在主题初始时并不会设置好，需要手动找到配置文件中相对应的项进行设置，以目前我正在使用的NextT主题为例,记录下如何进行细节配置。\n<!-- more -->\n#### 显示语言设置\n#### 首页不显示全文\n在文章内需要截断的地方添加上标记\n```html\n首页会显示的text1111\n<!-- more -->\n在首页会隐藏的text22222\n```\n#### 首页出现菜单内容以及菜单内容对应路径文件\n\n#### 文章添加分类和tag\n在文章的开头指定配置tag和分类即可，如\n```yml\n---\ntags: 配置 // tag\ncategories: HEXO // 分类\n---\n```\n#### 文章插入图片\n把主页配置文件 *_config.yml* 里的 *post_asset_folder*这个选项设置为true\n在hexo的目录下执行<code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code>（需要等待一段时间）。\n完成安装后用<code>hexo n \"nnn\"</code>新建文章的时候会发现 *_posts* 目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面\n#### 修改样式和添加自定义样式\n打开文件： *根目录\\themes\\[themeName]\\source\\css\\_custom\\custom.styl*,在该文件中自定义样式\n#### 文章字数统计和预计阅读时长\n字数统计和预计阅读市场需要在两处进行配置\nnextT自带的字数统计工具是*hexo-symbols-count-time*，首先需要确认已安装\n```\nnpm install hexo-symbols-count-time --save // 安装hexo-symbols-count-time\n```\n**配置项修改**\n首先在博客的根目录下的配置文件 *_config.yml* 里配置以下内容\n```yml\nsymbols_count_time:\n #文章内是否显示\n  symbols: true\n  time: true\n # 网页底部是否显示\n  total_symbols: true\n  total_time: true\n```\n然后在主题的配置文件中配置以下内容,具体参数意义详见[hexo-symbols-count-time](https://github.com/theme-next/hexo-symbols-count-time)\n```yml\nsymbols_count_time:\n  separated_meta: true\n  #文章中的显示是否显示文字（本文字数|阅读时长） \n  item_text_post: true\n  #网页底部的显示是否显示文字（站点总字数|站点阅读时长） \n  item_text_total: false\n  # Average Word Length (chars count in word)\n  awl: 4\n  # Words Per Minute\n  wpm: 275\n```\n#### 评论，打赏，RSS功能\n#### 广告位(X\n#### 配置live2d宠物\n#### 文章首页完美隐藏\n下载hexo-generator-index2插件后卸载官方的插件hexo-generator-index\n```\n$ npm install hexo-generator-index2 --save\n$ npm uninstall hexo-generator-index --save\n```\n\n打开根目录的`_config.yml`，在末尾添加一下内容，注意空格和缩进\n```yml\n# index2 generator是否包含官方的hexo-generator-index，默认true（包含）\nindex2_include_index: true\nindex2_generator:\n\tper_page: 8\n\torder_by: -date\n\texclude:\n\t\t- tag hide\n\t\t- category hide\n```\n`exclude`:表示隐藏哪些内容，以上代码表示隐藏tag为hide和category(分类)为hide的文章\n\n[hexo-helper-live2d](https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md)","slug":"more-settings","published":1,"date":"2019-10-08T09:02:50.390Z","updated":"2019-10-14T02:38:28.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tewmvc000d2c7k1uo2bbaj","content":"<p>实际使用一个主题时，有很多常用的细节上的配置在主题初始时并不会设置好，需要手动找到配置文件中相对应的项进行设置，以目前我正在使用的NextT主题为例,记录下如何进行细节配置。</p>\n<a id=\"more\"></a>\n<h4 id=\"显示语言设置\"><a class=\"header-anchor\" href=\"#显示语言设置\">¶</a>显示语言设置</h4>\n<h4 id=\"首页不显示全文\"><a class=\"header-anchor\" href=\"#首页不显示全文\">¶</a>首页不显示全文</h4>\n<p>在文章内需要截断的地方添加上标记</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首页会显示的text1111</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- more --&gt;</span></span><br><span class=\"line\">在首页会隐藏的text22222</span><br></pre></td></tr></table></figure>\n<h4 id=\"首页出现菜单内容以及菜单内容对应路径文件\"><a class=\"header-anchor\" href=\"#首页出现菜单内容以及菜单内容对应路径文件\">¶</a>首页出现菜单内容以及菜单内容对应路径文件</h4>\n<h4 id=\"文章添加分类和tag\"><a class=\"header-anchor\" href=\"#文章添加分类和tag\">¶</a>文章添加分类和tag</h4>\n<p>在文章的开头指定配置tag和分类即可，如</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span> <span class=\"string\">配置</span> <span class=\"string\">//</span> <span class=\"string\">tag</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> <span class=\"string\">HEXO</span> <span class=\"string\">//</span> <span class=\"string\">分类</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"文章插入图片\"><a class=\"header-anchor\" href=\"#文章插入图片\">¶</a>文章插入图片</h4>\n<p>把主页配置文件 <em>_config.yml</em> 里的 <em>post_asset_folder</em>这个选项设置为true<br>\n在hexo的目录下执行<code>npm install <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"noopener\">https://github.com/CodeFalling/hexo-asset-image</a> --save</code>（需要等待一段时间）。<br>\n完成安装后用<code>hexo n &quot;nnn&quot;</code>新建文章的时候会发现 <em>_posts</em> 目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面</p>\n<h4 id=\"修改样式和添加自定义样式\"><a class=\"header-anchor\" href=\"#修改样式和添加自定义样式\">¶</a>修改样式和添加自定义样式</h4>\n<p>打开文件： <em>根目录\\themes[themeName]\\source\\css_custom\\custom.styl</em>,在该文件中自定义样式</p>\n<h4 id=\"文章字数统计和预计阅读时长\"><a class=\"header-anchor\" href=\"#文章字数统计和预计阅读时长\">¶</a>文章字数统计和预计阅读时长</h4>\n<p>字数统计和预计阅读市场需要在两处进行配置<br>\nnextT自带的字数统计工具是<em>hexo-symbols-count-time</em>，首先需要确认已安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-symbols-count-time --save // 安装hexo-symbols-count-time</span><br></pre></td></tr></table></figure>\n<p><strong>配置项修改</strong><br>\n首先在博客的根目录下的配置文件 <em>_config.yml</em> 里配置以下内容</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\"> <span class=\"comment\">#文章内是否显示</span></span><br><span class=\"line\"><span class=\"attr\">  symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> <span class=\"comment\"># 网页底部是否显示</span></span><br><span class=\"line\"><span class=\"attr\">  total_symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_time:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>然后在主题的配置文件中配置以下内容,具体参数意义详见<a href=\"https://github.com/theme-next/hexo-symbols-count-time\" target=\"_blank\" rel=\"noopener\">hexo-symbols-count-time</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\"><span class=\"attr\">  separated_meta:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">#文章中的显示是否显示文字（本文字数|阅读时长） </span></span><br><span class=\"line\"><span class=\"attr\">  item_text_post:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">#网页底部的显示是否显示文字（站点总字数|站点阅读时长） </span></span><br><span class=\"line\"><span class=\"attr\">  item_text_total:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Average Word Length (chars count in word)</span></span><br><span class=\"line\"><span class=\"attr\">  awl:</span> <span class=\"number\">4</span></span><br><span class=\"line\">  <span class=\"comment\"># Words Per Minute</span></span><br><span class=\"line\"><span class=\"attr\">  wpm:</span> <span class=\"number\">275</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"评论-打赏-rss功能\"><a class=\"header-anchor\" href=\"#评论-打赏-rss功能\">¶</a>评论，打赏，RSS功能</h4>\n<h4 id=\"广告位-x\"><a class=\"header-anchor\" href=\"#广告位-x\">¶</a>广告位(X</h4>\n<h4 id=\"配置live2d宠物\"><a class=\"header-anchor\" href=\"#配置live2d宠物\">¶</a>配置live2d宠物</h4>\n<h4 id=\"文章首页完美隐藏\"><a class=\"header-anchor\" href=\"#文章首页完美隐藏\">¶</a>文章首页完美隐藏</h4>\n<p>下载hexo-generator-index2插件后卸载官方的插件hexo-generator-index</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-index2 --save</span><br><span class=\"line\">$ npm uninstall hexo-generator-index --save</span><br></pre></td></tr></table></figure>\n<p>打开根目录的<code>_config.yml</code>，在末尾添加一下内容，注意空格和缩进</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># index2 generator是否包含官方的hexo-generator-index，默认true（包含）</span></span><br><span class=\"line\"><span class=\"attr\">index2_include_index:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">index2_generator:</span></span><br><span class=\"line\">\t<span class=\"attr\">per_page:</span> <span class=\"number\">8</span></span><br><span class=\"line\">\t<span class=\"attr\">order_by:</span> <span class=\"bullet\">-date</span></span><br><span class=\"line\">\t<span class=\"attr\">exclude:</span></span><br><span class=\"line\">\t\t<span class=\"bullet\">-</span> <span class=\"string\">tag</span> <span class=\"string\">hide</span></span><br><span class=\"line\">\t\t<span class=\"bullet\">-</span> <span class=\"string\">category</span> <span class=\"string\">hide</span></span><br></pre></td></tr></table></figure>\n<p><code>exclude</code>:表示隐藏哪些内容，以上代码表示隐藏tag为hide和category(分类)为hide的文章</p>\n<p><a href=\"https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md\" target=\"_blank\" rel=\"noopener\">hexo-helper-live2d</a></p>\n","site":{"data":{}},"length":1627,"excerpt":"<p>实际使用一个主题时，有很多常用的细节上的配置在主题初始时并不会设置好，需要手动找到配置文件中相对应的项进行设置，以目前我正在使用的NextT主题为例,记录下如何进行细节配置。</p>","more":"<h4 id=\"显示语言设置\"><a class=\"header-anchor\" href=\"#显示语言设置\">¶</a>显示语言设置</h4>\n<h4 id=\"首页不显示全文\"><a class=\"header-anchor\" href=\"#首页不显示全文\">¶</a>首页不显示全文</h4>\n<p>在文章内需要截断的地方添加上标记</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首页会显示的text1111</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- more --&gt;</span></span><br><span class=\"line\">在首页会隐藏的text22222</span><br></pre></td></tr></table></figure>\n<h4 id=\"首页出现菜单内容以及菜单内容对应路径文件\"><a class=\"header-anchor\" href=\"#首页出现菜单内容以及菜单内容对应路径文件\">¶</a>首页出现菜单内容以及菜单内容对应路径文件</h4>\n<h4 id=\"文章添加分类和tag\"><a class=\"header-anchor\" href=\"#文章添加分类和tag\">¶</a>文章添加分类和tag</h4>\n<p>在文章的开头指定配置tag和分类即可，如</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span> <span class=\"string\">配置</span> <span class=\"string\">//</span> <span class=\"string\">tag</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> <span class=\"string\">HEXO</span> <span class=\"string\">//</span> <span class=\"string\">分类</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"文章插入图片\"><a class=\"header-anchor\" href=\"#文章插入图片\">¶</a>文章插入图片</h4>\n<p>把主页配置文件 <em>_config.yml</em> 里的 <em>post_asset_folder</em>这个选项设置为true<br>\n在hexo的目录下执行<code>npm install <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"noopener\">https://github.com/CodeFalling/hexo-asset-image</a> --save</code>（需要等待一段时间）。<br>\n完成安装后用<code>hexo n &quot;nnn&quot;</code>新建文章的时候会发现 <em>_posts</em> 目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面</p>\n<h4 id=\"修改样式和添加自定义样式\"><a class=\"header-anchor\" href=\"#修改样式和添加自定义样式\">¶</a>修改样式和添加自定义样式</h4>\n<p>打开文件： <em>根目录\\themes[themeName]\\source\\css_custom\\custom.styl</em>,在该文件中自定义样式</p>\n<h4 id=\"文章字数统计和预计阅读时长\"><a class=\"header-anchor\" href=\"#文章字数统计和预计阅读时长\">¶</a>文章字数统计和预计阅读时长</h4>\n<p>字数统计和预计阅读市场需要在两处进行配置<br>\nnextT自带的字数统计工具是<em>hexo-symbols-count-time</em>，首先需要确认已安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-symbols-count-time --save // 安装hexo-symbols-count-time</span><br></pre></td></tr></table></figure>\n<p><strong>配置项修改</strong><br>\n首先在博客的根目录下的配置文件 <em>_config.yml</em> 里配置以下内容</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\"> <span class=\"comment\">#文章内是否显示</span></span><br><span class=\"line\"><span class=\"attr\">  symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> <span class=\"comment\"># 网页底部是否显示</span></span><br><span class=\"line\"><span class=\"attr\">  total_symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  total_time:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>然后在主题的配置文件中配置以下内容,具体参数意义详见<a href=\"https://github.com/theme-next/hexo-symbols-count-time\" target=\"_blank\" rel=\"noopener\">hexo-symbols-count-time</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\"><span class=\"attr\">  separated_meta:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">#文章中的显示是否显示文字（本文字数|阅读时长） </span></span><br><span class=\"line\"><span class=\"attr\">  item_text_post:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">#网页底部的显示是否显示文字（站点总字数|站点阅读时长） </span></span><br><span class=\"line\"><span class=\"attr\">  item_text_total:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Average Word Length (chars count in word)</span></span><br><span class=\"line\"><span class=\"attr\">  awl:</span> <span class=\"number\">4</span></span><br><span class=\"line\">  <span class=\"comment\"># Words Per Minute</span></span><br><span class=\"line\"><span class=\"attr\">  wpm:</span> <span class=\"number\">275</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"评论-打赏-rss功能\"><a class=\"header-anchor\" href=\"#评论-打赏-rss功能\">¶</a>评论，打赏，RSS功能</h4>\n<h4 id=\"广告位-x\"><a class=\"header-anchor\" href=\"#广告位-x\">¶</a>广告位(X</h4>\n<h4 id=\"配置live2d宠物\"><a class=\"header-anchor\" href=\"#配置live2d宠物\">¶</a>配置live2d宠物</h4>\n<h4 id=\"文章首页完美隐藏\"><a class=\"header-anchor\" href=\"#文章首页完美隐藏\">¶</a>文章首页完美隐藏</h4>\n<p>下载hexo-generator-index2插件后卸载官方的插件hexo-generator-index</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-index2 --save</span><br><span class=\"line\">$ npm uninstall hexo-generator-index --save</span><br></pre></td></tr></table></figure>\n<p>打开根目录的<code>_config.yml</code>，在末尾添加一下内容，注意空格和缩进</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># index2 generator是否包含官方的hexo-generator-index，默认true（包含）</span></span><br><span class=\"line\"><span class=\"attr\">index2_include_index:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">index2_generator:</span></span><br><span class=\"line\">\t<span class=\"attr\">per_page:</span> <span class=\"number\">8</span></span><br><span class=\"line\">\t<span class=\"attr\">order_by:</span> <span class=\"bullet\">-date</span></span><br><span class=\"line\">\t<span class=\"attr\">exclude:</span></span><br><span class=\"line\">\t\t<span class=\"bullet\">-</span> <span class=\"string\">tag</span> <span class=\"string\">hide</span></span><br><span class=\"line\">\t\t<span class=\"bullet\">-</span> <span class=\"string\">category</span> <span class=\"string\">hide</span></span><br></pre></td></tr></table></figure>\n<p><code>exclude</code>:表示隐藏哪些内容，以上代码表示隐藏tag为hide和category(分类)为hide的文章</p>\n<p><a href=\"https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md\" target=\"_blank\" rel=\"noopener\">hexo-helper-live2d</a></p>"},{"title":"养花大爷","date":"2019-10-13T13:38:59.000Z","_content":"准确的来说，入坑月季的时间是19年。6月的时候在某宝买了三颗月季，品种分别是真宙，心之水滴和诺瓦利斯\n三颗来的时候都带着花苞，所以基本上开一轮花应该不是问题，本应该这样，但是实际上第一波花开了的只有真宙和水滴。\n真宙和心之水滴很快就开花了，表现良好，但是季节正好是夏，魔都持续高温，再加上是初花，所以花型很散，基本看不出什么型，但是颜色对版，特别是真宙还有股水果香味，还算美丽。\n\n原本最期待的蓝色系的诺瓦利斯并没有那么顺利的开花。刚出两个花苞的那边魔都开始进入到午后暴雨定番的时候了，本应在日程上的盛放就被不断推迟，知道最后艰难的开出了两朵粉色的小花，且当天下午所有花瓣就被暴雨冲落了。o(╥﹏╥)o\n\n这里不得不说夸一下真宙，截止到9月底，真宙开花数超过了10朵且花型肉眼可见的越来越标准，越来越包子，总共开了三波的花，开花机器名不虚传。\n\n尝到甜头之后在8月又入了三个品种：黑巴克，夏洛特夫人，羽毛。\n\n羽毛很不幸的在拆开快递的时候发现一个花苞和一根枝条已经折断了，但是夏洛特夫人和黑巴克状态很棒，不久之后就开花了\n黑巴克真的惊艳，夏洛特夫人花型在初花的时候就已经很棒了，羽毛颜色也很不错，这次虽然有遗憾，少了一朵花和枝条，但是初花的花型是真的美。\n![黑巴克第一天](life-flowers/2.jpg)![黑巴克第二天淋雨了](life-flowers/3.jpg)![黑巴克第三天](life-flowers/4.jpg)\n\n但是这个三个品种明显开花的频率比不上开花机器，截止到9月底，再打了花苞的只有黑巴克\n![黑巴克和心之水滴](life-flowers/1.jpg)\n黑巴克实物真的很黑，从花心向外呈黑色到红色的渐变\n*蓟马，蚜虫*\n\n国庆节前后遭遇了一波病虫害，这种时候就能看出来月季不同品种的抗病性的强弱。很明显黑巴克是已拥有的六个品种中抗病性最弱的。蚍虫林兑水喷洒到叶片上直到能滴水为止，大概三天蓟马和蚜虫都消失了。\n蚜虫和蓟马没了之后，大部分月季都开始继续一波发芽和生长，但是黑巴克又招了不知道哪里来的小毛虫，抗病性啊抗病性，蚍虫林继续喷也解决了。\n\n*修剪狂魔*\n\n每个人养花草都会有自己的风格，我觉得用个词来形容我的风格的话可能是，修剪狂魔。\n\n好在月季比较皮实，不怕我的修剪，尤其是夏洛特夫人，真宙和诺瓦利斯，同样修剪后追肥的操作，这三个品种对这个操作的受用度最高，诺瓦利斯和夏洛特表现是向上不断生长，真宙则是在中间段出芽同时苗也越来越壮了，竖向生长和横向生长的区别。\n\n夏洛特长太高了，于是给它放了个爬藤架，把枝条沿S形固定到架子上，很多博主说这样有利于打破顶端优势，有利于多花。过几个月看情况吧\n\n---\n\n月季真的是个剁手的玩意儿啊，太上瘾了！！\n10月13号，又入了7颗品种的月季，顺便还入了两颗铁线莲。\n月季分别是：\n<p style=\"color: #a48999;margin:0;\">蜻蜓 [紫色系] [蕾丝花瓣边] </p>\n<p style=\"color: #e77630;margin:0\">永远的那不勒斯 [橙色系] [从外往内红至金色的渐变色，整体复古色系] [耐晒需要勤修剪，不然会长很大] [小苗单头开花，大苗会多头]</p>\n<p style=\"color: #c0445d;margin:0\">金边玫瑰 [红色系] [可食用]</p>\n<p style=\"color: #8b6778;margin:0\">和室 [粉色系] [外瓣为深粉色，内花主要为白色或者非常淡的粉色] [开花机器] [枝条软] [包子]</p>\n<p style=\"color: #8e5ea3;margin:0\">海洋之歌 [蓝色系] [花型为玫瑰型]</p>\n<p style=\"color: #de989c;margin:0\">瑞典女王 [杏粉色] [花型优雅]</p>\n<p style=\"color: #e36393;margin:0\">京 [粉色系] [多头开花] [开花机器] </p>\n\n铁线莲：\n乌托邦[单瓣] [粉白色] [极易养护] [叶片很绿]\n魔法喷泉 [重瓣] [正紫色系] [花实在是华丽] [叶片有紫色纹路]\n\n---\n\n9.15 新买的那7颗月季在路上耽搁了3天总算是的到了，到手又是惊呆，原本以为是8朵，店家居然又送了两颗，总共9朵，9朵大部分都带着花来的，有些花都已经盛开了，所以在快递箱里掉了很多的花瓣\n![](life-flowers/5.jpg)\n\n既然到手了，那就来记录一下到手的时候9颗的状态和第一印象好了\n叶序，脉序，花序，花冠\n`和室`: -首先和室是带着花苞来的，花苞打的很大，但是很可惜的是，花苞整个掉落了。光看花苞也能看到颜色很美\n花萼首先是正统月季的光滑五片花萼\n![和室掉下来的花苞](life-flowers_files/6.jpg)\n\n`奇异盛典` ：- 奇异盛典是店家送的。\n叶子：乍一看，叶片有规则的锯齿，嫩叶为红绿色到绿色，带红边，红叶柄，单数羽状复叶，一柄上最多有7片叶子，总体来说和玫瑰较为相似\n花苞： 无花苞。\n枝条： 绿色，直立性较强，较为粗壮\n刺：短且硬直，较为密集，可轻易掰下，\n![奇异盛典叶片](life-flowers/7.jpg)\n\n`温柔水晶`： 也是店家送的。\n`蜻蜓`: 带着花苞来的额，第二天就盛放了，完全不包，散开状，花瓣波浪边，较硬，硬的花瓣真的挺特别的，花瓣也不易掉落，很适合当切花。\n有花香味，具体形容的话就是鲜花饼内馅儿的香味，闻得我想吃鲜花饼了。\n\n永远的那不勒斯\n金边玫瑰\n海洋之歌\n瑞典女王\n京\n\n\n\n\n","source":"_posts/life-flowers.md","raw":"---\ntitle: 养花大爷\ndate: 2019-10-13 21:38:59\ntags: 日常\ncategory: hide\n---\n准确的来说，入坑月季的时间是19年。6月的时候在某宝买了三颗月季，品种分别是真宙，心之水滴和诺瓦利斯\n三颗来的时候都带着花苞，所以基本上开一轮花应该不是问题，本应该这样，但是实际上第一波花开了的只有真宙和水滴。\n真宙和心之水滴很快就开花了，表现良好，但是季节正好是夏，魔都持续高温，再加上是初花，所以花型很散，基本看不出什么型，但是颜色对版，特别是真宙还有股水果香味，还算美丽。\n\n原本最期待的蓝色系的诺瓦利斯并没有那么顺利的开花。刚出两个花苞的那边魔都开始进入到午后暴雨定番的时候了，本应在日程上的盛放就被不断推迟，知道最后艰难的开出了两朵粉色的小花，且当天下午所有花瓣就被暴雨冲落了。o(╥﹏╥)o\n\n这里不得不说夸一下真宙，截止到9月底，真宙开花数超过了10朵且花型肉眼可见的越来越标准，越来越包子，总共开了三波的花，开花机器名不虚传。\n\n尝到甜头之后在8月又入了三个品种：黑巴克，夏洛特夫人，羽毛。\n\n羽毛很不幸的在拆开快递的时候发现一个花苞和一根枝条已经折断了，但是夏洛特夫人和黑巴克状态很棒，不久之后就开花了\n黑巴克真的惊艳，夏洛特夫人花型在初花的时候就已经很棒了，羽毛颜色也很不错，这次虽然有遗憾，少了一朵花和枝条，但是初花的花型是真的美。\n![黑巴克第一天](life-flowers/2.jpg)![黑巴克第二天淋雨了](life-flowers/3.jpg)![黑巴克第三天](life-flowers/4.jpg)\n\n但是这个三个品种明显开花的频率比不上开花机器，截止到9月底，再打了花苞的只有黑巴克\n![黑巴克和心之水滴](life-flowers/1.jpg)\n黑巴克实物真的很黑，从花心向外呈黑色到红色的渐变\n*蓟马，蚜虫*\n\n国庆节前后遭遇了一波病虫害，这种时候就能看出来月季不同品种的抗病性的强弱。很明显黑巴克是已拥有的六个品种中抗病性最弱的。蚍虫林兑水喷洒到叶片上直到能滴水为止，大概三天蓟马和蚜虫都消失了。\n蚜虫和蓟马没了之后，大部分月季都开始继续一波发芽和生长，但是黑巴克又招了不知道哪里来的小毛虫，抗病性啊抗病性，蚍虫林继续喷也解决了。\n\n*修剪狂魔*\n\n每个人养花草都会有自己的风格，我觉得用个词来形容我的风格的话可能是，修剪狂魔。\n\n好在月季比较皮实，不怕我的修剪，尤其是夏洛特夫人，真宙和诺瓦利斯，同样修剪后追肥的操作，这三个品种对这个操作的受用度最高，诺瓦利斯和夏洛特表现是向上不断生长，真宙则是在中间段出芽同时苗也越来越壮了，竖向生长和横向生长的区别。\n\n夏洛特长太高了，于是给它放了个爬藤架，把枝条沿S形固定到架子上，很多博主说这样有利于打破顶端优势，有利于多花。过几个月看情况吧\n\n---\n\n月季真的是个剁手的玩意儿啊，太上瘾了！！\n10月13号，又入了7颗品种的月季，顺便还入了两颗铁线莲。\n月季分别是：\n<p style=\"color: #a48999;margin:0;\">蜻蜓 [紫色系] [蕾丝花瓣边] </p>\n<p style=\"color: #e77630;margin:0\">永远的那不勒斯 [橙色系] [从外往内红至金色的渐变色，整体复古色系] [耐晒需要勤修剪，不然会长很大] [小苗单头开花，大苗会多头]</p>\n<p style=\"color: #c0445d;margin:0\">金边玫瑰 [红色系] [可食用]</p>\n<p style=\"color: #8b6778;margin:0\">和室 [粉色系] [外瓣为深粉色，内花主要为白色或者非常淡的粉色] [开花机器] [枝条软] [包子]</p>\n<p style=\"color: #8e5ea3;margin:0\">海洋之歌 [蓝色系] [花型为玫瑰型]</p>\n<p style=\"color: #de989c;margin:0\">瑞典女王 [杏粉色] [花型优雅]</p>\n<p style=\"color: #e36393;margin:0\">京 [粉色系] [多头开花] [开花机器] </p>\n\n铁线莲：\n乌托邦[单瓣] [粉白色] [极易养护] [叶片很绿]\n魔法喷泉 [重瓣] [正紫色系] [花实在是华丽] [叶片有紫色纹路]\n\n---\n\n9.15 新买的那7颗月季在路上耽搁了3天总算是的到了，到手又是惊呆，原本以为是8朵，店家居然又送了两颗，总共9朵，9朵大部分都带着花来的，有些花都已经盛开了，所以在快递箱里掉了很多的花瓣\n![](life-flowers/5.jpg)\n\n既然到手了，那就来记录一下到手的时候9颗的状态和第一印象好了\n叶序，脉序，花序，花冠\n`和室`: -首先和室是带着花苞来的，花苞打的很大，但是很可惜的是，花苞整个掉落了。光看花苞也能看到颜色很美\n花萼首先是正统月季的光滑五片花萼\n![和室掉下来的花苞](life-flowers_files/6.jpg)\n\n`奇异盛典` ：- 奇异盛典是店家送的。\n叶子：乍一看，叶片有规则的锯齿，嫩叶为红绿色到绿色，带红边，红叶柄，单数羽状复叶，一柄上最多有7片叶子，总体来说和玫瑰较为相似\n花苞： 无花苞。\n枝条： 绿色，直立性较强，较为粗壮\n刺：短且硬直，较为密集，可轻易掰下，\n![奇异盛典叶片](life-flowers/7.jpg)\n\n`温柔水晶`： 也是店家送的。\n`蜻蜓`: 带着花苞来的额，第二天就盛放了，完全不包，散开状，花瓣波浪边，较硬，硬的花瓣真的挺特别的，花瓣也不易掉落，很适合当切花。\n有花香味，具体形容的话就是鲜花饼内馅儿的香味，闻得我想吃鲜花饼了。\n\n永远的那不勒斯\n金边玫瑰\n海洋之歌\n瑞典女王\n京\n\n\n\n\n","slug":"life-flowers","published":1,"updated":"2019-10-17T14:35:24.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tewmvf000g2c7kgrm5v2c9","content":"<p>准确的来说，入坑月季的时间是19年。6月的时候在某宝买了三颗月季，品种分别是真宙，心之水滴和诺瓦利斯<br>\n三颗来的时候都带着花苞，所以基本上开一轮花应该不是问题，本应该这样，但是实际上第一波花开了的只有真宙和水滴。<br>\n真宙和心之水滴很快就开花了，表现良好，但是季节正好是夏，魔都持续高温，再加上是初花，所以花型很散，基本看不出什么型，但是颜色对版，特别是真宙还有股水果香味，还算美丽。</p><p>原本最期待的蓝色系的诺瓦利斯并没有那么顺利的开花。刚出两个花苞的那边魔都开始进入到午后暴雨定番的时候了，本应在日程上的盛放就被不断推迟，知道最后艰难的开出了两朵粉色的小花，且当天下午所有花瓣就被暴雨冲落了。o(╥﹏╥)o</p><a id=\"more\"></a>\n\n<p>这里不得不说夸一下真宙，截止到9月底，真宙开花数超过了10朵且花型肉眼可见的越来越标准，越来越包子，总共开了三波的花，开花机器名不虚传。</p>\n<p>尝到甜头之后在8月又入了三个品种：黑巴克，夏洛特夫人，羽毛。</p>\n<p>羽毛很不幸的在拆开快递的时候发现一个花苞和一根枝条已经折断了，但是夏洛特夫人和黑巴克状态很棒，不久之后就开花了<br>\n黑巴克真的惊艳，夏洛特夫人花型在初花的时候就已经很棒了，羽毛颜色也很不错，这次虽然有遗憾，少了一朵花和枝条，但是初花的花型是真的美。<br>\n<img src=\"/2019/10/13/life-flowers/2.jpg\" alt=\"黑巴克第一天\"><img src=\"/2019/10/13/life-flowers/3.jpg\" alt=\"黑巴克第二天淋雨了\"><img src=\"/2019/10/13/life-flowers/4.jpg\" alt=\"黑巴克第三天\"></p>\n<p>但是这个三个品种明显开花的频率比不上开花机器，截止到9月底，再打了花苞的只有黑巴克<br>\n<img src=\"/2019/10/13/life-flowers/1.jpg\" alt=\"黑巴克和心之水滴\"><br>\n黑巴克实物真的很黑，从花心向外呈黑色到红色的渐变<br>\n<em>蓟马，蚜虫</em></p>\n<p>国庆节前后遭遇了一波病虫害，这种时候就能看出来月季不同品种的抗病性的强弱。很明显黑巴克是已拥有的六个品种中抗病性最弱的。蚍虫林兑水喷洒到叶片上直到能滴水为止，大概三天蓟马和蚜虫都消失了。<br>\n蚜虫和蓟马没了之后，大部分月季都开始继续一波发芽和生长，但是黑巴克又招了不知道哪里来的小毛虫，抗病性啊抗病性，蚍虫林继续喷也解决了。</p>\n<p><em>修剪狂魔</em></p>\n<p>每个人养花草都会有自己的风格，我觉得用个词来形容我的风格的话可能是，修剪狂魔。</p>\n<p>好在月季比较皮实，不怕我的修剪，尤其是夏洛特夫人，真宙和诺瓦利斯，同样修剪后追肥的操作，这三个品种对这个操作的受用度最高，诺瓦利斯和夏洛特表现是向上不断生长，真宙则是在中间段出芽同时苗也越来越壮了，竖向生长和横向生长的区别。</p>\n<p>夏洛特长太高了，于是给它放了个爬藤架，把枝条沿S形固定到架子上，很多博主说这样有利于打破顶端优势，有利于多花。过几个月看情况吧</p>\n<hr>\n<p>月季真的是个剁手的玩意儿啊，太上瘾了！！<br>\n10月13号，又入了7颗品种的月季，顺便还入了两颗铁线莲。<br>\n月季分别是：</p>\n<p style=\"color: #a48999;margin:0;\">蜻蜓 [紫色系] [蕾丝花瓣边] </p>\n<p style=\"color: #e77630;margin:0\">永远的那不勒斯 [橙色系] [从外往内红至金色的渐变色，整体复古色系] [耐晒需要勤修剪，不然会长很大] [小苗单头开花，大苗会多头]</p>\n<p style=\"color: #c0445d;margin:0\">金边玫瑰 [红色系] [可食用]</p>\n<p style=\"color: #8b6778;margin:0\">和室 [粉色系] [外瓣为深粉色，内花主要为白色或者非常淡的粉色] [开花机器] [枝条软] [包子]</p>\n<p style=\"color: #8e5ea3;margin:0\">海洋之歌 [蓝色系] [花型为玫瑰型]</p>\n<p style=\"color: #de989c;margin:0\">瑞典女王 [杏粉色] [花型优雅]</p>\n<p style=\"color: #e36393;margin:0\">京 [粉色系] [多头开花] [开花机器] </p>\n<p>铁线莲：<br>\n乌托邦[单瓣] [粉白色] [极易养护] [叶片很绿]<br>\n魔法喷泉 [重瓣] [正紫色系] [花实在是华丽] [叶片有紫色纹路]</p>\n<hr>\n<p>9.15 新买的那7颗月季在路上耽搁了3天总算是的到了，到手又是惊呆，原本以为是8朵，店家居然又送了两颗，总共9朵，9朵大部分都带着花来的，有些花都已经盛开了，所以在快递箱里掉了很多的花瓣<br>\n<img src=\"/2019/10/13/life-flowers/5.jpg\" alt></p>\n<p>既然到手了，那就来记录一下到手的时候9颗的状态和第一印象好了<br>\n叶序，脉序，花序，花冠<br>\n<code>和室</code>: -首先和室是带着花苞来的，花苞打的很大，但是很可惜的是，花苞整个掉落了。光看花苞也能看到颜色很美<br>\n花萼首先是正统月季的光滑五片花萼<br>\n<img src=\"/2019/10/13/life-flowers/6.jpg\" alt=\"和室掉下来的花苞\"></p>\n<p><code>奇异盛典</code> ：- 奇异盛典是店家送的。<br>\n叶子：乍一看，叶片有规则的锯齿，嫩叶为红绿色到绿色，带红边，红叶柄，单数羽状复叶，一柄上最多有7片叶子，总体来说和玫瑰较为相似<br>\n花苞： 无花苞。<br>\n枝条： 绿色，直立性较强，较为粗壮<br>\n刺：短且硬直，较为密集，可轻易掰下，<br>\n<img src=\"/2019/10/13/life-flowers/7.jpg\" alt=\"奇异盛典叶片\"></p>\n<p><code>温柔水晶</code>： 也是店家送的。<br>\n<code>蜻蜓</code>: 带着花苞来的额，第二天就盛放了，完全不包，散开状，花瓣波浪边，较硬，硬的花瓣真的挺特别的，花瓣也不易掉落，很适合当切花。<br>\n有花香味，具体形容的话就是鲜花饼内馅儿的香味，闻得我想吃鲜花饼了。</p>\n<p>永远的那不勒斯<br>\n金边玫瑰<br>\n海洋之歌<br>\n瑞典女王<br>\n京</p>\n","site":{"data":{}},"length":1750,"excerpt":"<p>准确的来说，入坑月季的时间是19年。6月的时候在某宝买了三颗月季，品种分别是真宙，心之水滴和诺瓦利斯<br>\n三颗来的时候都带着花苞，所以基本上开一轮花应该不是问题，本应该这样，但是实际上第一波花开了的只有真宙和水滴。<br>\n真宙和心之水滴很快就开花了，表现良好，但是季节正好是夏，魔都持续高温，再加上是初花，所以花型很散，基本看不出什么型，但是颜色对版，特别是真宙还有股水果香味，还算美丽。</p><p>原本最期待的蓝色系的诺瓦利斯并没有那么顺利的开花。刚出两个花苞的那边魔都开始进入到午后暴雨定番的时候了，本应在日程上的盛放就被不断推迟，知道最后艰难的开出了两朵粉色的小花，且当天下午所有花瓣就被暴雨冲落了。o(╥﹏╥)o</p>","more":"\n\n<p>这里不得不说夸一下真宙，截止到9月底，真宙开花数超过了10朵且花型肉眼可见的越来越标准，越来越包子，总共开了三波的花，开花机器名不虚传。</p>\n<p>尝到甜头之后在8月又入了三个品种：黑巴克，夏洛特夫人，羽毛。</p>\n<p>羽毛很不幸的在拆开快递的时候发现一个花苞和一根枝条已经折断了，但是夏洛特夫人和黑巴克状态很棒，不久之后就开花了<br>\n黑巴克真的惊艳，夏洛特夫人花型在初花的时候就已经很棒了，羽毛颜色也很不错，这次虽然有遗憾，少了一朵花和枝条，但是初花的花型是真的美。<br>\n<img src=\"/2019/10/13/life-flowers/2.jpg\" alt=\"黑巴克第一天\"><img src=\"/2019/10/13/life-flowers/3.jpg\" alt=\"黑巴克第二天淋雨了\"><img src=\"/2019/10/13/life-flowers/4.jpg\" alt=\"黑巴克第三天\"></p>\n<p>但是这个三个品种明显开花的频率比不上开花机器，截止到9月底，再打了花苞的只有黑巴克<br>\n<img src=\"/2019/10/13/life-flowers/1.jpg\" alt=\"黑巴克和心之水滴\"><br>\n黑巴克实物真的很黑，从花心向外呈黑色到红色的渐变<br>\n<em>蓟马，蚜虫</em></p>\n<p>国庆节前后遭遇了一波病虫害，这种时候就能看出来月季不同品种的抗病性的强弱。很明显黑巴克是已拥有的六个品种中抗病性最弱的。蚍虫林兑水喷洒到叶片上直到能滴水为止，大概三天蓟马和蚜虫都消失了。<br>\n蚜虫和蓟马没了之后，大部分月季都开始继续一波发芽和生长，但是黑巴克又招了不知道哪里来的小毛虫，抗病性啊抗病性，蚍虫林继续喷也解决了。</p>\n<p><em>修剪狂魔</em></p>\n<p>每个人养花草都会有自己的风格，我觉得用个词来形容我的风格的话可能是，修剪狂魔。</p>\n<p>好在月季比较皮实，不怕我的修剪，尤其是夏洛特夫人，真宙和诺瓦利斯，同样修剪后追肥的操作，这三个品种对这个操作的受用度最高，诺瓦利斯和夏洛特表现是向上不断生长，真宙则是在中间段出芽同时苗也越来越壮了，竖向生长和横向生长的区别。</p>\n<p>夏洛特长太高了，于是给它放了个爬藤架，把枝条沿S形固定到架子上，很多博主说这样有利于打破顶端优势，有利于多花。过几个月看情况吧</p>\n<hr>\n<p>月季真的是个剁手的玩意儿啊，太上瘾了！！<br>\n10月13号，又入了7颗品种的月季，顺便还入了两颗铁线莲。<br>\n月季分别是：</p>\n<p style=\"color: #a48999;margin:0;\">蜻蜓 [紫色系] [蕾丝花瓣边] </p>\n<p style=\"color: #e77630;margin:0\">永远的那不勒斯 [橙色系] [从外往内红至金色的渐变色，整体复古色系] [耐晒需要勤修剪，不然会长很大] [小苗单头开花，大苗会多头]</p>\n<p style=\"color: #c0445d;margin:0\">金边玫瑰 [红色系] [可食用]</p>\n<p style=\"color: #8b6778;margin:0\">和室 [粉色系] [外瓣为深粉色，内花主要为白色或者非常淡的粉色] [开花机器] [枝条软] [包子]</p>\n<p style=\"color: #8e5ea3;margin:0\">海洋之歌 [蓝色系] [花型为玫瑰型]</p>\n<p style=\"color: #de989c;margin:0\">瑞典女王 [杏粉色] [花型优雅]</p>\n<p style=\"color: #e36393;margin:0\">京 [粉色系] [多头开花] [开花机器] </p>\n<p>铁线莲：<br>\n乌托邦[单瓣] [粉白色] [极易养护] [叶片很绿]<br>\n魔法喷泉 [重瓣] [正紫色系] [花实在是华丽] [叶片有紫色纹路]</p>\n<hr>\n<p>9.15 新买的那7颗月季在路上耽搁了3天总算是的到了，到手又是惊呆，原本以为是8朵，店家居然又送了两颗，总共9朵，9朵大部分都带着花来的，有些花都已经盛开了，所以在快递箱里掉了很多的花瓣<br>\n<img src=\"/2019/10/13/life-flowers/5.jpg\" alt></p>\n<p>既然到手了，那就来记录一下到手的时候9颗的状态和第一印象好了<br>\n叶序，脉序，花序，花冠<br>\n<code>和室</code>: -首先和室是带着花苞来的，花苞打的很大，但是很可惜的是，花苞整个掉落了。光看花苞也能看到颜色很美<br>\n花萼首先是正统月季的光滑五片花萼<br>\n<img src=\"/2019/10/13/life-flowers/6.jpg\" alt=\"和室掉下来的花苞\"></p>\n<p><code>奇异盛典</code> ：- 奇异盛典是店家送的。<br>\n叶子：乍一看，叶片有规则的锯齿，嫩叶为红绿色到绿色，带红边，红叶柄，单数羽状复叶，一柄上最多有7片叶子，总体来说和玫瑰较为相似<br>\n花苞： 无花苞。<br>\n枝条： 绿色，直立性较强，较为粗壮<br>\n刺：短且硬直，较为密集，可轻易掰下，<br>\n<img src=\"/2019/10/13/life-flowers/7.jpg\" alt=\"奇异盛典叶片\"></p>\n<p><code>温柔水晶</code>： 也是店家送的。<br>\n<code>蜻蜓</code>: 带着花苞来的额，第二天就盛放了，完全不包，散开状，花瓣波浪边，较硬，硬的花瓣真的挺特别的，花瓣也不易掉落，很适合当切花。<br>\n有花香味，具体形容的话就是鲜花饼内馅儿的香味，闻得我想吃鲜花饼了。</p>\n<p>永远的那不勒斯<br>\n金边玫瑰<br>\n海洋之歌<br>\n瑞典女王<br>\n京</p>\n"},{"title":"vue-cli3 settings","date":"2019-10-11T05:34:38.000Z","_content":" #### vue-cli 3.0 配置项\n vue-cli 3.0在创建项目时，推荐选择第二项自定义确认每一项配置\n\n#### 用jest对vue项目进行单元测试","source":"_posts/vue-cli3-settings.md","raw":"---\ntitle: vue-cli3 settings\ndate: 2019-10-11 13:34:38\ntags: javascript\n---\n #### vue-cli 3.0 配置项\n vue-cli 3.0在创建项目时，推荐选择第二项自定义确认每一项配置\n\n#### 用jest对vue项目进行单元测试","slug":"vue-cli3-settings","published":1,"updated":"2019-10-11T05:37:40.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tewmvh000j2c7k58z660jn","content":"<h4 id=\"vue-cli-3-0-配置项\"><a class=\"header-anchor\" href=\"#vue-cli-3-0-配置项\">¶</a>vue-cli 3.0 配置项</h4>\n<p>vue-cli 3.0在创建项目时，推荐选择第二项自定义确认每一项配置</p>\n<h4 id=\"用jest对vue项目进行单元测试\"><a class=\"header-anchor\" href=\"#用jest对vue项目进行单元测试\">¶</a>用jest对vue项目进行单元测试</h4>\n","site":{"data":{}},"length":69,"excerpt":"","more":"<h4 id=\"vue-cli-3-0-配置项\"><a class=\"header-anchor\" href=\"#vue-cli-3-0-配置项\">¶</a>vue-cli 3.0 配置项</h4>\n<p>vue-cli 3.0在创建项目时，推荐选择第二项自定义确认每一项配置</p>\n<h4 id=\"用jest对vue项目进行单元测试\"><a class=\"header-anchor\" href=\"#用jest对vue项目进行单元测试\">¶</a>用jest对vue项目进行单元测试</h4>\n"},{"title":"three.js学习笔记","date":"2019-10-11T08:42:51.000Z","_content":"早些年就听说过D3和three.js，但是学习的难度劝退了我，现在重新捡起来，一是正好项目提前结束有了休息的时间，二是three.js的确能做出很酷炫的效果，着实令人心动\n### 开始\n开始学习前首先是很重要的，在项目中，特别是vue项目中引入three.js的方法。\n1、首先安装three.js\n`npm install three`\n2.接下来利用npm安装轨道控件插件：\n`npm install three-orbit-controls`\n3.接下来安装加载.obj和.mtl文件的插件：\n`npm i --save three-obj-mtl-loader`\n4.安装渲染器插件：\n`npm i --save three-css2drender`\n5、安装好以后，在页面中引入three.js并使用，在所调用页面引入的代码为：\n`import * as Three from ‘three’`\n原文链接：https://blog.csdn.net/baidu_41601299/article/details/88663673\n\n*补充：*\n如下载three.js辅助库[ stats.js ](https://github.com/mrdoob/stats.js),可以运行这行命令：\n`npm install stats.js`\n\n<a name=\"1\">补充二:</a>\n~~如需下载通道后期处理插件PostProcessing [npm链接](https://www.npmjs.com/package/postprocessing)\n`npm install three postprocessing`~~\n *切记！*不要去下载npm的打包好的插件，因为时效性比较差，最好的方法是去官方开源项目直接下载然后引入\n```javascript\nimport { Clock, PerspectiveCamera, Scene, WebGLRenderer } from \"three\";\nimport { BloomEffect, EffectComposer, EffectPass, RenderPass } from \"postprocessing\";\n……\nconst composer = new EffectComposer(new WebGLRenderer()); // 用法举例\n```\n\n*这个插件只包含了部分PostProcessing下的插件集合*，如果想引入其他的插件，具体看<a href=\"#2\"> 效果 </a>那一章\n\n### First Demo\n```html\n<template>\n  <div>\n    <div id=\"container\"></div>\n  </div>\n</template>\n\n<script>\n  import * as Three from 'three'\n\n  export default {\n    name: 'ThreeTest',\n    data () {\n      return {\n        camera: null,\n        scene: null,\n        renderer: null,\n        mesh: null\n      }\n    },\n    methods: {\n      init: function () {\n        let container = document.getElementById('container')\n        this.camera = new Three.PerspectiveCamera(70, container.clientWidth / container.clientHeight, 0.01, 10)\n        this.camera.position.z = 0.6\n        this.scene = new Three.Scene()\n        let geometry = new Three.BoxGeometry(0.2, 0.2, 0.2)\n        let material = new Three.MeshNormalMaterial()\n        this.mesh = new Three.Mesh(geometry, material)\n        this.scene.add(this.mesh)\n\n        this.renderer = new Three.WebGLRenderer({antialias: true})\n        this.renderer.setSize(container.clientWidth, container.clientHeight)\n        container.appendChild(this.renderer.domElement)\n      },\n      animate: function () {\n        requestAnimationFrame(this.animate)\n        this.mesh.rotation.x += 0.01\n        this.mesh.rotation.y += 0.02\n        this.renderer.render(this.scene, this.camera)\n      }\n    },\n    mounted () {\n      this.init()\n      this.animate()\n    }\n  }\n</script>\n<style scoped>\n  #container {\n    height: 400px;\n  }\n</style>\n```\n以上代码运行后，应该能看大一个在旋转着的多色正方体。\n\n### 三要素\n在three.js中想要将物体渲染到浏览器中，必须设置三个要素，分别是场景（scene）、相机（camera）和渲染器（renderer）。\n#### 场景(scene)\n场景的概念很容易理解，如果将html比作一个空间，我们希望在这个空间内上演一出戏码，那么首先需要给这场戏布置一个场景或者说是舞台，布置的方法也很简单，只需要new一个对象\n`var scene = new THREE.Scene();`\n\n#### 相机(camera)\n一场戏的呈现离不开看的人，也就是观众，camera通俗的来说就是视角点。\n我们设置了舞台之后我们还需要设置观众席或摄像机的位置。\n视角点的设置是决定这场戏呈现出来的最终效果的决定因素之一，有了视角点我们就可以轻易的控制哪些东西出现或不出现在观众和镜头的视线范围内。\n\n相机(camera)和场景不同，可以有很多种，就好比摄影中的各个镜头，一般我们最常用的是*透视相机(THREE.PerspectiveCamera)*\n我们在定义新相机的时候必须先指定一个相机类型。\n每个相机类型都是一个构造函数。这里我们只列出了PerspectiveCamera函数的用法。\n\n```javascript\nPerspectiveCamera(fov, aspect, near, far)\n```\n`Fov`(int): 相机的视锥体的垂直视野角\n`Aspect`(init): 相机视锥体的长宽比\n`Near`(int): 相机视锥体的近平面\n`Far`(int): 相机视锥体的远平面\n\n举个栗子：\n`var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);`\n\n#### 渲染器（renderer）\n几乎所有的在web中渲染图形的工具或框架中（例如echarts）,最后的一步都是渲染。\n渲染一般作为最后一个步骤，当我们把所有的静态图形，场景，相机等全部设置完毕后，进行渲染即可在web中看到最终效果。\n而我们在进行渲染前，必须先准备一个渲染器。\n定义一个渲染器可分以下三步\n```javascript\nvar renderer = new THREE.WebGLRenderer(); // 定义一个渲染器\nrenderer.setSize(window.innerWidth, window.innerHeight); // 渲染器设置高宽\ndocument.body.appendChild(renderer.domElement); // 将渲染器中的dom加入到指定的容器dom中\n```\n\n### 准备完毕\n当我们准备完了三要素之后，我们就该正式开演了，开演的这个过程我们也叫做渲染。\n渲染在这里是动词，和三要素之一的渲染器不同，渲染器是名词，用来指定渲染方式，渲染大小等内容\n而最终我们需要*用渲染器将准备好的元素渲染到网页上*\n\n```javascript\nrenderer.render( scene, camera, renderTarget, forceClear )\n```\n`scene`：必填。定义好的场景\n`camera`：必填。定义好的相机\n`renderTarget`：非必填。渲染的目标，默认是渲染到前面定义的render变量中\n`forceClear`：非必填。每次绘制之前都将画布的内容给清除，即使自动清除标志autoClear为false，也会清除。\n\n### 重要元素\n一场戏要能被称为戏，必不可少的元素还有很多，我们上述的三要素，仅仅是让我们的架子可以呈现出来，然而最关键的内容却为空，那就不能称之为戏。\n而这也是开发中最复杂最难的元素之一。\n#### Heroes\n首先我们需要演员或者道具出现在舞台上，在three.js中我们称他们为Things，物体。\n物体需要出现在舞台上分两步，当然这两步都是在渲染前进行的。\n第一步：定义一个物体 第二步：把物体添加到`舞台上`，就这么简单【X\n```javascript\n……省略参数定义\nvar line = new Three.Line(Geometry, Material );// 定义一条线,参数内容放到下面详述\nthis.scene.add( line ); // 加入到场景中\n```\n\n##### Object\nthree内置了多重对象，用于定义一个物体的类型，上述例子中，定义的就是一个线的对象作为物体。\n\n要注意的是，在开发过程中，我们往往定义好了材料和模型之后再写对象，但是对象的选择在开发过程中需要作为定义物体时*第一个思考*的内容，因为对象*直接决定*了材料和模型二者的*可选范围*。\n比如我想画一个点，那就必须先定义一个点的对象作为物体，然后再选择点对象下可选择的材料和模型。\n\n我们定义了一个对象后，该对象仍然只是一个空壳，我们需要给对象传入对象的材料和模型(部分对象不需要材质或者模型，需根据对象来决定是否传入)\n也就是上述代码中构造函数内的两个传参，Material和Geometry\n##### Material(材料)\n首先介绍的是Material，字面意思是材料，但是在three.js中，Material的构造函数和我们日常生活中的材料的定义有所不同。\n材料的种类有很多，在文档中我们可以分别查看到。这里不多赘述\n\n在实际开发过程中最复杂也是最常用的材料之一ShaderMaterial,另开一片叙述。\n\n##### Geometry(模型)\n任何的things构造函数都需要Material和Geometry两项参数。Geometry表示该物体选用的几何模型。\n\n当我们选用一个几何的时候，Geometry该选择哪个的问题很容易得到答案\nthree.js提供了大量的模型可供选择，例如平面模型PlaneGeometry，平面圆模型CircleBufferGeometry，\n在比如盒子模型BoxGeometry，环形扭结模型TorusKnotGeometry等等。\n```javascript\nvar geometry = new Three.PlaneGeometry( 5, 20, 32); // 由于第三步中的对象是Mesh网点对象，PlaneGeometry属于Mesh对象之一，因此可以选此模型。\nvar material = new Three.MeshBasicMaterial( {color: 0xffff00, side: Three.DoubleSide} ); // 由于对象是Mesh,模型是平面模型，可选材料被限制，MeshBasicMaterial为这种情况下可选的材料。\nvar planeDemo = new Three.Mesh( geometry, material );// 选择网点对象Mesh，将模型和材料作为参数传入对象。\nthis.scene.add( planeDemo );\n```\n\n重要的事情说两遍，需要注意的是，模型也需要根据对象的类型去选择。\n\n---\n小结：文章写到这里，如果理解透了的话，已经可以写出大部分的最基本的静态物体了。可以先试着写一个人脸模型或是一个静态粒子图\n#### Lights\n我们需要体现质感和更加丰富立体的物体时，灯光就是个强力的帮手，\nthree.js中同样提供灯光设置。\n\n------------- 中场休息 -------------\n\n俗话说一口吃不成胖子，研究和学习也不是一两天就直接能成大神的，研究了两天three.js后目前我能制作出的也只是简单的视角变化粒子动画而已。有很多更加酷炫的效果，更多好玩的动画，还需要更深入的研究。\n\n这一小节说的是灯光的设置，这在塑造立体感中是绝不可缺的设置之一。\n基础光的设置非常简单\n```javascript\nVar redLight = new THREE.Light(0xFF0000); // 一个红色光\n```\nTHREE.Light只是其他所有光源的基类，要让光源除了具有颜色的特性之外，我们需要其他光源。看看，下面的类图，是目前光源的继承结构。\n![](import-three/2.jpg)\n\n#### 光与材料的关系\n光与材料的关系，紧密相连。\n这里举个例子，有一种材料，属性值中有颜色，但是无论设置什么颜色，在没有设置光的情况下最终表现都是黑色，这种材料也是种常用材料，MeshLambertMaterial,中文译名为兰伯特网格材质\n\n```javascript\n<!-- 省略其他初始化基本元素 -->\nvar geometry = new Three.BoxGeometry( 10,10,10);// 盒子模型\nvar material = new Three.MeshLambertMaterial( { color:0xFFFF00} );// 兰伯特材料设置为黄色\nvar mesh = new Three.Mesh( geometry,material);\n// 设置光源\nvar light = new Three.DirectionalLight(0xffffff, 0.5);// 这里设置的是平行光\nlight.position.set(0,0,1);\nscene.add(light);\n\nmesh.position.set(0,0,0);\nscene.add(mesh);\nthis.renderer.render(scene, camera);\n```\n\n以上代码中，如果去掉光源添加，页面中表现是这样的：\n![没有设置光源的表现](import-three/3.jpg)\n我们简单的给他加一个白光的话，为了更清晰的看到效果，我设置了一些辅助的坐标轴和平面的显示，表现是这样：\n![有一个白光](import-three/4.jpg)\n我们可以看出物体最终表现出来的颜色与光有关，我们设置光源为白色，物体为黄色，最终呈现出的是黄色的物体。\n可能有人会以为光的颜色对物体没有影响，其实不然。\n\n还是以上代码。我们把光的颜色设置为红色\n```\nvar light = new Three.DirectionalLight(0xe20000, 0.5);/\n```\n效果最终是这样的。\n![](import-three/5.jpg)\n其实物体最终呈现出来的颜色是光线颜色和物体本身颜色的叠加色。如果我们设置光线为正蓝色，物体为正黄色的话，物体最终会表现为黑色。\n\n#### 纹理\n##### 基础纹理\n纹理对于一个物体有多重要是很容易被发现的一件事情。因为我们的眼睛无时无刻不在观察着周围的一切物体。\n常年混迹小破站看多了MMD之后的心得也告诉我，一个物体想要有更强的质感和更多的高级感，纹理就是必须的。\n\nthree.js里设置纹理，简单的来说是靠贴图的方式，那么怎么添加贴图呢。\n纹理类由three.Texture表示。定义一个新纹理可以这样写：\nthree.Texture构造函数为：\n`THREE.Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy )`\n具体每个参数的意思和支持类型可查询文档，实际使用例子\n```javascript\n<!-- 省略其他基础要素 -->\nvar geometry = new THREE.PlaneGeometry( 500, 300, 1, 1 ) // 画个平面\ngeometry.vertices[0].uv = new THREE.Vector2(0,0);// 纹理坐标由顶点的uv成员来表示,\ngeometry.vertices[1].uv = new THREE.Vector2(1,0);// 坐标点之间的顺序默认是逆时针方向,\ngeometry.vertices[2].uv = new THREE.Vector2(1,1);// 平面有4个顶点，所以我们只需要指定4个纹理坐标就行了，\ngeometry.vertices[3].uv = new THREE.Vector2(0,1);// 4个顶点分别对应了纹理的4个顶点\n// 当我们想要加载一张图片作为纹理时候，就要用到纹理加载器，写法如下：\nvar texture = THREE.ImageUtils.loadTexture(\"textures/a.jpg\",null,function(t){});\n// 第二个参数为null，表示时候要传入一个纹理坐标参数，来覆盖前面在geometry中的参数。\n// 第三个表示一个回调函数，表示成功加载纹理后需要执行的函数，参数t是传入的texture。\n// ----------------------------------------------------------------------\nvar material = new THREE.MeshBasicMaterial({map:texture});\n\nvar mesh = new THREE.Mesh( geometry,material );\nscene.add( mesh );\n```\n 在纹理准备好之后，我们最后一步是映射到物体上，这一步的时候注意，不是所有材料的物体都支持纹理的，\n 判断该材料接不接受纹理，只需要看参数项中是否有map参数即可，有即可接受纹理映射。\n \n ##### 复杂纹理\n 上面我们学习了简单的图片作为纹理，这在开发中很常用。但是想要更酷炫的效果，我们其实只需要设置复杂纹理即可有一种非常酷炫的效果。\n 所以这次我们来学习复杂纹理，即将canvas作为纹理映射到物体上的方法。\n \n 首先当然我们需要画一个canvas,这个就不详述了。\n \n 然后需要将canvas传递给`THREE.Texture`纹理。\n `texture = new THREE.Texture( canvas);`\n 注意设置needsUpdate属性。\n `texture.needsUpdate = true;`\n \n 接着把纹理映射到物体上\n `var material = new THREE.MeshBasicMaterial({map:texture});`\n 最后构造物体\n ```javascript\n var mesh = new THREE.Mesh( geometry,material );\n scene.add( mesh );\n ```\n至此，我们就完成了将canvas作为纹理的一个物体。\n\n在新版three.js中增加了`CanvasTexture`，与`Texture`唯一的区别就是，`CanvasTexture`已自带了值为`true`的`needsUpdate`属性，就不需要再设置了\n### 辅助工具\n至今仍然记得当年海报设计课老师跟大家说的，在打开PS，建好画布之后，第一件事是拉参考线！\n当然参考线在最终呈现给用户之前不能有，但是在开发时，参考线之类的辅助工具可以极好的帮助新手做出动画的效果\n和平面设计拉参考线有些不同，我们在three.js中没有固定的必须有的辅助工具，一切根据实际情况选用。\n#### 轨道控制(OrbitControls)\n`Orbit controls`（轨道控制器）可以使得相机围绕目标进行轨道运动。也就是我们常见的，鼠标拖动即可切换相机位置，十分方便，*开发必备*。\n同样是需要单独引入的效果.\n关于插件的引入，有个更为简单粗暴的方法，去github下载three.js开源源码，找到jsm文件夹，把文件夹下方的js拷贝到项目中，然后单独引入就可以了，需要注意插件之间的先后顺序关系\n```javascript\nimport * as THREE from '../build/three.module.js';\n\nimport { OrbitControls } from './jsm/controls/OrbitControls.js';\nimport { EffectComposer } from './jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from './jsm/postprocessing/RenderPass.js';\nimport { ShaderPass } from './jsm/postprocessing/ShaderPass.js';\nimport { UnrealBloomPass } from './jsm/postprocessing/UnrealBloomPass.js';\n```\n引入之后具体用法也很简单。首先是才camera定义好之后，定义一个新的OrbitControls对象。\n```javascript\nthis.controls = new OrbitControls( this.camera, container )\n```\n第二是开启`OrbitControls`后必须有一个`update`的过程，也就是我们常写的每帧更新`requestAnimationFrame()`\n```\nanimate: function () {\n\trequestAnimationFrame(this.animate)\n\tthis.controls.update();\n\tthis.renderer.render(this.scene, this.camera)\n},\n```\n### 开发中遇到的实际问题记录\nthree.js的文档，不得不说真的写的特别的简单，于是没有webGL和canvas基础的猿可能会遇到很多的小问题。这里就用来记录下这些小问题，以及在哪里能够查看到相关内容。\n \n#### 混合模式\nthree.js的官方文档中只提到了自定义混合模式方程，并没有在文档中提及已封装的混合模式，但是在实例中有做三种示范\n针对材料的混合模式演示猛击>[ materials / blending ](https://threejs.org/examples/?q=blending#webgl_materials_blending)\n[ > 自定义混合模式方程 < ](https://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E5%B8%B8%E9%87%8F(Constants)/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%B7%E5%90%88%E6%96%B9%E7%A8%8B(CustomBlendingEquation))\nthree.js封装的混合模式共五种：\n\n`NoBlending`: z-buffer值较大的像素将会遮挡z-buffer值较小的像素，没有纹理融合效果，设置纹理透明度无效。\n`NormalBlending`：默认选项，根据z-buffer正常显示纹理,这是标准混合模式，它单独使用顶层,而不将其颜色与其下面的层混合。\n`AdditiveBlending`：此混合模式只是将一个图层的像素值添加到另一个图层。如果值大于1（在RGB的情况下），则显示白色。线性减淡颜色值。由于它总是产生与输入相同或更浅的颜色，因此它也被称为“加亮”。\n`SubtractiveBlending`：此混合模式将一个图层的像素值减去另一个图层像素值。如果为负值，则显示黑色。\n`MultiplyBlending`：颜色混合，源图像RGB分量与目标图像RGB分量的相乘。\n\n用法举例：\n```javascript\nvar material = new Three.PointsMaterial({\n\tblending: Three.AdditiveBlending,\n})\n```\n\n#### three.js的辅助库stats.js显示帧数\nstats.js是three.js的作者开发的three.js的辅助库。主要用于检测动画运行时的帧数。\n\n\n### <a name=\"2\">挨最毒的打，啃最硬的骨</a>\n这部分的学习日记改来改了无数遍，真的是很坎坷，一样是因为目前three.js的发展迅速，网络上的教程大量失效。\n最后总结出来的是，只能去研究官方开源的项目中给出的例子里的写法，一条一条分析过去，找到自己不会的，单独去查这种学习方法。\n\n后期效果和后期动画可谓是目前three.js学习过程中最硬的骨头了。\n\n#### 辉光效果(UnrealBlooming)\n常用效果没有封装在three.js里，如有业务需求，需另外下载，下载方式见文章头部的<a href=\"#1\">补充</a>。\n辉光效果是我们常用的一种效果，可能有人会说，发光效果的话，每个模型的贴图带一个外发光不就可以了么。\n其实不然，辉光效果和给模型带一个发光效果，最大的不同之处是，辉光效果会影响周围环境光效，而单个模型中带发光效果则不行\n这一点上使得辉光效果比普通的自带发光的效果要好上很多倍。\n\n研究到效果时得出的结论是，百度出来的相关文章真的仅供参考，更加准确的用法，可以去看官网examples里的[ webgl_postprocessing_unreal_bloom_selective ](https://threejs.org/examples/?q=bloo#webgl_postprocessing_unreal_bloom_selective)\n点击效果演示右下方的按钮即可看到代码\n由于three.js的更迭十分得快，因此以官网例子为参考进行研究学习效率更高。\n\n#### dat.GUI\ndat.GUI 是一个轻量级的图形用户界面库（GUI 组件），使用这个库可以很容易地创建出能够改变代码变量的界面组件。\n- [dat.GUI的gitHub主页](https://github.com/dataarts/dat.gui)\n\n为什么这里我要单独写一节来说dat.GUI这个库呢，因为我在学习上一节辉光效果时，去参考了官方的案例。\n官方案例里，出现了这个目前我没学到过的代码，乍一看我无法彻底理解他的意思，案例里是这样写的：\n```javascript\nimport { GUI } from './jsm/libs/dat.gui.module.js';\n………………\nvar params = {\n\texposure: 1,\n\tbloomStrength: 1.5,\n\tbloomThreshold: 0,\n\tbloomRadius: 0\n};\nvar gui = new GUI();\ngui.add( params, 'exposure', 0.1, 2 ).onChange( function ( value ) {\n\trenderer.toneMappingExposure = Math.pow( value, 4.0 );\n} );\ngui.add( params, 'bloomThreshold', 0.0, 1.0 ).onChange( function ( value ) {\n\tbloomPass.threshold = Number( value );\n} );\ngui.add( params, 'bloomStrength', 0.0, 3.0 ).onChange( function ( value ) {\n\tbloomPass.strength = Number( value );\n} );\ngui.add( params, 'bloomRadius', 0.0, 1.0 ).step( 0.01 ).onChange( function ( value ) {\n\tbloomPass.radius = Number( value );\n} );\n………………\n```\n\n那么这段代码到底是做什么的呢？答案是我们在例子的右上方经常会看到的参数调节。\n所以这是个*辅助工具*，实际开发中会提升开发效率，因此还是建议使用的，当然时间允许的话\n\n![GUI在页面上具体表现为](import-three/1.jpg)\n\n#### 着色器Shader\n顶点着色器和片段着色器需要单独准备！\n\n指定type属性的理由：\ntype属性指定了［x-shader/x-vertex］和［x-shader/x-fragment］，这并不是HTML中定义的正式的写法。但是一般的浏览器如果遇到不识别的标签的话会无视掉的，浏览器不会认为这是javascript代码的。浏览器只会把它当成无意义的字符串，而程序中则可以使用标签里面的内容。\n```html\n<script type=\"x-shader/x-vertex\" id=\"vertexshader\">\n\t\t// 顶点着色器\n\t\tattribute float size;\n\t\tattribute vec3 customColor;\n\t\tvarying vec3 vColor;\n\t\tvoid main() {\n\t\t\tvColor = customColor;\n\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t\t\tgl_PointSize = size * ( 300.0 / -mvPosition.z );\n\t\t\tgl_Position = projectionMatrix * mvPosition;\n\t\t}\n</script>\n\n<script type=\"x-shader/x-fragment\" id=\"fragmentshader\">\n\t\t// 片段着色器\n\t\tuniform vec3 color;\n\t\tuniform sampler2D pointTexture;\n\t\tvarying vec3 vColor;\n\t\tvoid main() {\n\t\t\tgl_FragColor = vec4( color * vColor, 1.0 );\n\t\t\tgl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\n\t\t}\n</script>\n\n```\n\n","source":"_posts/import-three.md","raw":"---\ntitle: three.js学习笔记\ndate: 2019-10-11 16:42:51\ntags: 学习笔记\ncategory: 学习笔记\n---\n早些年就听说过D3和three.js，但是学习的难度劝退了我，现在重新捡起来，一是正好项目提前结束有了休息的时间，二是three.js的确能做出很酷炫的效果，着实令人心动\n### 开始\n开始学习前首先是很重要的，在项目中，特别是vue项目中引入three.js的方法。\n1、首先安装three.js\n`npm install three`\n2.接下来利用npm安装轨道控件插件：\n`npm install three-orbit-controls`\n3.接下来安装加载.obj和.mtl文件的插件：\n`npm i --save three-obj-mtl-loader`\n4.安装渲染器插件：\n`npm i --save three-css2drender`\n5、安装好以后，在页面中引入three.js并使用，在所调用页面引入的代码为：\n`import * as Three from ‘three’`\n原文链接：https://blog.csdn.net/baidu_41601299/article/details/88663673\n\n*补充：*\n如下载three.js辅助库[ stats.js ](https://github.com/mrdoob/stats.js),可以运行这行命令：\n`npm install stats.js`\n\n<a name=\"1\">补充二:</a>\n~~如需下载通道后期处理插件PostProcessing [npm链接](https://www.npmjs.com/package/postprocessing)\n`npm install three postprocessing`~~\n *切记！*不要去下载npm的打包好的插件，因为时效性比较差，最好的方法是去官方开源项目直接下载然后引入\n```javascript\nimport { Clock, PerspectiveCamera, Scene, WebGLRenderer } from \"three\";\nimport { BloomEffect, EffectComposer, EffectPass, RenderPass } from \"postprocessing\";\n……\nconst composer = new EffectComposer(new WebGLRenderer()); // 用法举例\n```\n\n*这个插件只包含了部分PostProcessing下的插件集合*，如果想引入其他的插件，具体看<a href=\"#2\"> 效果 </a>那一章\n\n### First Demo\n```html\n<template>\n  <div>\n    <div id=\"container\"></div>\n  </div>\n</template>\n\n<script>\n  import * as Three from 'three'\n\n  export default {\n    name: 'ThreeTest',\n    data () {\n      return {\n        camera: null,\n        scene: null,\n        renderer: null,\n        mesh: null\n      }\n    },\n    methods: {\n      init: function () {\n        let container = document.getElementById('container')\n        this.camera = new Three.PerspectiveCamera(70, container.clientWidth / container.clientHeight, 0.01, 10)\n        this.camera.position.z = 0.6\n        this.scene = new Three.Scene()\n        let geometry = new Three.BoxGeometry(0.2, 0.2, 0.2)\n        let material = new Three.MeshNormalMaterial()\n        this.mesh = new Three.Mesh(geometry, material)\n        this.scene.add(this.mesh)\n\n        this.renderer = new Three.WebGLRenderer({antialias: true})\n        this.renderer.setSize(container.clientWidth, container.clientHeight)\n        container.appendChild(this.renderer.domElement)\n      },\n      animate: function () {\n        requestAnimationFrame(this.animate)\n        this.mesh.rotation.x += 0.01\n        this.mesh.rotation.y += 0.02\n        this.renderer.render(this.scene, this.camera)\n      }\n    },\n    mounted () {\n      this.init()\n      this.animate()\n    }\n  }\n</script>\n<style scoped>\n  #container {\n    height: 400px;\n  }\n</style>\n```\n以上代码运行后，应该能看大一个在旋转着的多色正方体。\n\n### 三要素\n在three.js中想要将物体渲染到浏览器中，必须设置三个要素，分别是场景（scene）、相机（camera）和渲染器（renderer）。\n#### 场景(scene)\n场景的概念很容易理解，如果将html比作一个空间，我们希望在这个空间内上演一出戏码，那么首先需要给这场戏布置一个场景或者说是舞台，布置的方法也很简单，只需要new一个对象\n`var scene = new THREE.Scene();`\n\n#### 相机(camera)\n一场戏的呈现离不开看的人，也就是观众，camera通俗的来说就是视角点。\n我们设置了舞台之后我们还需要设置观众席或摄像机的位置。\n视角点的设置是决定这场戏呈现出来的最终效果的决定因素之一，有了视角点我们就可以轻易的控制哪些东西出现或不出现在观众和镜头的视线范围内。\n\n相机(camera)和场景不同，可以有很多种，就好比摄影中的各个镜头，一般我们最常用的是*透视相机(THREE.PerspectiveCamera)*\n我们在定义新相机的时候必须先指定一个相机类型。\n每个相机类型都是一个构造函数。这里我们只列出了PerspectiveCamera函数的用法。\n\n```javascript\nPerspectiveCamera(fov, aspect, near, far)\n```\n`Fov`(int): 相机的视锥体的垂直视野角\n`Aspect`(init): 相机视锥体的长宽比\n`Near`(int): 相机视锥体的近平面\n`Far`(int): 相机视锥体的远平面\n\n举个栗子：\n`var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);`\n\n#### 渲染器（renderer）\n几乎所有的在web中渲染图形的工具或框架中（例如echarts）,最后的一步都是渲染。\n渲染一般作为最后一个步骤，当我们把所有的静态图形，场景，相机等全部设置完毕后，进行渲染即可在web中看到最终效果。\n而我们在进行渲染前，必须先准备一个渲染器。\n定义一个渲染器可分以下三步\n```javascript\nvar renderer = new THREE.WebGLRenderer(); // 定义一个渲染器\nrenderer.setSize(window.innerWidth, window.innerHeight); // 渲染器设置高宽\ndocument.body.appendChild(renderer.domElement); // 将渲染器中的dom加入到指定的容器dom中\n```\n\n### 准备完毕\n当我们准备完了三要素之后，我们就该正式开演了，开演的这个过程我们也叫做渲染。\n渲染在这里是动词，和三要素之一的渲染器不同，渲染器是名词，用来指定渲染方式，渲染大小等内容\n而最终我们需要*用渲染器将准备好的元素渲染到网页上*\n\n```javascript\nrenderer.render( scene, camera, renderTarget, forceClear )\n```\n`scene`：必填。定义好的场景\n`camera`：必填。定义好的相机\n`renderTarget`：非必填。渲染的目标，默认是渲染到前面定义的render变量中\n`forceClear`：非必填。每次绘制之前都将画布的内容给清除，即使自动清除标志autoClear为false，也会清除。\n\n### 重要元素\n一场戏要能被称为戏，必不可少的元素还有很多，我们上述的三要素，仅仅是让我们的架子可以呈现出来，然而最关键的内容却为空，那就不能称之为戏。\n而这也是开发中最复杂最难的元素之一。\n#### Heroes\n首先我们需要演员或者道具出现在舞台上，在three.js中我们称他们为Things，物体。\n物体需要出现在舞台上分两步，当然这两步都是在渲染前进行的。\n第一步：定义一个物体 第二步：把物体添加到`舞台上`，就这么简单【X\n```javascript\n……省略参数定义\nvar line = new Three.Line(Geometry, Material );// 定义一条线,参数内容放到下面详述\nthis.scene.add( line ); // 加入到场景中\n```\n\n##### Object\nthree内置了多重对象，用于定义一个物体的类型，上述例子中，定义的就是一个线的对象作为物体。\n\n要注意的是，在开发过程中，我们往往定义好了材料和模型之后再写对象，但是对象的选择在开发过程中需要作为定义物体时*第一个思考*的内容，因为对象*直接决定*了材料和模型二者的*可选范围*。\n比如我想画一个点，那就必须先定义一个点的对象作为物体，然后再选择点对象下可选择的材料和模型。\n\n我们定义了一个对象后，该对象仍然只是一个空壳，我们需要给对象传入对象的材料和模型(部分对象不需要材质或者模型，需根据对象来决定是否传入)\n也就是上述代码中构造函数内的两个传参，Material和Geometry\n##### Material(材料)\n首先介绍的是Material，字面意思是材料，但是在three.js中，Material的构造函数和我们日常生活中的材料的定义有所不同。\n材料的种类有很多，在文档中我们可以分别查看到。这里不多赘述\n\n在实际开发过程中最复杂也是最常用的材料之一ShaderMaterial,另开一片叙述。\n\n##### Geometry(模型)\n任何的things构造函数都需要Material和Geometry两项参数。Geometry表示该物体选用的几何模型。\n\n当我们选用一个几何的时候，Geometry该选择哪个的问题很容易得到答案\nthree.js提供了大量的模型可供选择，例如平面模型PlaneGeometry，平面圆模型CircleBufferGeometry，\n在比如盒子模型BoxGeometry，环形扭结模型TorusKnotGeometry等等。\n```javascript\nvar geometry = new Three.PlaneGeometry( 5, 20, 32); // 由于第三步中的对象是Mesh网点对象，PlaneGeometry属于Mesh对象之一，因此可以选此模型。\nvar material = new Three.MeshBasicMaterial( {color: 0xffff00, side: Three.DoubleSide} ); // 由于对象是Mesh,模型是平面模型，可选材料被限制，MeshBasicMaterial为这种情况下可选的材料。\nvar planeDemo = new Three.Mesh( geometry, material );// 选择网点对象Mesh，将模型和材料作为参数传入对象。\nthis.scene.add( planeDemo );\n```\n\n重要的事情说两遍，需要注意的是，模型也需要根据对象的类型去选择。\n\n---\n小结：文章写到这里，如果理解透了的话，已经可以写出大部分的最基本的静态物体了。可以先试着写一个人脸模型或是一个静态粒子图\n#### Lights\n我们需要体现质感和更加丰富立体的物体时，灯光就是个强力的帮手，\nthree.js中同样提供灯光设置。\n\n------------- 中场休息 -------------\n\n俗话说一口吃不成胖子，研究和学习也不是一两天就直接能成大神的，研究了两天three.js后目前我能制作出的也只是简单的视角变化粒子动画而已。有很多更加酷炫的效果，更多好玩的动画，还需要更深入的研究。\n\n这一小节说的是灯光的设置，这在塑造立体感中是绝不可缺的设置之一。\n基础光的设置非常简单\n```javascript\nVar redLight = new THREE.Light(0xFF0000); // 一个红色光\n```\nTHREE.Light只是其他所有光源的基类，要让光源除了具有颜色的特性之外，我们需要其他光源。看看，下面的类图，是目前光源的继承结构。\n![](import-three/2.jpg)\n\n#### 光与材料的关系\n光与材料的关系，紧密相连。\n这里举个例子，有一种材料，属性值中有颜色，但是无论设置什么颜色，在没有设置光的情况下最终表现都是黑色，这种材料也是种常用材料，MeshLambertMaterial,中文译名为兰伯特网格材质\n\n```javascript\n<!-- 省略其他初始化基本元素 -->\nvar geometry = new Three.BoxGeometry( 10,10,10);// 盒子模型\nvar material = new Three.MeshLambertMaterial( { color:0xFFFF00} );// 兰伯特材料设置为黄色\nvar mesh = new Three.Mesh( geometry,material);\n// 设置光源\nvar light = new Three.DirectionalLight(0xffffff, 0.5);// 这里设置的是平行光\nlight.position.set(0,0,1);\nscene.add(light);\n\nmesh.position.set(0,0,0);\nscene.add(mesh);\nthis.renderer.render(scene, camera);\n```\n\n以上代码中，如果去掉光源添加，页面中表现是这样的：\n![没有设置光源的表现](import-three/3.jpg)\n我们简单的给他加一个白光的话，为了更清晰的看到效果，我设置了一些辅助的坐标轴和平面的显示，表现是这样：\n![有一个白光](import-three/4.jpg)\n我们可以看出物体最终表现出来的颜色与光有关，我们设置光源为白色，物体为黄色，最终呈现出的是黄色的物体。\n可能有人会以为光的颜色对物体没有影响，其实不然。\n\n还是以上代码。我们把光的颜色设置为红色\n```\nvar light = new Three.DirectionalLight(0xe20000, 0.5);/\n```\n效果最终是这样的。\n![](import-three/5.jpg)\n其实物体最终呈现出来的颜色是光线颜色和物体本身颜色的叠加色。如果我们设置光线为正蓝色，物体为正黄色的话，物体最终会表现为黑色。\n\n#### 纹理\n##### 基础纹理\n纹理对于一个物体有多重要是很容易被发现的一件事情。因为我们的眼睛无时无刻不在观察着周围的一切物体。\n常年混迹小破站看多了MMD之后的心得也告诉我，一个物体想要有更强的质感和更多的高级感，纹理就是必须的。\n\nthree.js里设置纹理，简单的来说是靠贴图的方式，那么怎么添加贴图呢。\n纹理类由three.Texture表示。定义一个新纹理可以这样写：\nthree.Texture构造函数为：\n`THREE.Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy )`\n具体每个参数的意思和支持类型可查询文档，实际使用例子\n```javascript\n<!-- 省略其他基础要素 -->\nvar geometry = new THREE.PlaneGeometry( 500, 300, 1, 1 ) // 画个平面\ngeometry.vertices[0].uv = new THREE.Vector2(0,0);// 纹理坐标由顶点的uv成员来表示,\ngeometry.vertices[1].uv = new THREE.Vector2(1,0);// 坐标点之间的顺序默认是逆时针方向,\ngeometry.vertices[2].uv = new THREE.Vector2(1,1);// 平面有4个顶点，所以我们只需要指定4个纹理坐标就行了，\ngeometry.vertices[3].uv = new THREE.Vector2(0,1);// 4个顶点分别对应了纹理的4个顶点\n// 当我们想要加载一张图片作为纹理时候，就要用到纹理加载器，写法如下：\nvar texture = THREE.ImageUtils.loadTexture(\"textures/a.jpg\",null,function(t){});\n// 第二个参数为null，表示时候要传入一个纹理坐标参数，来覆盖前面在geometry中的参数。\n// 第三个表示一个回调函数，表示成功加载纹理后需要执行的函数，参数t是传入的texture。\n// ----------------------------------------------------------------------\nvar material = new THREE.MeshBasicMaterial({map:texture});\n\nvar mesh = new THREE.Mesh( geometry,material );\nscene.add( mesh );\n```\n 在纹理准备好之后，我们最后一步是映射到物体上，这一步的时候注意，不是所有材料的物体都支持纹理的，\n 判断该材料接不接受纹理，只需要看参数项中是否有map参数即可，有即可接受纹理映射。\n \n ##### 复杂纹理\n 上面我们学习了简单的图片作为纹理，这在开发中很常用。但是想要更酷炫的效果，我们其实只需要设置复杂纹理即可有一种非常酷炫的效果。\n 所以这次我们来学习复杂纹理，即将canvas作为纹理映射到物体上的方法。\n \n 首先当然我们需要画一个canvas,这个就不详述了。\n \n 然后需要将canvas传递给`THREE.Texture`纹理。\n `texture = new THREE.Texture( canvas);`\n 注意设置needsUpdate属性。\n `texture.needsUpdate = true;`\n \n 接着把纹理映射到物体上\n `var material = new THREE.MeshBasicMaterial({map:texture});`\n 最后构造物体\n ```javascript\n var mesh = new THREE.Mesh( geometry,material );\n scene.add( mesh );\n ```\n至此，我们就完成了将canvas作为纹理的一个物体。\n\n在新版three.js中增加了`CanvasTexture`，与`Texture`唯一的区别就是，`CanvasTexture`已自带了值为`true`的`needsUpdate`属性，就不需要再设置了\n### 辅助工具\n至今仍然记得当年海报设计课老师跟大家说的，在打开PS，建好画布之后，第一件事是拉参考线！\n当然参考线在最终呈现给用户之前不能有，但是在开发时，参考线之类的辅助工具可以极好的帮助新手做出动画的效果\n和平面设计拉参考线有些不同，我们在three.js中没有固定的必须有的辅助工具，一切根据实际情况选用。\n#### 轨道控制(OrbitControls)\n`Orbit controls`（轨道控制器）可以使得相机围绕目标进行轨道运动。也就是我们常见的，鼠标拖动即可切换相机位置，十分方便，*开发必备*。\n同样是需要单独引入的效果.\n关于插件的引入，有个更为简单粗暴的方法，去github下载three.js开源源码，找到jsm文件夹，把文件夹下方的js拷贝到项目中，然后单独引入就可以了，需要注意插件之间的先后顺序关系\n```javascript\nimport * as THREE from '../build/three.module.js';\n\nimport { OrbitControls } from './jsm/controls/OrbitControls.js';\nimport { EffectComposer } from './jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from './jsm/postprocessing/RenderPass.js';\nimport { ShaderPass } from './jsm/postprocessing/ShaderPass.js';\nimport { UnrealBloomPass } from './jsm/postprocessing/UnrealBloomPass.js';\n```\n引入之后具体用法也很简单。首先是才camera定义好之后，定义一个新的OrbitControls对象。\n```javascript\nthis.controls = new OrbitControls( this.camera, container )\n```\n第二是开启`OrbitControls`后必须有一个`update`的过程，也就是我们常写的每帧更新`requestAnimationFrame()`\n```\nanimate: function () {\n\trequestAnimationFrame(this.animate)\n\tthis.controls.update();\n\tthis.renderer.render(this.scene, this.camera)\n},\n```\n### 开发中遇到的实际问题记录\nthree.js的文档，不得不说真的写的特别的简单，于是没有webGL和canvas基础的猿可能会遇到很多的小问题。这里就用来记录下这些小问题，以及在哪里能够查看到相关内容。\n \n#### 混合模式\nthree.js的官方文档中只提到了自定义混合模式方程，并没有在文档中提及已封装的混合模式，但是在实例中有做三种示范\n针对材料的混合模式演示猛击>[ materials / blending ](https://threejs.org/examples/?q=blending#webgl_materials_blending)\n[ > 自定义混合模式方程 < ](https://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E5%B8%B8%E9%87%8F(Constants)/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%B7%E5%90%88%E6%96%B9%E7%A8%8B(CustomBlendingEquation))\nthree.js封装的混合模式共五种：\n\n`NoBlending`: z-buffer值较大的像素将会遮挡z-buffer值较小的像素，没有纹理融合效果，设置纹理透明度无效。\n`NormalBlending`：默认选项，根据z-buffer正常显示纹理,这是标准混合模式，它单独使用顶层,而不将其颜色与其下面的层混合。\n`AdditiveBlending`：此混合模式只是将一个图层的像素值添加到另一个图层。如果值大于1（在RGB的情况下），则显示白色。线性减淡颜色值。由于它总是产生与输入相同或更浅的颜色，因此它也被称为“加亮”。\n`SubtractiveBlending`：此混合模式将一个图层的像素值减去另一个图层像素值。如果为负值，则显示黑色。\n`MultiplyBlending`：颜色混合，源图像RGB分量与目标图像RGB分量的相乘。\n\n用法举例：\n```javascript\nvar material = new Three.PointsMaterial({\n\tblending: Three.AdditiveBlending,\n})\n```\n\n#### three.js的辅助库stats.js显示帧数\nstats.js是three.js的作者开发的three.js的辅助库。主要用于检测动画运行时的帧数。\n\n\n### <a name=\"2\">挨最毒的打，啃最硬的骨</a>\n这部分的学习日记改来改了无数遍，真的是很坎坷，一样是因为目前three.js的发展迅速，网络上的教程大量失效。\n最后总结出来的是，只能去研究官方开源的项目中给出的例子里的写法，一条一条分析过去，找到自己不会的，单独去查这种学习方法。\n\n后期效果和后期动画可谓是目前three.js学习过程中最硬的骨头了。\n\n#### 辉光效果(UnrealBlooming)\n常用效果没有封装在three.js里，如有业务需求，需另外下载，下载方式见文章头部的<a href=\"#1\">补充</a>。\n辉光效果是我们常用的一种效果，可能有人会说，发光效果的话，每个模型的贴图带一个外发光不就可以了么。\n其实不然，辉光效果和给模型带一个发光效果，最大的不同之处是，辉光效果会影响周围环境光效，而单个模型中带发光效果则不行\n这一点上使得辉光效果比普通的自带发光的效果要好上很多倍。\n\n研究到效果时得出的结论是，百度出来的相关文章真的仅供参考，更加准确的用法，可以去看官网examples里的[ webgl_postprocessing_unreal_bloom_selective ](https://threejs.org/examples/?q=bloo#webgl_postprocessing_unreal_bloom_selective)\n点击效果演示右下方的按钮即可看到代码\n由于three.js的更迭十分得快，因此以官网例子为参考进行研究学习效率更高。\n\n#### dat.GUI\ndat.GUI 是一个轻量级的图形用户界面库（GUI 组件），使用这个库可以很容易地创建出能够改变代码变量的界面组件。\n- [dat.GUI的gitHub主页](https://github.com/dataarts/dat.gui)\n\n为什么这里我要单独写一节来说dat.GUI这个库呢，因为我在学习上一节辉光效果时，去参考了官方的案例。\n官方案例里，出现了这个目前我没学到过的代码，乍一看我无法彻底理解他的意思，案例里是这样写的：\n```javascript\nimport { GUI } from './jsm/libs/dat.gui.module.js';\n………………\nvar params = {\n\texposure: 1,\n\tbloomStrength: 1.5,\n\tbloomThreshold: 0,\n\tbloomRadius: 0\n};\nvar gui = new GUI();\ngui.add( params, 'exposure', 0.1, 2 ).onChange( function ( value ) {\n\trenderer.toneMappingExposure = Math.pow( value, 4.0 );\n} );\ngui.add( params, 'bloomThreshold', 0.0, 1.0 ).onChange( function ( value ) {\n\tbloomPass.threshold = Number( value );\n} );\ngui.add( params, 'bloomStrength', 0.0, 3.0 ).onChange( function ( value ) {\n\tbloomPass.strength = Number( value );\n} );\ngui.add( params, 'bloomRadius', 0.0, 1.0 ).step( 0.01 ).onChange( function ( value ) {\n\tbloomPass.radius = Number( value );\n} );\n………………\n```\n\n那么这段代码到底是做什么的呢？答案是我们在例子的右上方经常会看到的参数调节。\n所以这是个*辅助工具*，实际开发中会提升开发效率，因此还是建议使用的，当然时间允许的话\n\n![GUI在页面上具体表现为](import-three/1.jpg)\n\n#### 着色器Shader\n顶点着色器和片段着色器需要单独准备！\n\n指定type属性的理由：\ntype属性指定了［x-shader/x-vertex］和［x-shader/x-fragment］，这并不是HTML中定义的正式的写法。但是一般的浏览器如果遇到不识别的标签的话会无视掉的，浏览器不会认为这是javascript代码的。浏览器只会把它当成无意义的字符串，而程序中则可以使用标签里面的内容。\n```html\n<script type=\"x-shader/x-vertex\" id=\"vertexshader\">\n\t\t// 顶点着色器\n\t\tattribute float size;\n\t\tattribute vec3 customColor;\n\t\tvarying vec3 vColor;\n\t\tvoid main() {\n\t\t\tvColor = customColor;\n\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t\t\tgl_PointSize = size * ( 300.0 / -mvPosition.z );\n\t\t\tgl_Position = projectionMatrix * mvPosition;\n\t\t}\n</script>\n\n<script type=\"x-shader/x-fragment\" id=\"fragmentshader\">\n\t\t// 片段着色器\n\t\tuniform vec3 color;\n\t\tuniform sampler2D pointTexture;\n\t\tvarying vec3 vColor;\n\t\tvoid main() {\n\t\t\tgl_FragColor = vec4( color * vColor, 1.0 );\n\t\t\tgl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\n\t\t}\n</script>\n\n```\n\n","slug":"import-three","published":1,"updated":"2019-10-18T07:48:47.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tewmys00112c7k0p61n46b","content":"<p>早些年就听说过D3和three.js，但是学习的难度劝退了我，现在重新捡起来，一是正好项目提前结束有了休息的时间，二是three.js的确能做出很酷炫的效果，着实令人心动</p><h3 id=\"开始\"><a class=\"header-anchor\" href=\"#开始\">¶</a>开始</h3><p>开始学习前首先是很重要的，在项目中，特别是vue项目中引入three.js的方法。<br>\n1、首先安装three.js<br>\n<code>npm install three</code><br>\n2.接下来利用npm安装轨道控件插件：<br>\n<code>npm install three-orbit-controls</code><br>\n3.接下来安装加载.obj和.mtl文件的插件：<br>\n<code>npm i --save three-obj-mtl-loader</code><br>\n4.安装渲染器插件：<br>\n<code>npm i --save three-css2drender</code><br>\n5、安装好以后，在页面中引入three.js并使用，在所调用页面引入的代码为：<br>\n<code>import * as Three from ‘three’</code><br>\n原文链接：<a href=\"https://blog.csdn.net/baidu_41601299/article/details/88663673\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/baidu_41601299/article/details/88663673</a></p><a id=\"more\"></a>\n\n\n<p><em>补充：</em><br>\n如下载three.js辅助库<a href=\"https://github.com/mrdoob/stats.js\" target=\"_blank\" rel=\"noopener\"> stats.js </a>,可以运行这行命令：<br>\n<code>npm install stats.js</code></p>\n<p><a name=\"1\">补充二:</a><br>\n<s>如需下载通道后期处理插件PostProcessing <a href=\"https://www.npmjs.com/package/postprocessing\" target=\"_blank\" rel=\"noopener\">npm链接</a><br>\n<code>npm install three postprocessing</code></s><br>\n*切记！*不要去下载npm的打包好的插件，因为时效性比较差，最好的方法是去官方开源项目直接下载然后引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Clock, PerspectiveCamera, Scene, WebGLRenderer &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"three\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BloomEffect, EffectComposer, EffectPass, RenderPass &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"postprocessing\"</span>;</span><br><span class=\"line\">……</span><br><span class=\"line\"><span class=\"keyword\">const</span> composer = <span class=\"keyword\">new</span> EffectComposer(<span class=\"keyword\">new</span> WebGLRenderer()); <span class=\"comment\">// 用法举例</span></span><br></pre></td></tr></table></figure>\n<p><em>这个插件只包含了部分PostProcessing下的插件集合</em>，如果想引入其他的插件，具体看<a href=\"#2\"> 效果 </a>那一章</p>\n<h3 id=\"first-demo\"><a class=\"header-anchor\" href=\"#first-demo\">¶</a>First Demo</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Three <span class=\"keyword\">from</span> <span class=\"string\">'three'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    name: <span class=\"string\">'ThreeTest'</span>,</span></span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        camera: <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        scene: <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        renderer: <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        mesh: <span class=\"literal\">null</span></span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      init: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> container = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.camera = <span class=\"keyword\">new</span> Three.PerspectiveCamera(<span class=\"number\">70</span>, container.clientWidth / container.clientHeight, <span class=\"number\">0.01</span>, <span class=\"number\">10</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.camera.position.z = <span class=\"number\">0.6</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.scene = <span class=\"keyword\">new</span> Three.Scene()</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> geometry = <span class=\"keyword\">new</span> Three.BoxGeometry(<span class=\"number\">0.2</span>, <span class=\"number\">0.2</span>, <span class=\"number\">0.2</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> material = <span class=\"keyword\">new</span> Three.MeshNormalMaterial()</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.mesh = <span class=\"keyword\">new</span> Three.Mesh(geometry, material)</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.scene.add(<span class=\"keyword\">this</span>.mesh)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.renderer = <span class=\"keyword\">new</span> Three.WebGLRenderer(&#123;antialias: <span class=\"literal\">true</span>&#125;)</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.renderer.setSize(container.clientWidth, container.clientHeight)</span></span><br><span class=\"line\"><span class=\"actionscript\">        container.appendChild(<span class=\"keyword\">this</span>.renderer.domElement)</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">      animate: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        requestAnimationFrame(<span class=\"keyword\">this</span>.animate)</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.mesh.rotation.x += <span class=\"number\">0.01</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.mesh.rotation.y += <span class=\"number\">0.02</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.renderer.render(<span class=\"keyword\">this</span>.scene, <span class=\"keyword\">this</span>.camera)</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted () &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.init()</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.animate()</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-id\">#container</span> &#123;</span></span><br><span class=\"line\">    height: 400px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后，应该能看大一个在旋转着的多色正方体。</p>\n<h3 id=\"三要素\"><a class=\"header-anchor\" href=\"#三要素\">¶</a>三要素</h3>\n<p>在three.js中想要将物体渲染到浏览器中，必须设置三个要素，分别是场景（scene）、相机（camera）和渲染器（renderer）。</p>\n<h4 id=\"场景-scene\"><a class=\"header-anchor\" href=\"#场景-scene\">¶</a>场景(scene)</h4>\n<p>场景的概念很容易理解，如果将html比作一个空间，我们希望在这个空间内上演一出戏码，那么首先需要给这场戏布置一个场景或者说是舞台，布置的方法也很简单，只需要new一个对象<br>\n<code>var scene = new THREE.Scene();</code></p>\n<h4 id=\"相机-camera\"><a class=\"header-anchor\" href=\"#相机-camera\">¶</a>相机(camera)</h4>\n<p>一场戏的呈现离不开看的人，也就是观众，camera通俗的来说就是视角点。<br>\n我们设置了舞台之后我们还需要设置观众席或摄像机的位置。<br>\n视角点的设置是决定这场戏呈现出来的最终效果的决定因素之一，有了视角点我们就可以轻易的控制哪些东西出现或不出现在观众和镜头的视线范围内。</p>\n<p>相机(camera)和场景不同，可以有很多种，就好比摄影中的各个镜头，一般我们最常用的是<em>透视相机(THREE.PerspectiveCamera)</em><br>\n我们在定义新相机的时候必须先指定一个相机类型。<br>\n每个相机类型都是一个构造函数。这里我们只列出了PerspectiveCamera函数的用法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PerspectiveCamera(fov, aspect, near, far)</span><br></pre></td></tr></table></figure>\n<p><code>Fov</code>(int): 相机的视锥体的垂直视野角<br>\n<code>Aspect</code>(init): 相机视锥体的长宽比<br>\n<code>Near</code>(int): 相机视锥体的近平面<br>\n<code>Far</code>(int): 相机视锥体的远平面</p>\n<p>举个栗子：<br>\n<code>var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);</code></p>\n<h4 id=\"渲染器-renderer\"><a class=\"header-anchor\" href=\"#渲染器-renderer\">¶</a>渲染器（renderer）</h4>\n<p>几乎所有的在web中渲染图形的工具或框架中（例如echarts）,最后的一步都是渲染。<br>\n渲染一般作为最后一个步骤，当我们把所有的静态图形，场景，相机等全部设置完毕后，进行渲染即可在web中看到最终效果。<br>\n而我们在进行渲染前，必须先准备一个渲染器。<br>\n定义一个渲染器可分以下三步</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> renderer = <span class=\"keyword\">new</span> THREE.WebGLRenderer(); <span class=\"comment\">// 定义一个渲染器</span></span><br><span class=\"line\">renderer.setSize(<span class=\"built_in\">window</span>.innerWidth, <span class=\"built_in\">window</span>.innerHeight); <span class=\"comment\">// 渲染器设置高宽</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(renderer.domElement); <span class=\"comment\">// 将渲染器中的dom加入到指定的容器dom中</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"准备完毕\"><a class=\"header-anchor\" href=\"#准备完毕\">¶</a>准备完毕</h3>\n<p>当我们准备完了三要素之后，我们就该正式开演了，开演的这个过程我们也叫做渲染。<br>\n渲染在这里是动词，和三要素之一的渲染器不同，渲染器是名词，用来指定渲染方式，渲染大小等内容<br>\n而最终我们需要<em>用渲染器将准备好的元素渲染到网页上</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">renderer.render( scene, camera, renderTarget, forceClear )</span><br></pre></td></tr></table></figure>\n<p><code>scene</code>：必填。定义好的场景<br>\n<code>camera</code>：必填。定义好的相机<br>\n<code>renderTarget</code>：非必填。渲染的目标，默认是渲染到前面定义的render变量中<br>\n<code>forceClear</code>：非必填。每次绘制之前都将画布的内容给清除，即使自动清除标志autoClear为false，也会清除。</p>\n<h3 id=\"重要元素\"><a class=\"header-anchor\" href=\"#重要元素\">¶</a>重要元素</h3>\n<p>一场戏要能被称为戏，必不可少的元素还有很多，我们上述的三要素，仅仅是让我们的架子可以呈现出来，然而最关键的内容却为空，那就不能称之为戏。<br>\n而这也是开发中最复杂最难的元素之一。</p>\n<h4 id=\"heroes\"><a class=\"header-anchor\" href=\"#heroes\">¶</a>Heroes</h4>\n<p>首先我们需要演员或者道具出现在舞台上，在three.js中我们称他们为Things，物体。<br>\n物体需要出现在舞台上分两步，当然这两步都是在渲染前进行的。<br>\n第一步：定义一个物体 第二步：把物体添加到<code>舞台上</code>，就这么简单【X</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">……省略参数定义</span><br><span class=\"line\"><span class=\"keyword\">var</span> line = <span class=\"keyword\">new</span> Three.Line(Geometry, Material );<span class=\"comment\">// 定义一条线,参数内容放到下面详述</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.scene.add( line ); <span class=\"comment\">// 加入到场景中</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"object\"><a class=\"header-anchor\" href=\"#object\">¶</a>Object</h5>\n<p>three内置了多重对象，用于定义一个物体的类型，上述例子中，定义的就是一个线的对象作为物体。</p>\n<p>要注意的是，在开发过程中，我们往往定义好了材料和模型之后再写对象，但是对象的选择在开发过程中需要作为定义物体时<em>第一个思考</em>的内容，因为对象<em>直接决定</em>了材料和模型二者的<em>可选范围</em>。<br>\n比如我想画一个点，那就必须先定义一个点的对象作为物体，然后再选择点对象下可选择的材料和模型。</p>\n<p>我们定义了一个对象后，该对象仍然只是一个空壳，我们需要给对象传入对象的材料和模型(部分对象不需要材质或者模型，需根据对象来决定是否传入)<br>\n也就是上述代码中构造函数内的两个传参，Material和Geometry</p>\n<h5 id=\"material-材料\"><a class=\"header-anchor\" href=\"#material-材料\">¶</a>Material(材料)</h5>\n<p>首先介绍的是Material，字面意思是材料，但是在three.js中，Material的构造函数和我们日常生活中的材料的定义有所不同。<br>\n材料的种类有很多，在文档中我们可以分别查看到。这里不多赘述</p>\n<p>在实际开发过程中最复杂也是最常用的材料之一ShaderMaterial,另开一片叙述。</p>\n<h5 id=\"geometry-模型\"><a class=\"header-anchor\" href=\"#geometry-模型\">¶</a>Geometry(模型)</h5>\n<p>任何的things构造函数都需要Material和Geometry两项参数。Geometry表示该物体选用的几何模型。</p>\n<p>当我们选用一个几何的时候，Geometry该选择哪个的问题很容易得到答案<br>\nthree.js提供了大量的模型可供选择，例如平面模型PlaneGeometry，平面圆模型CircleBufferGeometry，<br>\n在比如盒子模型BoxGeometry，环形扭结模型TorusKnotGeometry等等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> Three.PlaneGeometry( <span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">32</span>); <span class=\"comment\">// 由于第三步中的对象是Mesh网点对象，PlaneGeometry属于Mesh对象之一，因此可以选此模型。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> Three.MeshBasicMaterial( &#123;<span class=\"attr\">color</span>: <span class=\"number\">0xffff00</span>, <span class=\"attr\">side</span>: Three.DoubleSide&#125; ); <span class=\"comment\">// 由于对象是Mesh,模型是平面模型，可选材料被限制，MeshBasicMaterial为这种情况下可选的材料。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> planeDemo = <span class=\"keyword\">new</span> Three.Mesh( geometry, material );<span class=\"comment\">// 选择网点对象Mesh，将模型和材料作为参数传入对象。</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.scene.add( planeDemo );</span><br></pre></td></tr></table></figure>\n<p>重要的事情说两遍，需要注意的是，模型也需要根据对象的类型去选择。</p>\n<hr>\n<p>小结：文章写到这里，如果理解透了的话，已经可以写出大部分的最基本的静态物体了。可以先试着写一个人脸模型或是一个静态粒子图</p>\n<h4 id=\"lights\"><a class=\"header-anchor\" href=\"#lights\">¶</a>Lights</h4>\n<p>我们需要体现质感和更加丰富立体的物体时，灯光就是个强力的帮手，<br>\nthree.js中同样提供灯光设置。</p>\n<p>------------- 中场休息 -------------</p>\n<p>俗话说一口吃不成胖子，研究和学习也不是一两天就直接能成大神的，研究了两天three.js后目前我能制作出的也只是简单的视角变化粒子动画而已。有很多更加酷炫的效果，更多好玩的动画，还需要更深入的研究。</p>\n<p>这一小节说的是灯光的设置，这在塑造立体感中是绝不可缺的设置之一。<br>\n基础光的设置非常简单</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Var redLight = <span class=\"keyword\">new</span> THREE.Light(<span class=\"number\">0xFF0000</span>); <span class=\"comment\">// 一个红色光</span></span><br></pre></td></tr></table></figure>\n<p>THREE.Light只是其他所有光源的基类，要让光源除了具有颜色的特性之外，我们需要其他光源。看看，下面的类图，是目前光源的继承结构。<br>\n<img src=\"/2019/10/11/import-three/2.jpg\" alt></p>\n<h4 id=\"光与材料的关系\"><a class=\"header-anchor\" href=\"#光与材料的关系\">¶</a>光与材料的关系</h4>\n<p>光与材料的关系，紧密相连。<br>\n这里举个例子，有一种材料，属性值中有颜色，但是无论设置什么颜色，在没有设置光的情况下最终表现都是黑色，这种材料也是种常用材料，MeshLambertMaterial,中文译名为兰伯特网格材质</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 省略其他初始化基本元素 --&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> Three.BoxGeometry( <span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">10</span>);<span class=\"comment\">// 盒子模型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> Three.MeshLambertMaterial( &#123; <span class=\"attr\">color</span>:<span class=\"number\">0xFFFF00</span>&#125; );<span class=\"comment\">// 兰伯特材料设置为黄色</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mesh = <span class=\"keyword\">new</span> Three.Mesh( geometry,material);</span><br><span class=\"line\"><span class=\"comment\">// 设置光源</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> light = <span class=\"keyword\">new</span> Three.DirectionalLight(<span class=\"number\">0xffffff</span>, <span class=\"number\">0.5</span>);<span class=\"comment\">// 这里设置的是平行光</span></span><br><span class=\"line\">light.position.set(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">scene.add(light);</span><br><span class=\"line\"></span><br><span class=\"line\">mesh.position.set(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">scene.add(mesh);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.renderer.render(scene, camera);</span><br></pre></td></tr></table></figure>\n<p>以上代码中，如果去掉光源添加，页面中表现是这样的：<br>\n<img src=\"/2019/10/11/import-three/3.jpg\" alt=\"没有设置光源的表现\"><br>\n我们简单的给他加一个白光的话，为了更清晰的看到效果，我设置了一些辅助的坐标轴和平面的显示，表现是这样：<br>\n<img src=\"/2019/10/11/import-three/4.jpg\" alt=\"有一个白光\"><br>\n我们可以看出物体最终表现出来的颜色与光有关，我们设置光源为白色，物体为黄色，最终呈现出的是黄色的物体。<br>\n可能有人会以为光的颜色对物体没有影响，其实不然。</p>\n<p>还是以上代码。我们把光的颜色设置为红色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var light = new Three.DirectionalLight(0xe20000, 0.5);/</span><br></pre></td></tr></table></figure>\n<p>效果最终是这样的。<br>\n<img src=\"/2019/10/11/import-three/5.jpg\" alt><br>\n其实物体最终呈现出来的颜色是光线颜色和物体本身颜色的叠加色。如果我们设置光线为正蓝色，物体为正黄色的话，物体最终会表现为黑色。</p>\n<h4 id=\"纹理\"><a class=\"header-anchor\" href=\"#纹理\">¶</a>纹理</h4>\n<h5 id=\"基础纹理\"><a class=\"header-anchor\" href=\"#基础纹理\">¶</a>基础纹理</h5>\n<p>纹理对于一个物体有多重要是很容易被发现的一件事情。因为我们的眼睛无时无刻不在观察着周围的一切物体。<br>\n常年混迹小破站看多了MMD之后的心得也告诉我，一个物体想要有更强的质感和更多的高级感，纹理就是必须的。</p>\n<p>three.js里设置纹理，简单的来说是靠贴图的方式，那么怎么添加贴图呢。<br>\n纹理类由three.Texture表示。定义一个新纹理可以这样写：<br>\nthree.Texture构造函数为：<br>\n<code>THREE.Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy )</code><br>\n具体每个参数的意思和支持类型可查询文档，实际使用例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 省略其他基础要素 --&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> THREE.PlaneGeometry( <span class=\"number\">500</span>, <span class=\"number\">300</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span> ) <span class=\"comment\">// 画个平面</span></span><br><span class=\"line\">geometry.vertices[<span class=\"number\">0</span>].uv = <span class=\"keyword\">new</span> THREE.Vector2(<span class=\"number\">0</span>,<span class=\"number\">0</span>);<span class=\"comment\">// 纹理坐标由顶点的uv成员来表示,</span></span><br><span class=\"line\">geometry.vertices[<span class=\"number\">1</span>].uv = <span class=\"keyword\">new</span> THREE.Vector2(<span class=\"number\">1</span>,<span class=\"number\">0</span>);<span class=\"comment\">// 坐标点之间的顺序默认是逆时针方向,</span></span><br><span class=\"line\">geometry.vertices[<span class=\"number\">2</span>].uv = <span class=\"keyword\">new</span> THREE.Vector2(<span class=\"number\">1</span>,<span class=\"number\">1</span>);<span class=\"comment\">// 平面有4个顶点，所以我们只需要指定4个纹理坐标就行了，</span></span><br><span class=\"line\">geometry.vertices[<span class=\"number\">3</span>].uv = <span class=\"keyword\">new</span> THREE.Vector2(<span class=\"number\">0</span>,<span class=\"number\">1</span>);<span class=\"comment\">// 4个顶点分别对应了纹理的4个顶点</span></span><br><span class=\"line\"><span class=\"comment\">// 当我们想要加载一张图片作为纹理时候，就要用到纹理加载器，写法如下：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> texture = THREE.ImageUtils.loadTexture(<span class=\"string\">\"textures/a.jpg\"</span>,<span class=\"literal\">null</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>)</span>&#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 第二个参数为null，表示时候要传入一个纹理坐标参数，来覆盖前面在geometry中的参数。</span></span><br><span class=\"line\"><span class=\"comment\">// 第三个表示一个回调函数，表示成功加载纹理后需要执行的函数，参数t是传入的texture。</span></span><br><span class=\"line\"><span class=\"comment\">// ----------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> THREE.MeshBasicMaterial(&#123;<span class=\"attr\">map</span>:texture&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mesh = <span class=\"keyword\">new</span> THREE.Mesh( geometry,material );</span><br><span class=\"line\">scene.add( mesh );</span><br></pre></td></tr></table></figure>\n<p>在纹理准备好之后，我们最后一步是映射到物体上，这一步的时候注意，不是所有材料的物体都支持纹理的，<br>\n判断该材料接不接受纹理，只需要看参数项中是否有map参数即可，有即可接受纹理映射。</p>\n<h5 id=\"复杂纹理\"><a class=\"header-anchor\" href=\"#复杂纹理\">¶</a>复杂纹理</h5>\n<p>上面我们学习了简单的图片作为纹理，这在开发中很常用。但是想要更酷炫的效果，我们其实只需要设置复杂纹理即可有一种非常酷炫的效果。<br>\n所以这次我们来学习复杂纹理，即将canvas作为纹理映射到物体上的方法。</p>\n<p>首先当然我们需要画一个canvas,这个就不详述了。</p>\n<p>然后需要将canvas传递给<code>THREE.Texture</code>纹理。<br>\n<code>texture = new THREE.Texture( canvas);</code><br>\n注意设置needsUpdate属性。<br>\n<code>texture.needsUpdate = true;</code></p>\n<p>接着把纹理映射到物体上<br>\n<code>var material = new THREE.MeshBasicMaterial({map:texture});</code><br>\n最后构造物体</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mesh = <span class=\"keyword\">new</span> THREE.Mesh( geometry,material );</span><br><span class=\"line\">scene.add( mesh );</span><br></pre></td></tr></table></figure>\n<p>至此，我们就完成了将canvas作为纹理的一个物体。</p>\n<p>在新版three.js中增加了<code>CanvasTexture</code>，与<code>Texture</code>唯一的区别就是，<code>CanvasTexture</code>已自带了值为<code>true</code>的<code>needsUpdate</code>属性，就不需要再设置了</p>\n<h3 id=\"辅助工具\"><a class=\"header-anchor\" href=\"#辅助工具\">¶</a>辅助工具</h3>\n<p>至今仍然记得当年海报设计课老师跟大家说的，在打开PS，建好画布之后，第一件事是拉参考线！<br>\n当然参考线在最终呈现给用户之前不能有，但是在开发时，参考线之类的辅助工具可以极好的帮助新手做出动画的效果<br>\n和平面设计拉参考线有些不同，我们在three.js中没有固定的必须有的辅助工具，一切根据实际情况选用。</p>\n<h4 id=\"轨道控制-orbitcontrols\"><a class=\"header-anchor\" href=\"#轨道控制-orbitcontrols\">¶</a>轨道控制(OrbitControls)</h4>\n<p><code>Orbit controls</code>（轨道控制器）可以使得相机围绕目标进行轨道运动。也就是我们常见的，鼠标拖动即可切换相机位置，十分方便，<em>开发必备</em>。<br>\n同样是需要单独引入的效果.<br>\n关于插件的引入，有个更为简单粗暴的方法，去github下载three.js开源源码，找到jsm文件夹，把文件夹下方的js拷贝到项目中，然后单独引入就可以了，需要注意插件之间的先后顺序关系</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> THREE <span class=\"keyword\">from</span> <span class=\"string\">'../build/three.module.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; OrbitControls &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./jsm/controls/OrbitControls.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; EffectComposer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./jsm/postprocessing/EffectComposer.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; RenderPass &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./jsm/postprocessing/RenderPass.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ShaderPass &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./jsm/postprocessing/ShaderPass.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; UnrealBloomPass &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./jsm/postprocessing/UnrealBloomPass.js'</span>;</span><br></pre></td></tr></table></figure>\n<p>引入之后具体用法也很简单。首先是才camera定义好之后，定义一个新的OrbitControls对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.controls = <span class=\"keyword\">new</span> OrbitControls( <span class=\"keyword\">this</span>.camera, container )</span><br></pre></td></tr></table></figure>\n<p>第二是开启<code>OrbitControls</code>后必须有一个<code>update</code>的过程，也就是我们常写的每帧更新<code>requestAnimationFrame()</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animate: function () &#123;</span><br><span class=\"line\">\trequestAnimationFrame(this.animate)</span><br><span class=\"line\">\tthis.controls.update();</span><br><span class=\"line\">\tthis.renderer.render(this.scene, this.camera)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"开发中遇到的实际问题记录\"><a class=\"header-anchor\" href=\"#开发中遇到的实际问题记录\">¶</a>开发中遇到的实际问题记录</h3>\n<p>three.js的文档，不得不说真的写的特别的简单，于是没有webGL和canvas基础的猿可能会遇到很多的小问题。这里就用来记录下这些小问题，以及在哪里能够查看到相关内容。</p>\n<h4 id=\"混合模式\"><a class=\"header-anchor\" href=\"#混合模式\">¶</a>混合模式</h4>\n<p>three.js的官方文档中只提到了自定义混合模式方程，并没有在文档中提及已封装的混合模式，但是在实例中有做三种示范<br>\n针对材料的混合模式演示猛击&gt;<a href=\"https://threejs.org/examples/?q=blending#webgl_materials_blending\" target=\"_blank\" rel=\"noopener\"> materials / blending </a><br>\n<a href=\"https://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E5%B8%B8%E9%87%8F(Constants)/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%B7%E5%90%88%E6%96%B9%E7%A8%8B(CustomBlendingEquation)\" target=\"_blank\" rel=\"noopener\"> &gt; 自定义混合模式方程 &lt; </a><br>\nthree.js封装的混合模式共五种：</p>\n<p><code>NoBlending</code>: z-buffer值较大的像素将会遮挡z-buffer值较小的像素，没有纹理融合效果，设置纹理透明度无效。<br>\n<code>NormalBlending</code>：默认选项，根据z-buffer正常显示纹理,这是标准混合模式，它单独使用顶层,而不将其颜色与其下面的层混合。<br>\n<code>AdditiveBlending</code>：此混合模式只是将一个图层的像素值添加到另一个图层。如果值大于1（在RGB的情况下），则显示白色。线性减淡颜色值。由于它总是产生与输入相同或更浅的颜色，因此它也被称为“加亮”。<br>\n<code>SubtractiveBlending</code>：此混合模式将一个图层的像素值减去另一个图层像素值。如果为负值，则显示黑色。<br>\n<code>MultiplyBlending</code>：颜色混合，源图像RGB分量与目标图像RGB分量的相乘。</p>\n<p>用法举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> Three.PointsMaterial(&#123;</span><br><span class=\"line\">\tblending: Three.AdditiveBlending,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"three-js的辅助库stats-js显示帧数\"><a class=\"header-anchor\" href=\"#three-js的辅助库stats-js显示帧数\">¶</a>three.js的辅助库stats.js显示帧数</h4>\n<p>stats.js是three.js的作者开发的three.js的辅助库。主要用于检测动画运行时的帧数。</p>\n<h3 id=\"a-name-2-挨最毒的打-啃最硬的骨-a\"><a class=\"header-anchor\" href=\"#a-name-2-挨最毒的打-啃最硬的骨-a\">¶</a><a name=\"2\">挨最毒的打，啃最硬的骨</a></h3>\n<p>这部分的学习日记改来改了无数遍，真的是很坎坷，一样是因为目前three.js的发展迅速，网络上的教程大量失效。<br>\n最后总结出来的是，只能去研究官方开源的项目中给出的例子里的写法，一条一条分析过去，找到自己不会的，单独去查这种学习方法。</p>\n<p>后期效果和后期动画可谓是目前three.js学习过程中最硬的骨头了。</p>\n<h4 id=\"辉光效果-unrealblooming\"><a class=\"header-anchor\" href=\"#辉光效果-unrealblooming\">¶</a>辉光效果(UnrealBlooming)</h4>\n<p>常用效果没有封装在three.js里，如有业务需求，需另外下载，下载方式见文章头部的<a href=\"#1\">补充</a>。<br>\n辉光效果是我们常用的一种效果，可能有人会说，发光效果的话，每个模型的贴图带一个外发光不就可以了么。<br>\n其实不然，辉光效果和给模型带一个发光效果，最大的不同之处是，辉光效果会影响周围环境光效，而单个模型中带发光效果则不行<br>\n这一点上使得辉光效果比普通的自带发光的效果要好上很多倍。</p>\n<p>研究到效果时得出的结论是，百度出来的相关文章真的仅供参考，更加准确的用法，可以去看官网examples里的<a href=\"https://threejs.org/examples/?q=bloo#webgl_postprocessing_unreal_bloom_selective\" target=\"_blank\" rel=\"noopener\"> webgl_postprocessing_unreal_bloom_selective </a><br>\n点击效果演示右下方的按钮即可看到代码<br>\n由于three.js的更迭十分得快，因此以官网例子为参考进行研究学习效率更高。</p>\n<h4 id=\"dat-gui\"><a class=\"header-anchor\" href=\"#dat-gui\">¶</a>dat.GUI</h4>\n<p>dat.GUI 是一个轻量级的图形用户界面库（GUI 组件），使用这个库可以很容易地创建出能够改变代码变量的界面组件。</p>\n<ul>\n<li><a href=\"https://github.com/dataarts/dat.gui\" target=\"_blank\" rel=\"noopener\">dat.GUI的gitHub主页</a></li>\n</ul>\n<p>为什么这里我要单独写一节来说dat.GUI这个库呢，因为我在学习上一节辉光效果时，去参考了官方的案例。<br>\n官方案例里，出现了这个目前我没学到过的代码，乍一看我无法彻底理解他的意思，案例里是这样写的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; GUI &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./jsm/libs/dat.gui.module.js'</span>;</span><br><span class=\"line\">………………</span><br><span class=\"line\"><span class=\"keyword\">var</span> params = &#123;</span><br><span class=\"line\">\texposure: <span class=\"number\">1</span>,</span><br><span class=\"line\">\tbloomStrength: <span class=\"number\">1.5</span>,</span><br><span class=\"line\">\tbloomThreshold: <span class=\"number\">0</span>,</span><br><span class=\"line\">\tbloomRadius: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> gui = <span class=\"keyword\">new</span> GUI();</span><br><span class=\"line\">gui.add( params, <span class=\"string\">'exposure'</span>, <span class=\"number\">0.1</span>, <span class=\"number\">2</span> ).onChange( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">\trenderer.toneMappingExposure = <span class=\"built_in\">Math</span>.pow( value, <span class=\"number\">4.0</span> );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\">gui.add( params, <span class=\"string\">'bloomThreshold'</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span> ).onChange( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">\tbloomPass.threshold = <span class=\"built_in\">Number</span>( value );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\">gui.add( params, <span class=\"string\">'bloomStrength'</span>, <span class=\"number\">0.0</span>, <span class=\"number\">3.0</span> ).onChange( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">\tbloomPass.strength = <span class=\"built_in\">Number</span>( value );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\">gui.add( params, <span class=\"string\">'bloomRadius'</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span> ).step( <span class=\"number\">0.01</span> ).onChange( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">\tbloomPass.radius = <span class=\"built_in\">Number</span>( value );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\">………………</span><br></pre></td></tr></table></figure>\n<p>那么这段代码到底是做什么的呢？答案是我们在例子的右上方经常会看到的参数调节。<br>\n所以这是个<em>辅助工具</em>，实际开发中会提升开发效率，因此还是建议使用的，当然时间允许的话</p>\n<p><img src=\"/2019/10/11/import-three/1.jpg\" alt=\"GUI在页面上具体表现为\"></p>\n<h4 id=\"着色器shader\"><a class=\"header-anchor\" href=\"#着色器shader\">¶</a>着色器Shader</h4>\n<p>顶点着色器和片段着色器需要单独准备！</p>\n<p>指定type属性的理由：<br>\ntype属性指定了［x-shader/x-vertex］和［x-shader/x-fragment］，这并不是HTML中定义的正式的写法。但是一般的浏览器如果遇到不识别的标签的话会无视掉的，浏览器不会认为这是javascript代码的。浏览器只会把它当成无意义的字符串，而程序中则可以使用标签里面的内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"x-shader/x-vertex\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"vertexshader\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">// 顶点着色器</span></span></span><br><span class=\"line\">\t\tattribute float size;</span><br><span class=\"line\">\t\tattribute vec3 customColor;</span><br><span class=\"line\">\t\tvarying vec3 vColor;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">void</span> main() &#123;</span></span><br><span class=\"line\">\t\t\tvColor = customColor;</span><br><span class=\"line\">\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );</span><br><span class=\"line\">\t\t\tgl_PointSize = size * ( 300.0 / -mvPosition.z );</span><br><span class=\"line\">\t\t\tgl_Position = projectionMatrix * mvPosition;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"x-shader/x-fragment\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fragmentshader\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">// 片段着色器</span></span></span><br><span class=\"line\">\t\tuniform vec3 color;</span><br><span class=\"line\">\t\tuniform sampler2D pointTexture;</span><br><span class=\"line\">\t\tvarying vec3 vColor;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">void</span> main() &#123;</span></span><br><span class=\"line\">\t\t\tgl_FragColor = vec4( color * vColor, 1.0 );</span><br><span class=\"line\">\t\t\tgl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":12508,"excerpt":"<p>早些年就听说过D3和three.js，但是学习的难度劝退了我，现在重新捡起来，一是正好项目提前结束有了休息的时间，二是three.js的确能做出很酷炫的效果，着实令人心动</p><h3 id=\"开始\"><a class=\"header-anchor\" href=\"#开始\">¶</a>开始</h3><p>开始学习前首先是很重要的，在项目中，特别是vue项目中引入three.js的方法。<br>\n1、首先安装three.js<br>\n<code>npm install three</code><br>\n2.接下来利用npm安装轨道控件插件：<br>\n<code>npm install three-orbit-controls</code><br>\n3.接下来安装加载.obj和.mtl文件的插件：<br>\n<code>npm i --save three-obj-mtl-loader</code><br>\n4.安装渲染器插件：<br>\n<code>npm i --save three-css2drender</code><br>\n5、安装好以后，在页面中引入three.js并使用，在所调用页面引入的代码为：<br>\n<code>import * as Three from ‘three’</code><br>\n原文链接：<a href=\"https://blog.csdn.net/baidu_41601299/article/details/88663673\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/baidu_41601299/article/details/88663673</a></p>","more":"\n\n\n<p><em>补充：</em><br>\n如下载three.js辅助库<a href=\"https://github.com/mrdoob/stats.js\" target=\"_blank\" rel=\"noopener\"> stats.js </a>,可以运行这行命令：<br>\n<code>npm install stats.js</code></p>\n<p><a name=\"1\">补充二:</a><br>\n<s>如需下载通道后期处理插件PostProcessing <a href=\"https://www.npmjs.com/package/postprocessing\" target=\"_blank\" rel=\"noopener\">npm链接</a><br>\n<code>npm install three postprocessing</code></s><br>\n*切记！*不要去下载npm的打包好的插件，因为时效性比较差，最好的方法是去官方开源项目直接下载然后引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Clock, PerspectiveCamera, Scene, WebGLRenderer &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"three\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BloomEffect, EffectComposer, EffectPass, RenderPass &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"postprocessing\"</span>;</span><br><span class=\"line\">……</span><br><span class=\"line\"><span class=\"keyword\">const</span> composer = <span class=\"keyword\">new</span> EffectComposer(<span class=\"keyword\">new</span> WebGLRenderer()); <span class=\"comment\">// 用法举例</span></span><br></pre></td></tr></table></figure>\n<p><em>这个插件只包含了部分PostProcessing下的插件集合</em>，如果想引入其他的插件，具体看<a href=\"#2\"> 效果 </a>那一章</p>\n<h3 id=\"first-demo\"><a class=\"header-anchor\" href=\"#first-demo\">¶</a>First Demo</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Three <span class=\"keyword\">from</span> <span class=\"string\">'three'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    name: <span class=\"string\">'ThreeTest'</span>,</span></span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        camera: <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        scene: <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        renderer: <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        mesh: <span class=\"literal\">null</span></span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      init: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> container = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.camera = <span class=\"keyword\">new</span> Three.PerspectiveCamera(<span class=\"number\">70</span>, container.clientWidth / container.clientHeight, <span class=\"number\">0.01</span>, <span class=\"number\">10</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.camera.position.z = <span class=\"number\">0.6</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.scene = <span class=\"keyword\">new</span> Three.Scene()</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> geometry = <span class=\"keyword\">new</span> Three.BoxGeometry(<span class=\"number\">0.2</span>, <span class=\"number\">0.2</span>, <span class=\"number\">0.2</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> material = <span class=\"keyword\">new</span> Three.MeshNormalMaterial()</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.mesh = <span class=\"keyword\">new</span> Three.Mesh(geometry, material)</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.scene.add(<span class=\"keyword\">this</span>.mesh)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.renderer = <span class=\"keyword\">new</span> Three.WebGLRenderer(&#123;antialias: <span class=\"literal\">true</span>&#125;)</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.renderer.setSize(container.clientWidth, container.clientHeight)</span></span><br><span class=\"line\"><span class=\"actionscript\">        container.appendChild(<span class=\"keyword\">this</span>.renderer.domElement)</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">      animate: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        requestAnimationFrame(<span class=\"keyword\">this</span>.animate)</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.mesh.rotation.x += <span class=\"number\">0.01</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.mesh.rotation.y += <span class=\"number\">0.02</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.renderer.render(<span class=\"keyword\">this</span>.scene, <span class=\"keyword\">this</span>.camera)</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted () &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.init()</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">this</span>.animate()</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-id\">#container</span> &#123;</span></span><br><span class=\"line\">    height: 400px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后，应该能看大一个在旋转着的多色正方体。</p>\n<h3 id=\"三要素\"><a class=\"header-anchor\" href=\"#三要素\">¶</a>三要素</h3>\n<p>在three.js中想要将物体渲染到浏览器中，必须设置三个要素，分别是场景（scene）、相机（camera）和渲染器（renderer）。</p>\n<h4 id=\"场景-scene\"><a class=\"header-anchor\" href=\"#场景-scene\">¶</a>场景(scene)</h4>\n<p>场景的概念很容易理解，如果将html比作一个空间，我们希望在这个空间内上演一出戏码，那么首先需要给这场戏布置一个场景或者说是舞台，布置的方法也很简单，只需要new一个对象<br>\n<code>var scene = new THREE.Scene();</code></p>\n<h4 id=\"相机-camera\"><a class=\"header-anchor\" href=\"#相机-camera\">¶</a>相机(camera)</h4>\n<p>一场戏的呈现离不开看的人，也就是观众，camera通俗的来说就是视角点。<br>\n我们设置了舞台之后我们还需要设置观众席或摄像机的位置。<br>\n视角点的设置是决定这场戏呈现出来的最终效果的决定因素之一，有了视角点我们就可以轻易的控制哪些东西出现或不出现在观众和镜头的视线范围内。</p>\n<p>相机(camera)和场景不同，可以有很多种，就好比摄影中的各个镜头，一般我们最常用的是<em>透视相机(THREE.PerspectiveCamera)</em><br>\n我们在定义新相机的时候必须先指定一个相机类型。<br>\n每个相机类型都是一个构造函数。这里我们只列出了PerspectiveCamera函数的用法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PerspectiveCamera(fov, aspect, near, far)</span><br></pre></td></tr></table></figure>\n<p><code>Fov</code>(int): 相机的视锥体的垂直视野角<br>\n<code>Aspect</code>(init): 相机视锥体的长宽比<br>\n<code>Near</code>(int): 相机视锥体的近平面<br>\n<code>Far</code>(int): 相机视锥体的远平面</p>\n<p>举个栗子：<br>\n<code>var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);</code></p>\n<h4 id=\"渲染器-renderer\"><a class=\"header-anchor\" href=\"#渲染器-renderer\">¶</a>渲染器（renderer）</h4>\n<p>几乎所有的在web中渲染图形的工具或框架中（例如echarts）,最后的一步都是渲染。<br>\n渲染一般作为最后一个步骤，当我们把所有的静态图形，场景，相机等全部设置完毕后，进行渲染即可在web中看到最终效果。<br>\n而我们在进行渲染前，必须先准备一个渲染器。<br>\n定义一个渲染器可分以下三步</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> renderer = <span class=\"keyword\">new</span> THREE.WebGLRenderer(); <span class=\"comment\">// 定义一个渲染器</span></span><br><span class=\"line\">renderer.setSize(<span class=\"built_in\">window</span>.innerWidth, <span class=\"built_in\">window</span>.innerHeight); <span class=\"comment\">// 渲染器设置高宽</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(renderer.domElement); <span class=\"comment\">// 将渲染器中的dom加入到指定的容器dom中</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"准备完毕\"><a class=\"header-anchor\" href=\"#准备完毕\">¶</a>准备完毕</h3>\n<p>当我们准备完了三要素之后，我们就该正式开演了，开演的这个过程我们也叫做渲染。<br>\n渲染在这里是动词，和三要素之一的渲染器不同，渲染器是名词，用来指定渲染方式，渲染大小等内容<br>\n而最终我们需要<em>用渲染器将准备好的元素渲染到网页上</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">renderer.render( scene, camera, renderTarget, forceClear )</span><br></pre></td></tr></table></figure>\n<p><code>scene</code>：必填。定义好的场景<br>\n<code>camera</code>：必填。定义好的相机<br>\n<code>renderTarget</code>：非必填。渲染的目标，默认是渲染到前面定义的render变量中<br>\n<code>forceClear</code>：非必填。每次绘制之前都将画布的内容给清除，即使自动清除标志autoClear为false，也会清除。</p>\n<h3 id=\"重要元素\"><a class=\"header-anchor\" href=\"#重要元素\">¶</a>重要元素</h3>\n<p>一场戏要能被称为戏，必不可少的元素还有很多，我们上述的三要素，仅仅是让我们的架子可以呈现出来，然而最关键的内容却为空，那就不能称之为戏。<br>\n而这也是开发中最复杂最难的元素之一。</p>\n<h4 id=\"heroes\"><a class=\"header-anchor\" href=\"#heroes\">¶</a>Heroes</h4>\n<p>首先我们需要演员或者道具出现在舞台上，在three.js中我们称他们为Things，物体。<br>\n物体需要出现在舞台上分两步，当然这两步都是在渲染前进行的。<br>\n第一步：定义一个物体 第二步：把物体添加到<code>舞台上</code>，就这么简单【X</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">……省略参数定义</span><br><span class=\"line\"><span class=\"keyword\">var</span> line = <span class=\"keyword\">new</span> Three.Line(Geometry, Material );<span class=\"comment\">// 定义一条线,参数内容放到下面详述</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.scene.add( line ); <span class=\"comment\">// 加入到场景中</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"object\"><a class=\"header-anchor\" href=\"#object\">¶</a>Object</h5>\n<p>three内置了多重对象，用于定义一个物体的类型，上述例子中，定义的就是一个线的对象作为物体。</p>\n<p>要注意的是，在开发过程中，我们往往定义好了材料和模型之后再写对象，但是对象的选择在开发过程中需要作为定义物体时<em>第一个思考</em>的内容，因为对象<em>直接决定</em>了材料和模型二者的<em>可选范围</em>。<br>\n比如我想画一个点，那就必须先定义一个点的对象作为物体，然后再选择点对象下可选择的材料和模型。</p>\n<p>我们定义了一个对象后，该对象仍然只是一个空壳，我们需要给对象传入对象的材料和模型(部分对象不需要材质或者模型，需根据对象来决定是否传入)<br>\n也就是上述代码中构造函数内的两个传参，Material和Geometry</p>\n<h5 id=\"material-材料\"><a class=\"header-anchor\" href=\"#material-材料\">¶</a>Material(材料)</h5>\n<p>首先介绍的是Material，字面意思是材料，但是在three.js中，Material的构造函数和我们日常生活中的材料的定义有所不同。<br>\n材料的种类有很多，在文档中我们可以分别查看到。这里不多赘述</p>\n<p>在实际开发过程中最复杂也是最常用的材料之一ShaderMaterial,另开一片叙述。</p>\n<h5 id=\"geometry-模型\"><a class=\"header-anchor\" href=\"#geometry-模型\">¶</a>Geometry(模型)</h5>\n<p>任何的things构造函数都需要Material和Geometry两项参数。Geometry表示该物体选用的几何模型。</p>\n<p>当我们选用一个几何的时候，Geometry该选择哪个的问题很容易得到答案<br>\nthree.js提供了大量的模型可供选择，例如平面模型PlaneGeometry，平面圆模型CircleBufferGeometry，<br>\n在比如盒子模型BoxGeometry，环形扭结模型TorusKnotGeometry等等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> Three.PlaneGeometry( <span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">32</span>); <span class=\"comment\">// 由于第三步中的对象是Mesh网点对象，PlaneGeometry属于Mesh对象之一，因此可以选此模型。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> Three.MeshBasicMaterial( &#123;<span class=\"attr\">color</span>: <span class=\"number\">0xffff00</span>, <span class=\"attr\">side</span>: Three.DoubleSide&#125; ); <span class=\"comment\">// 由于对象是Mesh,模型是平面模型，可选材料被限制，MeshBasicMaterial为这种情况下可选的材料。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> planeDemo = <span class=\"keyword\">new</span> Three.Mesh( geometry, material );<span class=\"comment\">// 选择网点对象Mesh，将模型和材料作为参数传入对象。</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.scene.add( planeDemo );</span><br></pre></td></tr></table></figure>\n<p>重要的事情说两遍，需要注意的是，模型也需要根据对象的类型去选择。</p>\n<hr>\n<p>小结：文章写到这里，如果理解透了的话，已经可以写出大部分的最基本的静态物体了。可以先试着写一个人脸模型或是一个静态粒子图</p>\n<h4 id=\"lights\"><a class=\"header-anchor\" href=\"#lights\">¶</a>Lights</h4>\n<p>我们需要体现质感和更加丰富立体的物体时，灯光就是个强力的帮手，<br>\nthree.js中同样提供灯光设置。</p>\n<p>------------- 中场休息 -------------</p>\n<p>俗话说一口吃不成胖子，研究和学习也不是一两天就直接能成大神的，研究了两天three.js后目前我能制作出的也只是简单的视角变化粒子动画而已。有很多更加酷炫的效果，更多好玩的动画，还需要更深入的研究。</p>\n<p>这一小节说的是灯光的设置，这在塑造立体感中是绝不可缺的设置之一。<br>\n基础光的设置非常简单</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Var redLight = <span class=\"keyword\">new</span> THREE.Light(<span class=\"number\">0xFF0000</span>); <span class=\"comment\">// 一个红色光</span></span><br></pre></td></tr></table></figure>\n<p>THREE.Light只是其他所有光源的基类，要让光源除了具有颜色的特性之外，我们需要其他光源。看看，下面的类图，是目前光源的继承结构。<br>\n<img src=\"/2019/10/11/import-three/2.jpg\" alt></p>\n<h4 id=\"光与材料的关系\"><a class=\"header-anchor\" href=\"#光与材料的关系\">¶</a>光与材料的关系</h4>\n<p>光与材料的关系，紧密相连。<br>\n这里举个例子，有一种材料，属性值中有颜色，但是无论设置什么颜色，在没有设置光的情况下最终表现都是黑色，这种材料也是种常用材料，MeshLambertMaterial,中文译名为兰伯特网格材质</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 省略其他初始化基本元素 --&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> Three.BoxGeometry( <span class=\"number\">10</span>,<span class=\"number\">10</span>,<span class=\"number\">10</span>);<span class=\"comment\">// 盒子模型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> Three.MeshLambertMaterial( &#123; <span class=\"attr\">color</span>:<span class=\"number\">0xFFFF00</span>&#125; );<span class=\"comment\">// 兰伯特材料设置为黄色</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mesh = <span class=\"keyword\">new</span> Three.Mesh( geometry,material);</span><br><span class=\"line\"><span class=\"comment\">// 设置光源</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> light = <span class=\"keyword\">new</span> Three.DirectionalLight(<span class=\"number\">0xffffff</span>, <span class=\"number\">0.5</span>);<span class=\"comment\">// 这里设置的是平行光</span></span><br><span class=\"line\">light.position.set(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">scene.add(light);</span><br><span class=\"line\"></span><br><span class=\"line\">mesh.position.set(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">scene.add(mesh);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.renderer.render(scene, camera);</span><br></pre></td></tr></table></figure>\n<p>以上代码中，如果去掉光源添加，页面中表现是这样的：<br>\n<img src=\"/2019/10/11/import-three/3.jpg\" alt=\"没有设置光源的表现\"><br>\n我们简单的给他加一个白光的话，为了更清晰的看到效果，我设置了一些辅助的坐标轴和平面的显示，表现是这样：<br>\n<img src=\"/2019/10/11/import-three/4.jpg\" alt=\"有一个白光\"><br>\n我们可以看出物体最终表现出来的颜色与光有关，我们设置光源为白色，物体为黄色，最终呈现出的是黄色的物体。<br>\n可能有人会以为光的颜色对物体没有影响，其实不然。</p>\n<p>还是以上代码。我们把光的颜色设置为红色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var light = new Three.DirectionalLight(0xe20000, 0.5);/</span><br></pre></td></tr></table></figure>\n<p>效果最终是这样的。<br>\n<img src=\"/2019/10/11/import-three/5.jpg\" alt><br>\n其实物体最终呈现出来的颜色是光线颜色和物体本身颜色的叠加色。如果我们设置光线为正蓝色，物体为正黄色的话，物体最终会表现为黑色。</p>\n<h4 id=\"纹理\"><a class=\"header-anchor\" href=\"#纹理\">¶</a>纹理</h4>\n<h5 id=\"基础纹理\"><a class=\"header-anchor\" href=\"#基础纹理\">¶</a>基础纹理</h5>\n<p>纹理对于一个物体有多重要是很容易被发现的一件事情。因为我们的眼睛无时无刻不在观察着周围的一切物体。<br>\n常年混迹小破站看多了MMD之后的心得也告诉我，一个物体想要有更强的质感和更多的高级感，纹理就是必须的。</p>\n<p>three.js里设置纹理，简单的来说是靠贴图的方式，那么怎么添加贴图呢。<br>\n纹理类由three.Texture表示。定义一个新纹理可以这样写：<br>\nthree.Texture构造函数为：<br>\n<code>THREE.Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy )</code><br>\n具体每个参数的意思和支持类型可查询文档，实际使用例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 省略其他基础要素 --&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> THREE.PlaneGeometry( <span class=\"number\">500</span>, <span class=\"number\">300</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span> ) <span class=\"comment\">// 画个平面</span></span><br><span class=\"line\">geometry.vertices[<span class=\"number\">0</span>].uv = <span class=\"keyword\">new</span> THREE.Vector2(<span class=\"number\">0</span>,<span class=\"number\">0</span>);<span class=\"comment\">// 纹理坐标由顶点的uv成员来表示,</span></span><br><span class=\"line\">geometry.vertices[<span class=\"number\">1</span>].uv = <span class=\"keyword\">new</span> THREE.Vector2(<span class=\"number\">1</span>,<span class=\"number\">0</span>);<span class=\"comment\">// 坐标点之间的顺序默认是逆时针方向,</span></span><br><span class=\"line\">geometry.vertices[<span class=\"number\">2</span>].uv = <span class=\"keyword\">new</span> THREE.Vector2(<span class=\"number\">1</span>,<span class=\"number\">1</span>);<span class=\"comment\">// 平面有4个顶点，所以我们只需要指定4个纹理坐标就行了，</span></span><br><span class=\"line\">geometry.vertices[<span class=\"number\">3</span>].uv = <span class=\"keyword\">new</span> THREE.Vector2(<span class=\"number\">0</span>,<span class=\"number\">1</span>);<span class=\"comment\">// 4个顶点分别对应了纹理的4个顶点</span></span><br><span class=\"line\"><span class=\"comment\">// 当我们想要加载一张图片作为纹理时候，就要用到纹理加载器，写法如下：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> texture = THREE.ImageUtils.loadTexture(<span class=\"string\">\"textures/a.jpg\"</span>,<span class=\"literal\">null</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>)</span>&#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 第二个参数为null，表示时候要传入一个纹理坐标参数，来覆盖前面在geometry中的参数。</span></span><br><span class=\"line\"><span class=\"comment\">// 第三个表示一个回调函数，表示成功加载纹理后需要执行的函数，参数t是传入的texture。</span></span><br><span class=\"line\"><span class=\"comment\">// ----------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> THREE.MeshBasicMaterial(&#123;<span class=\"attr\">map</span>:texture&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mesh = <span class=\"keyword\">new</span> THREE.Mesh( geometry,material );</span><br><span class=\"line\">scene.add( mesh );</span><br></pre></td></tr></table></figure>\n<p>在纹理准备好之后，我们最后一步是映射到物体上，这一步的时候注意，不是所有材料的物体都支持纹理的，<br>\n判断该材料接不接受纹理，只需要看参数项中是否有map参数即可，有即可接受纹理映射。</p>\n<h5 id=\"复杂纹理\"><a class=\"header-anchor\" href=\"#复杂纹理\">¶</a>复杂纹理</h5>\n<p>上面我们学习了简单的图片作为纹理，这在开发中很常用。但是想要更酷炫的效果，我们其实只需要设置复杂纹理即可有一种非常酷炫的效果。<br>\n所以这次我们来学习复杂纹理，即将canvas作为纹理映射到物体上的方法。</p>\n<p>首先当然我们需要画一个canvas,这个就不详述了。</p>\n<p>然后需要将canvas传递给<code>THREE.Texture</code>纹理。<br>\n<code>texture = new THREE.Texture( canvas);</code><br>\n注意设置needsUpdate属性。<br>\n<code>texture.needsUpdate = true;</code></p>\n<p>接着把纹理映射到物体上<br>\n<code>var material = new THREE.MeshBasicMaterial({map:texture});</code><br>\n最后构造物体</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mesh = <span class=\"keyword\">new</span> THREE.Mesh( geometry,material );</span><br><span class=\"line\">scene.add( mesh );</span><br></pre></td></tr></table></figure>\n<p>至此，我们就完成了将canvas作为纹理的一个物体。</p>\n<p>在新版three.js中增加了<code>CanvasTexture</code>，与<code>Texture</code>唯一的区别就是，<code>CanvasTexture</code>已自带了值为<code>true</code>的<code>needsUpdate</code>属性，就不需要再设置了</p>\n<h3 id=\"辅助工具\"><a class=\"header-anchor\" href=\"#辅助工具\">¶</a>辅助工具</h3>\n<p>至今仍然记得当年海报设计课老师跟大家说的，在打开PS，建好画布之后，第一件事是拉参考线！<br>\n当然参考线在最终呈现给用户之前不能有，但是在开发时，参考线之类的辅助工具可以极好的帮助新手做出动画的效果<br>\n和平面设计拉参考线有些不同，我们在three.js中没有固定的必须有的辅助工具，一切根据实际情况选用。</p>\n<h4 id=\"轨道控制-orbitcontrols\"><a class=\"header-anchor\" href=\"#轨道控制-orbitcontrols\">¶</a>轨道控制(OrbitControls)</h4>\n<p><code>Orbit controls</code>（轨道控制器）可以使得相机围绕目标进行轨道运动。也就是我们常见的，鼠标拖动即可切换相机位置，十分方便，<em>开发必备</em>。<br>\n同样是需要单独引入的效果.<br>\n关于插件的引入，有个更为简单粗暴的方法，去github下载three.js开源源码，找到jsm文件夹，把文件夹下方的js拷贝到项目中，然后单独引入就可以了，需要注意插件之间的先后顺序关系</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> THREE <span class=\"keyword\">from</span> <span class=\"string\">'../build/three.module.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; OrbitControls &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./jsm/controls/OrbitControls.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; EffectComposer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./jsm/postprocessing/EffectComposer.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; RenderPass &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./jsm/postprocessing/RenderPass.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ShaderPass &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./jsm/postprocessing/ShaderPass.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; UnrealBloomPass &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./jsm/postprocessing/UnrealBloomPass.js'</span>;</span><br></pre></td></tr></table></figure>\n<p>引入之后具体用法也很简单。首先是才camera定义好之后，定义一个新的OrbitControls对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.controls = <span class=\"keyword\">new</span> OrbitControls( <span class=\"keyword\">this</span>.camera, container )</span><br></pre></td></tr></table></figure>\n<p>第二是开启<code>OrbitControls</code>后必须有一个<code>update</code>的过程，也就是我们常写的每帧更新<code>requestAnimationFrame()</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animate: function () &#123;</span><br><span class=\"line\">\trequestAnimationFrame(this.animate)</span><br><span class=\"line\">\tthis.controls.update();</span><br><span class=\"line\">\tthis.renderer.render(this.scene, this.camera)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"开发中遇到的实际问题记录\"><a class=\"header-anchor\" href=\"#开发中遇到的实际问题记录\">¶</a>开发中遇到的实际问题记录</h3>\n<p>three.js的文档，不得不说真的写的特别的简单，于是没有webGL和canvas基础的猿可能会遇到很多的小问题。这里就用来记录下这些小问题，以及在哪里能够查看到相关内容。</p>\n<h4 id=\"混合模式\"><a class=\"header-anchor\" href=\"#混合模式\">¶</a>混合模式</h4>\n<p>three.js的官方文档中只提到了自定义混合模式方程，并没有在文档中提及已封装的混合模式，但是在实例中有做三种示范<br>\n针对材料的混合模式演示猛击&gt;<a href=\"https://threejs.org/examples/?q=blending#webgl_materials_blending\" target=\"_blank\" rel=\"noopener\"> materials / blending </a><br>\n<a href=\"https://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E5%B8%B8%E9%87%8F(Constants)/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%B7%E5%90%88%E6%96%B9%E7%A8%8B(CustomBlendingEquation)\" target=\"_blank\" rel=\"noopener\"> &gt; 自定义混合模式方程 &lt; </a><br>\nthree.js封装的混合模式共五种：</p>\n<p><code>NoBlending</code>: z-buffer值较大的像素将会遮挡z-buffer值较小的像素，没有纹理融合效果，设置纹理透明度无效。<br>\n<code>NormalBlending</code>：默认选项，根据z-buffer正常显示纹理,这是标准混合模式，它单独使用顶层,而不将其颜色与其下面的层混合。<br>\n<code>AdditiveBlending</code>：此混合模式只是将一个图层的像素值添加到另一个图层。如果值大于1（在RGB的情况下），则显示白色。线性减淡颜色值。由于它总是产生与输入相同或更浅的颜色，因此它也被称为“加亮”。<br>\n<code>SubtractiveBlending</code>：此混合模式将一个图层的像素值减去另一个图层像素值。如果为负值，则显示黑色。<br>\n<code>MultiplyBlending</code>：颜色混合，源图像RGB分量与目标图像RGB分量的相乘。</p>\n<p>用法举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> Three.PointsMaterial(&#123;</span><br><span class=\"line\">\tblending: Three.AdditiveBlending,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"three-js的辅助库stats-js显示帧数\"><a class=\"header-anchor\" href=\"#three-js的辅助库stats-js显示帧数\">¶</a>three.js的辅助库stats.js显示帧数</h4>\n<p>stats.js是three.js的作者开发的three.js的辅助库。主要用于检测动画运行时的帧数。</p>\n<h3 id=\"a-name-2-挨最毒的打-啃最硬的骨-a\"><a class=\"header-anchor\" href=\"#a-name-2-挨最毒的打-啃最硬的骨-a\">¶</a><a name=\"2\">挨最毒的打，啃最硬的骨</a></h3>\n<p>这部分的学习日记改来改了无数遍，真的是很坎坷，一样是因为目前three.js的发展迅速，网络上的教程大量失效。<br>\n最后总结出来的是，只能去研究官方开源的项目中给出的例子里的写法，一条一条分析过去，找到自己不会的，单独去查这种学习方法。</p>\n<p>后期效果和后期动画可谓是目前three.js学习过程中最硬的骨头了。</p>\n<h4 id=\"辉光效果-unrealblooming\"><a class=\"header-anchor\" href=\"#辉光效果-unrealblooming\">¶</a>辉光效果(UnrealBlooming)</h4>\n<p>常用效果没有封装在three.js里，如有业务需求，需另外下载，下载方式见文章头部的<a href=\"#1\">补充</a>。<br>\n辉光效果是我们常用的一种效果，可能有人会说，发光效果的话，每个模型的贴图带一个外发光不就可以了么。<br>\n其实不然，辉光效果和给模型带一个发光效果，最大的不同之处是，辉光效果会影响周围环境光效，而单个模型中带发光效果则不行<br>\n这一点上使得辉光效果比普通的自带发光的效果要好上很多倍。</p>\n<p>研究到效果时得出的结论是，百度出来的相关文章真的仅供参考，更加准确的用法，可以去看官网examples里的<a href=\"https://threejs.org/examples/?q=bloo#webgl_postprocessing_unreal_bloom_selective\" target=\"_blank\" rel=\"noopener\"> webgl_postprocessing_unreal_bloom_selective </a><br>\n点击效果演示右下方的按钮即可看到代码<br>\n由于three.js的更迭十分得快，因此以官网例子为参考进行研究学习效率更高。</p>\n<h4 id=\"dat-gui\"><a class=\"header-anchor\" href=\"#dat-gui\">¶</a>dat.GUI</h4>\n<p>dat.GUI 是一个轻量级的图形用户界面库（GUI 组件），使用这个库可以很容易地创建出能够改变代码变量的界面组件。</p>\n<ul>\n<li><a href=\"https://github.com/dataarts/dat.gui\" target=\"_blank\" rel=\"noopener\">dat.GUI的gitHub主页</a></li>\n</ul>\n<p>为什么这里我要单独写一节来说dat.GUI这个库呢，因为我在学习上一节辉光效果时，去参考了官方的案例。<br>\n官方案例里，出现了这个目前我没学到过的代码，乍一看我无法彻底理解他的意思，案例里是这样写的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; GUI &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./jsm/libs/dat.gui.module.js'</span>;</span><br><span class=\"line\">………………</span><br><span class=\"line\"><span class=\"keyword\">var</span> params = &#123;</span><br><span class=\"line\">\texposure: <span class=\"number\">1</span>,</span><br><span class=\"line\">\tbloomStrength: <span class=\"number\">1.5</span>,</span><br><span class=\"line\">\tbloomThreshold: <span class=\"number\">0</span>,</span><br><span class=\"line\">\tbloomRadius: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> gui = <span class=\"keyword\">new</span> GUI();</span><br><span class=\"line\">gui.add( params, <span class=\"string\">'exposure'</span>, <span class=\"number\">0.1</span>, <span class=\"number\">2</span> ).onChange( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">\trenderer.toneMappingExposure = <span class=\"built_in\">Math</span>.pow( value, <span class=\"number\">4.0</span> );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\">gui.add( params, <span class=\"string\">'bloomThreshold'</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span> ).onChange( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">\tbloomPass.threshold = <span class=\"built_in\">Number</span>( value );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\">gui.add( params, <span class=\"string\">'bloomStrength'</span>, <span class=\"number\">0.0</span>, <span class=\"number\">3.0</span> ).onChange( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">\tbloomPass.strength = <span class=\"built_in\">Number</span>( value );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\">gui.add( params, <span class=\"string\">'bloomRadius'</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span> ).step( <span class=\"number\">0.01</span> ).onChange( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">\tbloomPass.radius = <span class=\"built_in\">Number</span>( value );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\">………………</span><br></pre></td></tr></table></figure>\n<p>那么这段代码到底是做什么的呢？答案是我们在例子的右上方经常会看到的参数调节。<br>\n所以这是个<em>辅助工具</em>，实际开发中会提升开发效率，因此还是建议使用的，当然时间允许的话</p>\n<p><img src=\"/2019/10/11/import-three/1.jpg\" alt=\"GUI在页面上具体表现为\"></p>\n<h4 id=\"着色器shader\"><a class=\"header-anchor\" href=\"#着色器shader\">¶</a>着色器Shader</h4>\n<p>顶点着色器和片段着色器需要单独准备！</p>\n<p>指定type属性的理由：<br>\ntype属性指定了［x-shader/x-vertex］和［x-shader/x-fragment］，这并不是HTML中定义的正式的写法。但是一般的浏览器如果遇到不识别的标签的话会无视掉的，浏览器不会认为这是javascript代码的。浏览器只会把它当成无意义的字符串，而程序中则可以使用标签里面的内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"x-shader/x-vertex\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"vertexshader\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">// 顶点着色器</span></span></span><br><span class=\"line\">\t\tattribute float size;</span><br><span class=\"line\">\t\tattribute vec3 customColor;</span><br><span class=\"line\">\t\tvarying vec3 vColor;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">void</span> main() &#123;</span></span><br><span class=\"line\">\t\t\tvColor = customColor;</span><br><span class=\"line\">\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );</span><br><span class=\"line\">\t\t\tgl_PointSize = size * ( 300.0 / -mvPosition.z );</span><br><span class=\"line\">\t\t\tgl_Position = projectionMatrix * mvPosition;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"x-shader/x-fragment\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fragmentshader\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">// 片段着色器</span></span></span><br><span class=\"line\">\t\tuniform vec3 color;</span><br><span class=\"line\">\t\tuniform sampler2D pointTexture;</span><br><span class=\"line\">\t\tvarying vec3 vColor;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"keyword\">void</span> main() &#123;</span></span><br><span class=\"line\">\t\t\tgl_FragColor = vec4( color * vColor, 1.0 );</span><br><span class=\"line\">\t\t\tgl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/life-flowers/1.jpg","post":"ck9tewmvf000g2c7kgrm5v2c9","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/life-flowers/2.jpg","post":"ck9tewmvf000g2c7kgrm5v2c9","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/life-flowers/3.jpg","post":"ck9tewmvf000g2c7kgrm5v2c9","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/life-flowers/4.jpg","post":"ck9tewmvf000g2c7kgrm5v2c9","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/life-flowers/5.jpg","post":"ck9tewmvf000g2c7kgrm5v2c9","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/life-flowers/6.jpg","post":"ck9tewmvf000g2c7kgrm5v2c9","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/life-flowers/7.jpg","post":"ck9tewmvf000g2c7kgrm5v2c9","slug":"7.jpg","modified":1,"renderable":1},{"_id":"source/_posts/import-three/1.jpg","post":"ck9tewmys00112c7k0p61n46b","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/import-three/2.jpg","post":"ck9tewmys00112c7k0p61n46b","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/import-three/3.jpg","post":"ck9tewmys00112c7k0p61n46b","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/import-three/4.jpg","post":"ck9tewmys00112c7k0p61n46b","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/import-three/5.jpg","post":"ck9tewmys00112c7k0p61n46b","slug":"5.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ck9tewmux00002c7ki8kwheur","category_id":"ck9tewmv400042c7kt209w6vm","_id":"ck9tewmvd000e2c7kpzrkz5ry"},{"post_id":"ck9tewmvc000d2c7k1uo2bbaj","category_id":"ck9tewmva000a2c7k16p0o6p6","_id":"ck9tewmvj000l2c7kc86na5b3"},{"post_id":"ck9tewmv800072c7ks01y86qs","category_id":"ck9tewmva000a2c7k16p0o6p6","_id":"ck9tewmvj000o2c7ky7iwd105"},{"post_id":"ck9tewmv900082c7kv2dt6tvv","category_id":"ck9tewmvg000h2c7kuhiouue3","_id":"ck9tewmvk000q2c7kfeqc64ta"},{"post_id":"ck9tewmvf000g2c7kgrm5v2c9","category_id":"ck9tewmvj000n2c7kdynas0of","_id":"ck9tewmvk000t2c7khmiruxk3"},{"post_id":"ck9tewmys00112c7k0p61n46b","category_id":"ck9tewmyu00122c7k8dmed6l1","_id":"ck9tewmyw00152c7kshi60vw6"}],"PostTag":[{"post_id":"ck9tewmux00002c7ki8kwheur","tag_id":"ck9tewmv600052c7khi46y57e","_id":"ck9tewmva000b2c7k9pzxtxw4"},{"post_id":"ck9tewmv200022c7kyt9z8zz2","tag_id":"ck9tewmv900092c7k79u00s3i","_id":"ck9tewmvh000i2c7kxrw9w5zd"},{"post_id":"ck9tewmv600062c7ktsilauy3","tag_id":"ck9tewmv600052c7khi46y57e","_id":"ck9tewmvj000m2c7ky2m8bwnn"},{"post_id":"ck9tewmv800072c7ks01y86qs","tag_id":"ck9tewmvi000k2c7k1da0czua","_id":"ck9tewmvk000r2c7kjgeaopys"},{"post_id":"ck9tewmvb000c2c7kfa9nbn76","tag_id":"ck9tewmvj000p2c7kni52pque","_id":"ck9tewmvk000u2c7kkrgem13q"},{"post_id":"ck9tewmvc000d2c7k1uo2bbaj","tag_id":"ck9tewmvi000k2c7k1da0czua","_id":"ck9tewmvl000w2c7kb0w3kp46"},{"post_id":"ck9tewmvf000g2c7kgrm5v2c9","tag_id":"ck9tewmvl000v2c7khpgxggct","_id":"ck9tewmvl000y2c7kjl4yi7ns"},{"post_id":"ck9tewmvh000j2c7k58z660jn","tag_id":"ck9tewmvl000x2c7kg37xo2yk","_id":"ck9tewmvl000z2c7kxcva1k4k"},{"post_id":"ck9tewmys00112c7k0p61n46b","tag_id":"ck9tewmyv00132c7k7omkz9za","_id":"ck9tewmyw00142c7kz8w9wgjv"}],"Tag":[{"name":"JavaScript","_id":"ck9tewmv600052c7khi46y57e"},{"name":"git","_id":"ck9tewmv900092c7k79u00s3i"},{"name":"配置","_id":"ck9tewmvi000k2c7k1da0czua"},{"name":"综合","_id":"ck9tewmvj000p2c7kni52pque"},{"name":"日常","_id":"ck9tewmvl000v2c7khpgxggct"},{"name":"javascript","_id":"ck9tewmvl000x2c7kg37xo2yk"},{"name":"学习笔记","_id":"ck9tewmyv00132c7k7omkz9za"}]}}